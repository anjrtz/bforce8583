/* gSoapISO8583WSStub.h
   Generated by gSOAP 2.7.10 from gSoapISO8583WSwsdl.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef gSoapISO8583WSStub_H
#define gSoapISO8583WSStub_H
#include <vector>
#ifndef WITH_NONAMESPACES
#define WITH_NONAMESPACES
#endif
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_ISO8583WS__TValidationError
#define SOAP_TYPE_ISO8583WS__TValidationError (24)
/* ISO8583WS:TValidationError */
enum ISO8583WS__TValidationError {ISO8583WS__TValidationError__NoError = 0, ISO8583WS__TValidationError__InvalidMsgLength = 1, ISO8583WS__TValidationError__InvalidMsgFormat = 2, ISO8583WS__TValidationError__InvalidMTIVersion = 3, ISO8583WS__TValidationError__InvalidMTIClass = 4, ISO8583WS__TValidationError__InvalidMTIFunction = 5, ISO8583WS__TValidationError__InvalidMTIOrigin = 6, ISO8583WS__TValidationError__InvalidElementID = 7, ISO8583WS__TValidationError__InvalidElementSize = 8, ISO8583WS__TValidationError__InvalidElementValue = 9, ISO8583WS__TValidationError__ElementIsMissing = 10, ISO8583WS__TValidationError__ExtraElementsFound = 11, ISO8583WS__TValidationError__VersionNotSupported = 12, ISO8583WS__TValidationError__MTINotSupported = 13, ISO8583WS__TValidationError__PANIsMissing = 14, ISO8583WS__TValidationError__ProcessingCodeIsMissing = 15, ISO8583WS__TValidationError__TransactionAmountIsMissing = 16, ISO8583WS__TValidationError__TransactionCurrencyIsMissing = 17, ISO8583WS__TValidationError__CardholderBillingAmountIsMissing = 18, ISO8583WS__TValidationError__CardholderBillingCurrencyIsNotEuro = 19, ISO8583WS__TValidationError__CardholderBillingConversionRateIsMissing = 20, ISO8583WS__TValidationError__CardholderBillingAmountWrong = 21, ISO8583WS__TValidationError__STANIsMissing = 22, ISO8583WS__TValidationError__DateTimeLocalIsMissing = 23, ISO8583WS__TValidationError__ExpirationDateIsMissing = 24, ISO8583WS__TValidationError__POSDataCodeIsMissing = 25, ISO8583WS__TValidationError__CardSequenceNumberIsMissing = 26, ISO8583WS__TValidationError__FunctionCodeIsMissing = 27, ISO8583WS__TValidationError__CardAcceptorBusinessCodeIsMissing = 28, ISO8583WS__TValidationError__AcquiringInstitutionIdentificationCodeIsMissing = 29, ISO8583WS__TValidationError__Track2DataIsMissing = 30, ISO8583WS__TValidationError__RRNIsMissing = 31, ISO8583WS__TValidationError__TerminalIDIsMissing = 32, ISO8583WS__TValidationError__CardAcceptorIdentificationCodeIsMissing = 33, ISO8583WS__TValidationError__CardAcceptorNameLocationIsMissing = 34, ISO8583WS__TValidationError__PINIsMissing = 35, ISO8583WS__TValidationError__SecurityRelatedControlInformationIsMissing = 36, ISO8583WS__TValidationError__AdditionalAmountsIsMissing = 37, ISO8583WS__TValidationError__ICCDataIsMissing = 38, ISO8583WS__TValidationError__AdditionalPrivateDataIsMissing = 39, ISO8583WS__TValidationError__MAC1IsMissing = 40, ISO8583WS__TValidationError__FunctionCodeIsInvalid = 41, ISO8583WS__TValidationError__MessageReasonCodeIsMissing = 42, ISO8583WS__TValidationError__TransactionDestinationInstitutionIdentificationCodeIsMissing = 43, ISO8583WS__TValidationError__TransactionOriginatorInstitutionIdentificationCodeIsMissing = 44, ISO8583WS__TValidationError__MAC2IsMissing = 45, ISO8583WS__TValidationError__InvalidRequest = 46, ISO8583WS__TValidationError__OriginalAmountsIsMissing = 47, ISO8583WS__TValidationError__ApprovalCodeIsMissing = 48, ISO8583WS__TValidationError__OriginalDataElementsIsMissing = 49, ISO8583WS__TValidationError__AuthorizingAgentInstitutionIdentificationCodeIsMissing = 50, ISO8583WS__TValidationError__ForwardToIssuerFailed = 51, ISO8583WS__TValidationError__TerminalIDUnknown = 52, ISO8583WS__TValidationError__InvalidProcessingCode = 53, ISO8583WS__TValidationError__TransactionAmountAboveMaximum = 54, ISO8583WS__TValidationError__GeneralSystemError = 55, ISO8583WS__TValidationError__NoDatabaseConnection = 56, ISO8583WS__TValidationError__RequestRejected = 57};
#endif

#ifndef SOAP_TYPE_ISO8583WS__TValueType
#define SOAP_TYPE_ISO8583WS__TValueType (25)
/* ISO8583WS:TValueType */
enum ISO8583WS__TValueType {ISO8583WS__TValueType__Numeric = 0, ISO8583WS__TValueType__AlphaNumeric = 1, ISO8583WS__TValueType__HexBinary = 2, ISO8583WS__TValueType__String = 3};
#endif

/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_xsd__hexBinary
#define SOAP_TYPE_xsd__hexBinary (8)
/* hexBinary schema type: */
class SOAP_CMAC xsd__hexBinary
{
public:
	unsigned char *__ptr;
	int __size;
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_xsd__hexBinary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__hexBinary() : __ptr(NULL), __size(0) { }
	virtual ~xsd__hexBinary() { }
};
#endif

#ifndef SOAP_TYPE_ISO8583WS__ArrayOfCISO8583Msg
#define SOAP_TYPE_ISO8583WS__ArrayOfCISO8583Msg (12)
/* ISO8583WS:ArrayOfCISO8583Msg */
class SOAP_CMAC ISO8583WS__ArrayOfCISO8583Msg
{
public:
	std::vector<class ISO8583WS__CISO8583Msg * >CISO8583Msg;	/* optional element of type ISO8583WS:CISO8583Msg */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_ISO8583WS__ArrayOfCISO8583Msg */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ISO8583WS__ArrayOfCISO8583Msg() : soap(NULL) { }
	virtual ~ISO8583WS__ArrayOfCISO8583Msg() { }
};
#endif

#ifndef SOAP_TYPE_ISO8583WS__CISO8583Msg
#define SOAP_TYPE_ISO8583WS__CISO8583Msg (13)
/* ISO8583WS:CISO8583Msg */
class SOAP_CMAC ISO8583WS__CISO8583Msg
{
public:
	int MTI;	/* required element of type xsd:int */
	enum ISO8583WS__TValidationError Error;	/* required element of type ISO8583WS:TValidationError */
	class ISO8583WS__ArrayOfAlNum *AlphaNumericElements;	/* optional element of type ISO8583WS:ArrayOfAlNum */
	class ISO8583WS__ArrayOfNum *NumericElements;	/* optional element of type ISO8583WS:ArrayOfNum */
	class ISO8583WS__ArrayOfBin *BinaryElements;	/* optional element of type ISO8583WS:ArrayOfBin */
	class ISO8583WS__ArrayOfISO8583Field *ISO8583Fields;	/* optional element of type ISO8583WS:ArrayOfISO8583Field */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_ISO8583WS__CISO8583Msg */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ISO8583WS__CISO8583Msg() : MTI(0), Error((enum ISO8583WS__TValidationError)0), AlphaNumericElements(NULL), NumericElements(NULL), BinaryElements(NULL), ISO8583Fields(NULL), soap(NULL) { }
	virtual ~ISO8583WS__CISO8583Msg() { }
};
#endif

#ifndef SOAP_TYPE_ISO8583WS__ArrayOfAlNum
#define SOAP_TYPE_ISO8583WS__ArrayOfAlNum (14)
/* ISO8583WS:ArrayOfAlNum */
class SOAP_CMAC ISO8583WS__ArrayOfAlNum
{
public:
	std::vector<class ISO8583WS__AlNum * >AlNum;	/* optional element of type ISO8583WS:AlNum */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_ISO8583WS__ArrayOfAlNum */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ISO8583WS__ArrayOfAlNum() : soap(NULL) { }
	virtual ~ISO8583WS__ArrayOfAlNum() { }
};
#endif

#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_ISO8583WS__AlNum
#define SOAP_TYPE_ISO8583WS__AlNum (15)
/* ISO8583WS:AlNum */
class SOAP_CMAC ISO8583WS__AlNum
{
public:
	int ID;	/* required element of type xsd:int */
	std::string *Value;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_ISO8583WS__AlNum */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ISO8583WS__AlNum() : ID(0), Value(NULL), soap(NULL) { }
	virtual ~ISO8583WS__AlNum() { }
};
#endif

#ifndef SOAP_TYPE_ISO8583WS__ArrayOfNum
#define SOAP_TYPE_ISO8583WS__ArrayOfNum (16)
/* ISO8583WS:ArrayOfNum */
class SOAP_CMAC ISO8583WS__ArrayOfNum
{
public:
	std::vector<class ISO8583WS__Num * >Num;	/* optional element of type ISO8583WS:Num */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_ISO8583WS__ArrayOfNum */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ISO8583WS__ArrayOfNum() : soap(NULL) { }
	virtual ~ISO8583WS__ArrayOfNum() { }
};
#endif

#ifndef SOAP_TYPE_ISO8583WS__Num
#define SOAP_TYPE_ISO8583WS__Num (17)
/* ISO8583WS:Num */
class SOAP_CMAC ISO8583WS__Num
{
public:
	int ID;	/* required element of type xsd:int */
	std::string *Value;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_ISO8583WS__Num */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ISO8583WS__Num() : ID(0), Value(NULL), soap(NULL) { }
	virtual ~ISO8583WS__Num() { }
};
#endif

#ifndef SOAP_TYPE_ISO8583WS__ArrayOfBin
#define SOAP_TYPE_ISO8583WS__ArrayOfBin (18)
/* ISO8583WS:ArrayOfBin */
class SOAP_CMAC ISO8583WS__ArrayOfBin
{
public:
	std::vector<class ISO8583WS__Bin * >Bin;	/* optional element of type ISO8583WS:Bin */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_ISO8583WS__ArrayOfBin */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ISO8583WS__ArrayOfBin() : soap(NULL) { }
	virtual ~ISO8583WS__ArrayOfBin() { }
};
#endif

#ifndef SOAP_TYPE_ISO8583WS__Bin
#define SOAP_TYPE_ISO8583WS__Bin (19)
/* ISO8583WS:Bin */
class SOAP_CMAC ISO8583WS__Bin
{
public:
	int ID;	/* required element of type xsd:int */
	xsd__hexBinary *Value;	/* optional element of type xsd:hexBinary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_ISO8583WS__Bin */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ISO8583WS__Bin() : ID(0), Value(NULL), soap(NULL) { }
	virtual ~ISO8583WS__Bin() { }
};
#endif

#ifndef SOAP_TYPE_ISO8583WS__ArrayOfISO8583Field
#define SOAP_TYPE_ISO8583WS__ArrayOfISO8583Field (20)
/* ISO8583WS:ArrayOfISO8583Field */
class SOAP_CMAC ISO8583WS__ArrayOfISO8583Field
{
public:
	std::vector<class ISO8583WS__ISO8583Field * >Field;	/* optional element of type ISO8583WS:ISO8583Field */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_ISO8583WS__ArrayOfISO8583Field */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ISO8583WS__ArrayOfISO8583Field() : soap(NULL) { }
	virtual ~ISO8583WS__ArrayOfISO8583Field() { }
};
#endif

#ifndef SOAP_TYPE_ISO8583WS__ISO8583Field
#define SOAP_TYPE_ISO8583WS__ISO8583Field (21)
/* ISO8583WS:ISO8583Field */
class SOAP_CMAC ISO8583WS__ISO8583Field
{
public:
	int ID;	/* required attribute */
	std::string *Value;	/* optional attribute */
	enum ISO8583WS__TValueType ValueType;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_ISO8583WS__ISO8583Field */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ISO8583WS__ISO8583Field() : ID(0), Value(NULL), ValueType((enum ISO8583WS__TValueType)3), soap(NULL) { }
	virtual ~ISO8583WS__ISO8583Field() { }
};
#endif

#ifndef SOAP_TYPE__ISO8583WS__ISO8583Request
#define SOAP_TYPE__ISO8583WS__ISO8583Request (22)
/* ISO8583WS:ISO8583Request */
class SOAP_CMAC _ISO8583WS__ISO8583Request
{
public:
	ISO8583WS__ArrayOfCISO8583Msg *ISO8583Msgs;	/* optional element of type ISO8583WS:ArrayOfCISO8583Msg */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE__ISO8583WS__ISO8583Request */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ISO8583WS__ISO8583Request() : ISO8583Msgs(NULL), soap(NULL) { }
	virtual ~_ISO8583WS__ISO8583Request() { }
};
#endif

#ifndef SOAP_TYPE__ISO8583WS__ISO8583RequestResponse
#define SOAP_TYPE__ISO8583WS__ISO8583RequestResponse (23)
/* ISO8583WS:ISO8583RequestResponse */
class SOAP_CMAC _ISO8583WS__ISO8583RequestResponse
{
public:
	bool ISO8583RequestResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	ISO8583WS__ArrayOfCISO8583Msg *ISO8583Msgs;	/* optional element of type ISO8583WS:ArrayOfCISO8583Msg */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE__ISO8583WS__ISO8583RequestResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ISO8583WS__ISO8583RequestResponse() : ISO8583RequestResult((bool)0), ISO8583Msgs(NULL), soap(NULL) { }
	virtual ~_ISO8583WS__ISO8583RequestResponse() { }
};
#endif

#ifndef SOAP_TYPE___ISO8583WS11__ISO8583Request
#define SOAP_TYPE___ISO8583WS11__ISO8583Request (49)
/* Operation wrapper: */
struct __ISO8583WS11__ISO8583Request
{
public:
	_ISO8583WS__ISO8583Request *ISO8583WS__ISO8583Request;	/* optional element of type ISO8583WS:ISO8583Request */
};
#endif

#ifndef SOAP_TYPE___ISO8583WS12__ISO8583Request
#define SOAP_TYPE___ISO8583WS12__ISO8583Request (51)
/* Operation wrapper: */
struct __ISO8583WS12__ISO8583Request
{
public:
	_ISO8583WS__ISO8583Request *ISO8583WS__ISO8583Request;	/* optional element of type ISO8583WS:ISO8583Request */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (52)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (53)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (55)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (58)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (59)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operations                                                         *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 __ISO8583WS11__ISO8583Request(struct soap*, _ISO8583WS__ISO8583Request *ISO8583WS__ISO8583Request, _ISO8583WS__ISO8583RequestResponse *ISO8583WS__ISO8583RequestResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ISO8583WS12__ISO8583Request(struct soap*, _ISO8583WS__ISO8583Request *ISO8583WS__ISO8583Request, _ISO8583WS__ISO8583RequestResponse *ISO8583WS__ISO8583RequestResponse);

/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ISO8583WS11__ISO8583Request(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ISO8583WS__ISO8583Request *ISO8583WS__ISO8583Request, _ISO8583WS__ISO8583RequestResponse *ISO8583WS__ISO8583RequestResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ISO8583WS12__ISO8583Request(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ISO8583WS__ISO8583Request *ISO8583WS__ISO8583Request, _ISO8583WS__ISO8583RequestResponse *ISO8583WS__ISO8583RequestResponse);

/******************************************************************************\
 *                                                                            *
 * Skeletons                                                                  *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 gSoapISO8583WS_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 gSoapISO8583WS_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ISO8583WS11__ISO8583Request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ISO8583WS12__ISO8583Request(struct soap*);

#endif

/* End of gSoapISO8583WSStub.h */
