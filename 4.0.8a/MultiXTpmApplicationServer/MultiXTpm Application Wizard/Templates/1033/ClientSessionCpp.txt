/*!	\file	*/
// [!output PROJECT_NAME_NB]ClientSession.cpp: implementation of the C[!output PROJECT_NAME_NB]ClientSession class.
//
//////////////////////////////////////////////////////////////////////
/*

MultiX Network Applications Development Toolkit.
Copyright (C) 2007, Moshe Shitrit, Mitug Distributed Systems Ltd., All Rights Reserved.

This file is part of MultiX.

MultiX is free software; you can redistribute it and/or modify it under the terms of the 
GNU General Public License as published by the Free Software Foundation; 
either version 2 of the License, or (at your option) any later version. 

MultiX is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with this program;
if not, write to the 
Free Software Foundation, Inc., 
59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
--------------------------------------------------------------------------------
Author contact information: 
msr@mitug.co.il
--------------------------------------------------------------------------------

*/

#include "[!output PROJECT_NAME_NB].h"
#include	"[!output PROJECT_NAME_NB]App.h"
#include "[!output PROJECT_NAME_NB]ClientSession.h"
[!if	ServerLinkSupport	||	ClientLinkSupport]
#include	"[!output PROJECT_NAME_NB]Link.h"
[!endif]


//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////
//! call the base class constructor,a default session id will be assigned to the session
C[!output PROJECT_NAME_NB]ClientSession::C[!output PROJECT_NAME_NB]ClientSession(C[!output PROJECT_NAME_NB]App	&Owner)	:
	CMultiXSession(Owner)
{
}

//! just make sure the m_pLastTpmMsg deleted, if not , we have a bug
C[!output PROJECT_NAME_NB]ClientSession::~C[!output PROJECT_NAME_NB]ClientSession()
{
//	DebugPrint("Deleted\n");
}

/*!
\\return	always true, tell the garbage collector that it can delete the object. 

	in any case, this function is called only if we left the session.
*/
bool C[!output PROJECT_NAME_NB]ClientSession::CanDelete()
{
	return	true;
}

/*!
	this function is called by the associated link. in this case, we reply with error to the last
	message we received from tpm, if there is one, and we set m_LinkID to an empty ID which points
	to no link object.
*/
void C[!output PROJECT_NAME_NB]ClientSession::OnLinkDisconnected()
{
	DebugPrint(2,"Link Disconnected\n");
[!if	ServerLinkSupport	||	ClientLinkSupport]
	m_LinkID	=	CMultiXLinkID();
[!endif]
}

[!if	ServerLinkSupport	||	ClientLinkSupport]
/*!
\param	pLink	a pointer to the link that created the session object
	The link object that created the session objects, notify us that it is the one that
	handles the connection to the other peer, we keep its ID.
*/
void C[!output PROJECT_NAME_NB]ClientSession::OnLinkConnected(C[!output PROJECT_NAME_NB]Link *pLink)
{
	DebugPrint(2,"Link Connected\n");
	m_LinkID	=	pLink->GetID();
}
[!endif]


[!if	TCPProtocolSupport]	
/*!
\param	PartnerMsg	the message received from the session partner, it is allways a data message.
\return	true

	The associated link notifies us of a newly received message.
*/
bool C[!output PROJECT_NAME_NB]ClientSession::OnNewPartnerMsg(C[!output PROJECT_NAME_NB]Msg &PartnerMsg)
{
	int	MsgCode	=	0;
	//	TODO:	Set a specific MsgCode based on the data received.
	if(!Send(MsgCode,*PartnerMsg.Data(),CMultiXAppMsg::FlagNotifyAll))
	{
		Throw();
	}
	DebugPrint(2,"Msg Sent to TPM\n");
	return	true;
}

[!endif]
/*!
	see CMultiXSession::OnSendMsgCompleted
	We notify the associated link that the last message received from the POS terminal
	was processed succefuly by the server application.
*/
void	C[!output PROJECT_NAME_NB]ClientSession::OnSendMsgCompleted(CMultiXAppMsg &OriginalMsg)
{
	DebugPrint(2,"Send Msg Completed\n");
	[!if	ServerLinkSupport	||	ClientLinkSupport]
	C[!output PROJECT_NAME_NB]Link	*pLink	=	GetLink();
	if(pLink)
		pLink->OnSessionSendCompleted(OriginalMsg);
	[!endif]
		
}

/*!
	see CMultiXSession::OnSendMsgFailed
	We notify the associated link that the last message received from the POS terminal
	was not processed succefuly by the server application.
*/
void	C[!output PROJECT_NAME_NB]ClientSession::OnSendMsgFailed(CMultiXAppMsg &OriginalMsg)
{
	DebugPrint(2,"Send Msg Failed\n");
	[!if	ServerLinkSupport	||	ClientLinkSupport]
	C[!output PROJECT_NAME_NB]Link	*pLink	=	GetLink();
	if(pLink)
		pLink->OnSessionSendFailed(OriginalMsg,ErrUnableToForwardMsg);
	[!endif]
}
/*!
	see CMultiXSession::OnSendMsgTimedout
	We notify the associated link that the last message received from the POS terminal
	was not processed succefuly by the server application.
*/
void	C[!output PROJECT_NAME_NB]ClientSession::OnSendMsgTimedout(CMultiXAppMsg &OriginalMsg)
{
	DebugPrint(2,"Send Msg Timedout\n");
	[!if	ServerLinkSupport	||	ClientLinkSupport]
	C[!output PROJECT_NAME_NB]Link	*pLink	=	GetLink();
	if(pLink)
		pLink->OnSessionSendFailed(OriginalMsg,ErrMsgForwardTimedout);
	[!endif]

}
/*!
	see	CMultiXSession::OnDataReplyReceived

	this reply is for a message or an ACK previously received from the POS terminal.
*/
void	C[!output PROJECT_NAME_NB]ClientSession::OnDataReplyReceived(CMultiXAppMsg &ReplyMsg,CMultiXAppMsg &OriginalMsg)
{
	DebugPrint(2,"Data Reply Received\n");
	
	[!if	ServerLinkSupport	||	ClientLinkSupport]
	
	C[!output PROJECT_NAME_NB]Link	*pLink	=	GetLink();
	

	if(!pLink)	//	probably the link was disconnected before the reply was received
	{
		int	Error	=	ErrLinkDisconnected;	
		//	TODO:	Set an application specific error code
		
		ReplyMsg.Reply(Error);
		return;
	}

	if(ReplyMsg.AppDataSize()	==	0)	//	an empty reply from the server application
	{
		if(ReplyMsg.Error()	!=	0)
			pLink->OnSessionSendFailed(OriginalMsg,ReplyMsg.Error());
		else
			pLink->OnSessionSendCompleted(OriginalMsg);
		ReplyMsg.Reply();	//	just reply to the received msg, in case the sender expects a reply
		return;
	}


	// forward the reply to the associated link
	CMultiXBuffer	*Buf	=	Owner()->AllocateBuffer(ReplyMsg.AppData(),ReplyMsg.AppDataSize());

	pLink->OnSessionReply(*Buf,OriginalMsg);
	Buf->ReturnBuffer();
[!if	TCPProtocolSupport]	
	ReplyMsg.Reply(0);
[!endif]

	[!else]
	ReplyMsg.Reply(0);
	[!endif]
}

[!if	ServerLinkSupport	||	ClientLinkSupport]
/*!
	\return a pointer to the associated link based on m_LinkID.
*/
C[!output PROJECT_NAME_NB]Link * C[!output PROJECT_NAME_NB]ClientSession::GetLink()
{
	return	(C[!output PROJECT_NAME_NB]Link *)m_LinkID.GetObject();
}
[!endif]

/*! see CMultiXSession::OnSessionKilled
in our case we just leave the session
*/
void	C[!output PROJECT_NAME_NB]ClientSession::OnSessionKilled(CMultiXProcess *KillingProcess)
{
//	DebugPrint("Killed\n");
	Leave();
}

/*! see CMultiXSession::CheckStatus
*/
bool	C[!output PROJECT_NAME_NB]ClientSession::CheckStatus()
{
[!if	ServerLinkSupport	||	ClientLinkSupport]
	if(GetLink()	==	NULL)
		Kill();
[!endif]
	//	by returning true we will disable the deletion of the session based on Idle timer
	return	true;
}
