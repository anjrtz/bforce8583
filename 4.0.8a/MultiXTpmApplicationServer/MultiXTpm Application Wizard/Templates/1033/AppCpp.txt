/*!	\file	
 [!output PROJECT_NAME_NB]App.cpp: implementation of the C[!output PROJECT_NAME_NB]App class.
*/
/*

MultiX Network Applications Development Toolkit.
Copyright (C) 2007, Moshe Shitrit, Mitug Distributed Systems Ltd., All Rights Reserved.

This file is part of MultiX.

MultiX is free software; you can redistribute it and/or modify it under the terms of the 
GNU General Public License as published by the Free Software Foundation; 
either version 2 of the License, or (at your option) any later version. 

MultiX is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with this program;
if not, write to the 
Free Software Foundation, Inc., 
59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
--------------------------------------------------------------------------------
Author contact information: 
msr@mitug.co.il
--------------------------------------------------------------------------------

*/

#include "[!output PROJECT_NAME_NB].h"
#include "[!output PROJECT_NAME_NB]App.h"

[!if SimpleClient]
C[!output PROJECT_NAME_NB]App::C[!output PROJECT_NAME_NB]App()	:
	CMultiXSimpleClientApplication()
{
}
//!	Destructor
C[!output PROJECT_NAME_NB]App::~C[!output PROJECT_NAME_NB]App()
{
}
[!else]
	[!if SimpleServer]
C[!output PROJECT_NAME_NB]App::C[!output PROJECT_NAME_NB]App()	:
	CMultiXSimpleServerApplication()
{
}
//!	Destructor
C[!output PROJECT_NAME_NB]App::~C[!output PROJECT_NAME_NB]App()
{
}
	[!else]
[!if	ServerLinkSupport]
#include	"[!output PROJECT_NAME_NB]ServerLink.h"
[!endif]
[!if	ClientLinkSupport]
#include	"[!output PROJECT_NAME_NB]ClientLink.h"
[!endif]
#include	"[!output PROJECT_NAME_NB]Process.h"
[!if	ServerSessionSupport]
#include	"[!output PROJECT_NAME_NB]ServerSession.h"
[!endif]
//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////
//!	see CMultiXApp::CMultiXApp
C[!output PROJECT_NAME_NB]App::C[!output PROJECT_NAME_NB]App(int	Argc,char	*Argv[],std::string	Class)	:
	CMultiXApp(Argc,Argv,[!output PROJECT_NAME_NB]_SOFTWARE_VERSION,Class,0)
{
	CreateLogger([!output PROJECT_NAME_NB]_SOFTWARE_VERSION);
}

//!	Destructor
C[!output PROJECT_NAME_NB]App::~C[!output PROJECT_NAME_NB]App()
{
}
//!	see CMultiXApp::AllocateNewProcess
CMultiXProcess * C[!output PROJECT_NAME_NB]App::AllocateNewProcess(TMultiXProcID ProcID)
{
	return	new	C[!output PROJECT_NAME_NB]Process(ProcID);
}


//!	see CMultiXApp::OnStartup
void C[!output PROJECT_NAME_NB]App::OnStartup()
{
	Logger()->ReportInfo(DebugPrint(0,"Application started\n"));
	CMultiXApp::OnStartup();
}

[!if ServerLinkSupport	||	ClientLinkSupport]
//!	see CMultiXApp::OnTpmConfiguredLink

void C[!output PROJECT_NAME_NB]App::OnTpmConfiguredLink(CMultiXTpmConfiguredLink &Link)
{
	[!if ServerLinkSupport]

	if(Link.OpenMode	==	MultiXOpenModeServer)
	{
		C[!output PROJECT_NAME_NB]ServerLink	*pLink	=	new	C[!output PROJECT_NAME_NB]ServerLink(Link.ConfigParams);
		AddLink(pLink);
		if(!pLink->Listen(Link.LocalPort))
		{
			Logger()->ReportError(DebugPrint(0,"Listen Failed on Ip=%s , Port=%s\n",Link.LocalAddress.c_str(),Link.LocalPort.c_str()));
		}	else
		{
			DebugPrint(1,"Started Listenning on Ip=%s , Port=%s\n",pLink->LocalName().c_str(),pLink->LocalPort().c_str());
		}
	}
	[!endif]
	[!if ClientLinkSupport]
	if(Link.OpenMode	==	MultiXOpenModeClient)
	{
		C[!output PROJECT_NAME_NB]ClientLink	*pLink	=	new	C[!output PROJECT_NAME_NB]ClientLink(Link.ConfigParams);
		AddLink(pLink);
		if(!pLink->Connect(Link.RemoteAddress,Link.RemotePort))
		{
			Logger()->ReportError(DebugPrint(0,"Connect Failed on Ip=%s , Port=%s\n",Link.RemoteAddress.c_str(),Link.RemotePort.c_str()));
		}	else
		{
			DebugPrint(1,"Started Connecting on Ip=%s , Port=%s\n",pLink->RemoteName().c_str(),pLink->RemotePort().c_str());
		}
	}
	[!endif]
	CMultiXApp::OnTpmConfiguredLink(Link);
}
[!endif]

bool C[!output PROJECT_NAME_NB]App::OnMultiXException(CMultiXException &e)
{
	Logger()->ReportError(
		DebugPrint(0,"Exception occured at file \"%s\" Line %d\nApplication Message=\"%s\"\n\nProgram TERMINATED !!!\n",
								e.m_File.c_str(),
								e.m_Line,
								e.m_Text.c_str()));
	return	false;
}
//!	see	CMultiXApp::OnShutdown
void C[!output PROJECT_NAME_NB]App::OnShutdown()
{
	Logger()->ReportInfo(DebugPrint(0,"Application stopped\n"));
}

//!	see	CMultiXApp::OnPrepareForShutdown
void C[!output PROJECT_NAME_NB]App::OnPrepareForShutdown(int32_t WaitTime)
{
	//	if we have listeners we close all of them so no new connections will be accepted
	for(CMultiXLink	*Link	=	GetFirstLink();Link;Link=Link->ID().Next())
	{
		if(Link->IsRaw()	&&	Link->OpenMode()	==	MultiXOpenModeServer)
			Link->Close();
	}
	if(WaitTime	<	2000)
		End();
}

//!	see	CMultiXApp::OnProcessRestart
void C[!output PROJECT_NAME_NB]App::OnProcessRestart()
{
	//	we are required to end immediately, so we call End()
	End();
}
//!	see	CMultiXApp::OnProcessRestart
void C[!output PROJECT_NAME_NB]App::OnProcessSuspend()
{
	//	Add your own code for suspend request
}
//!	see	CMultiXApp::OnProcessRestart
void C[!output PROJECT_NAME_NB]App::OnProcessResume()
{
	//	Add your own code for resume request
}

[!if	ServerSessionSupport]
//!	see CMultiXApp::CreateNewSession
CMultiXSession * C[!output PROJECT_NAME_NB]App::CreateNewSession(const	TMultiXSessionID &SessionID)
{
	return	new	C[!output PROJECT_NAME_NB]ServerSession(SessionID,*this);
}
[!endif]


//!	see	CMultiXApp::OnTpmConfigCompleted
void C[!output PROJECT_NAME_NB]App::OnTpmConfigCompleted()
{
}

//!	see	CMultiXApp::OnApplicationEvent
void C[!output PROJECT_NAME_NB]App::OnApplicationEvent(CMultiXEvent *Event)
{
}

//!	see	CMultiXApp::OnConnectProcessFailed
void C[!output PROJECT_NAME_NB]App::OnConnectProcessFailed(TMultiXProcID ProcessID)
{
	Logger()->ReportInfo(DebugPrint(0,"Connect to Process %d Failed !!!\n",ProcessID));
}
	[!endif]
[!endif]

