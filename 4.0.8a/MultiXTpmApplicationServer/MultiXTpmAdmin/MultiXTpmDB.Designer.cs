//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MultiXTpmAdmin {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("MultiXTpmDB")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MultiXTpmDB : global::System.Data.DataSet {
        
        private ProcessClassDataTable tableProcessClass;
        
        private LinkDataTable tableLink;
        
        private GroupDataTable tableGroup;
        
        private MessageDataTable tableMessage;
        
        private GroupForwardFlagsDataTable tableGroupForwardFlags;
        
        private ParamDataTable tableParam;
        
        private ProcessClassLinksDataTable tableProcessClassLinks;
        
        private ProcessClassParamsDataTable tableProcessClassParams;
        
        private LinkParamsDataTable tableLinkParams;
        
        private GroupProcessClassesDataTable tableGroupProcessClasses;
        
        private GroupStatusProcessesDataTable tableGroupStatusProcesses;
        
        private GroupStatusDataTable tableGroupStatus;
        
        private ProcessStatusDataTable tableProcessStatus;
        
        private UserPermissionsDataTable tableUserPermissions;
        
        private global::System.Data.DataRelation relationMessageGroupForwardFlags;
        
        private global::System.Data.DataRelation relationGroupGroupForwardFlags;
        
        private global::System.Data.DataRelation relationLinkProcessClassLinks;
        
        private global::System.Data.DataRelation relationProcessClassProcessClassLinks;
        
        private global::System.Data.DataRelation relationParamProcessClassParams;
        
        private global::System.Data.DataRelation relationProcessClassProcessClassParams;
        
        private global::System.Data.DataRelation relationParamLinkParams;
        
        private global::System.Data.DataRelation relationLinkLinkParams;
        
        private global::System.Data.DataRelation relationGroupGroupProcessClasses;
        
        private global::System.Data.DataRelation relationProcessClassGroupProcessClasses;
        
        private global::System.Data.DataRelation relationProcessStatusGroupStatusProcesses;
        
        private global::System.Data.DataRelation relationGroupStatusGroupStatusProcesses;
        
        private global::System.Data.DataRelation relationGroupGroupStatus;
        
        private global::System.Data.DataRelation relationProcessProcessStatus;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MultiXTpmDB() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MultiXTpmDB(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ProcessClass"] != null)) {
                    base.Tables.Add(new ProcessClassDataTable(ds.Tables["ProcessClass"]));
                }
                if ((ds.Tables["Link"] != null)) {
                    base.Tables.Add(new LinkDataTable(ds.Tables["Link"]));
                }
                if ((ds.Tables["Group"] != null)) {
                    base.Tables.Add(new GroupDataTable(ds.Tables["Group"]));
                }
                if ((ds.Tables["Message"] != null)) {
                    base.Tables.Add(new MessageDataTable(ds.Tables["Message"]));
                }
                if ((ds.Tables["GroupForwardFlags"] != null)) {
                    base.Tables.Add(new GroupForwardFlagsDataTable(ds.Tables["GroupForwardFlags"]));
                }
                if ((ds.Tables["Param"] != null)) {
                    base.Tables.Add(new ParamDataTable(ds.Tables["Param"]));
                }
                if ((ds.Tables["ProcessClassLinks"] != null)) {
                    base.Tables.Add(new ProcessClassLinksDataTable(ds.Tables["ProcessClassLinks"]));
                }
                if ((ds.Tables["ProcessClassParams"] != null)) {
                    base.Tables.Add(new ProcessClassParamsDataTable(ds.Tables["ProcessClassParams"]));
                }
                if ((ds.Tables["LinkParams"] != null)) {
                    base.Tables.Add(new LinkParamsDataTable(ds.Tables["LinkParams"]));
                }
                if ((ds.Tables["GroupProcessClasses"] != null)) {
                    base.Tables.Add(new GroupProcessClassesDataTable(ds.Tables["GroupProcessClasses"]));
                }
                if ((ds.Tables["GroupStatusProcesses"] != null)) {
                    base.Tables.Add(new GroupStatusProcessesDataTable(ds.Tables["GroupStatusProcesses"]));
                }
                if ((ds.Tables["GroupStatus"] != null)) {
                    base.Tables.Add(new GroupStatusDataTable(ds.Tables["GroupStatus"]));
                }
                if ((ds.Tables["ProcessStatus"] != null)) {
                    base.Tables.Add(new ProcessStatusDataTable(ds.Tables["ProcessStatus"]));
                }
                if ((ds.Tables["UserPermissions"] != null)) {
                    base.Tables.Add(new UserPermissionsDataTable(ds.Tables["UserPermissions"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProcessClassDataTable ProcessClass {
            get {
                return this.tableProcessClass;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LinkDataTable Link {
            get {
                return this.tableLink;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GroupDataTable Group {
            get {
                return this.tableGroup;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MessageDataTable Message {
            get {
                return this.tableMessage;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GroupForwardFlagsDataTable GroupForwardFlags {
            get {
                return this.tableGroupForwardFlags;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ParamDataTable Param {
            get {
                return this.tableParam;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProcessClassLinksDataTable ProcessClassLinks {
            get {
                return this.tableProcessClassLinks;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProcessClassParamsDataTable ProcessClassParams {
            get {
                return this.tableProcessClassParams;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LinkParamsDataTable LinkParams {
            get {
                return this.tableLinkParams;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GroupProcessClassesDataTable GroupProcessClasses {
            get {
                return this.tableGroupProcessClasses;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GroupStatusProcessesDataTable GroupStatusProcesses {
            get {
                return this.tableGroupStatusProcesses;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GroupStatusDataTable GroupStatus {
            get {
                return this.tableGroupStatus;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProcessStatusDataTable ProcessStatus {
            get {
                return this.tableProcessStatus;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserPermissionsDataTable UserPermissions {
            get {
                return this.tableUserPermissions;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            MultiXTpmDB cln = ((MultiXTpmDB)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ProcessClass"] != null)) {
                    base.Tables.Add(new ProcessClassDataTable(ds.Tables["ProcessClass"]));
                }
                if ((ds.Tables["Link"] != null)) {
                    base.Tables.Add(new LinkDataTable(ds.Tables["Link"]));
                }
                if ((ds.Tables["Group"] != null)) {
                    base.Tables.Add(new GroupDataTable(ds.Tables["Group"]));
                }
                if ((ds.Tables["Message"] != null)) {
                    base.Tables.Add(new MessageDataTable(ds.Tables["Message"]));
                }
                if ((ds.Tables["GroupForwardFlags"] != null)) {
                    base.Tables.Add(new GroupForwardFlagsDataTable(ds.Tables["GroupForwardFlags"]));
                }
                if ((ds.Tables["Param"] != null)) {
                    base.Tables.Add(new ParamDataTable(ds.Tables["Param"]));
                }
                if ((ds.Tables["ProcessClassLinks"] != null)) {
                    base.Tables.Add(new ProcessClassLinksDataTable(ds.Tables["ProcessClassLinks"]));
                }
                if ((ds.Tables["ProcessClassParams"] != null)) {
                    base.Tables.Add(new ProcessClassParamsDataTable(ds.Tables["ProcessClassParams"]));
                }
                if ((ds.Tables["LinkParams"] != null)) {
                    base.Tables.Add(new LinkParamsDataTable(ds.Tables["LinkParams"]));
                }
                if ((ds.Tables["GroupProcessClasses"] != null)) {
                    base.Tables.Add(new GroupProcessClassesDataTable(ds.Tables["GroupProcessClasses"]));
                }
                if ((ds.Tables["GroupStatusProcesses"] != null)) {
                    base.Tables.Add(new GroupStatusProcessesDataTable(ds.Tables["GroupStatusProcesses"]));
                }
                if ((ds.Tables["GroupStatus"] != null)) {
                    base.Tables.Add(new GroupStatusDataTable(ds.Tables["GroupStatus"]));
                }
                if ((ds.Tables["ProcessStatus"] != null)) {
                    base.Tables.Add(new ProcessStatusDataTable(ds.Tables["ProcessStatus"]));
                }
                if ((ds.Tables["UserPermissions"] != null)) {
                    base.Tables.Add(new UserPermissionsDataTable(ds.Tables["UserPermissions"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableProcessClass = ((ProcessClassDataTable)(base.Tables["ProcessClass"]));
            if ((initTable == true)) {
                if ((this.tableProcessClass != null)) {
                    this.tableProcessClass.InitVars();
                }
            }
            this.tableLink = ((LinkDataTable)(base.Tables["Link"]));
            if ((initTable == true)) {
                if ((this.tableLink != null)) {
                    this.tableLink.InitVars();
                }
            }
            this.tableGroup = ((GroupDataTable)(base.Tables["Group"]));
            if ((initTable == true)) {
                if ((this.tableGroup != null)) {
                    this.tableGroup.InitVars();
                }
            }
            this.tableMessage = ((MessageDataTable)(base.Tables["Message"]));
            if ((initTable == true)) {
                if ((this.tableMessage != null)) {
                    this.tableMessage.InitVars();
                }
            }
            this.tableGroupForwardFlags = ((GroupForwardFlagsDataTable)(base.Tables["GroupForwardFlags"]));
            if ((initTable == true)) {
                if ((this.tableGroupForwardFlags != null)) {
                    this.tableGroupForwardFlags.InitVars();
                }
            }
            this.tableParam = ((ParamDataTable)(base.Tables["Param"]));
            if ((initTable == true)) {
                if ((this.tableParam != null)) {
                    this.tableParam.InitVars();
                }
            }
            this.tableProcessClassLinks = ((ProcessClassLinksDataTable)(base.Tables["ProcessClassLinks"]));
            if ((initTable == true)) {
                if ((this.tableProcessClassLinks != null)) {
                    this.tableProcessClassLinks.InitVars();
                }
            }
            this.tableProcessClassParams = ((ProcessClassParamsDataTable)(base.Tables["ProcessClassParams"]));
            if ((initTable == true)) {
                if ((this.tableProcessClassParams != null)) {
                    this.tableProcessClassParams.InitVars();
                }
            }
            this.tableLinkParams = ((LinkParamsDataTable)(base.Tables["LinkParams"]));
            if ((initTable == true)) {
                if ((this.tableLinkParams != null)) {
                    this.tableLinkParams.InitVars();
                }
            }
            this.tableGroupProcessClasses = ((GroupProcessClassesDataTable)(base.Tables["GroupProcessClasses"]));
            if ((initTable == true)) {
                if ((this.tableGroupProcessClasses != null)) {
                    this.tableGroupProcessClasses.InitVars();
                }
            }
            this.tableGroupStatusProcesses = ((GroupStatusProcessesDataTable)(base.Tables["GroupStatusProcesses"]));
            if ((initTable == true)) {
                if ((this.tableGroupStatusProcesses != null)) {
                    this.tableGroupStatusProcesses.InitVars();
                }
            }
            this.tableGroupStatus = ((GroupStatusDataTable)(base.Tables["GroupStatus"]));
            if ((initTable == true)) {
                if ((this.tableGroupStatus != null)) {
                    this.tableGroupStatus.InitVars();
                }
            }
            this.tableProcessStatus = ((ProcessStatusDataTable)(base.Tables["ProcessStatus"]));
            if ((initTable == true)) {
                if ((this.tableProcessStatus != null)) {
                    this.tableProcessStatus.InitVars();
                }
            }
            this.tableUserPermissions = ((UserPermissionsDataTable)(base.Tables["UserPermissions"]));
            if ((initTable == true)) {
                if ((this.tableUserPermissions != null)) {
                    this.tableUserPermissions.InitVars();
                }
            }
            this.relationMessageGroupForwardFlags = this.Relations["MessageGroupForwardFlags"];
            this.relationGroupGroupForwardFlags = this.Relations["GroupGroupForwardFlags"];
            this.relationLinkProcessClassLinks = this.Relations["LinkProcessClassLinks"];
            this.relationProcessClassProcessClassLinks = this.Relations["ProcessClassProcessClassLinks"];
            this.relationParamProcessClassParams = this.Relations["ParamProcessClassParams"];
            this.relationProcessClassProcessClassParams = this.Relations["ProcessClassProcessClassParams"];
            this.relationParamLinkParams = this.Relations["ParamLinkParams"];
            this.relationLinkLinkParams = this.Relations["LinkLinkParams"];
            this.relationGroupGroupProcessClasses = this.Relations["GroupGroupProcessClasses"];
            this.relationProcessClassGroupProcessClasses = this.Relations["ProcessClassGroupProcessClasses"];
            this.relationProcessStatusGroupStatusProcesses = this.Relations["ProcessStatusGroupStatusProcesses"];
            this.relationGroupStatusGroupStatusProcesses = this.Relations["GroupStatusGroupStatusProcesses"];
            this.relationGroupGroupStatus = this.Relations["GroupGroupStatus"];
            this.relationProcessProcessStatus = this.Relations["ProcessProcessStatus"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MultiXTpmDB";
            this.Prefix = "";
            this.Namespace = "http://mitug.co.il/MultiXTpmDB.xsd";
            this.Locale = new global::System.Globalization.CultureInfo("en");
            this.EnforceConstraints = false;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableProcessClass = new ProcessClassDataTable();
            base.Tables.Add(this.tableProcessClass);
            this.tableLink = new LinkDataTable();
            base.Tables.Add(this.tableLink);
            this.tableGroup = new GroupDataTable();
            base.Tables.Add(this.tableGroup);
            this.tableMessage = new MessageDataTable();
            base.Tables.Add(this.tableMessage);
            this.tableGroupForwardFlags = new GroupForwardFlagsDataTable();
            base.Tables.Add(this.tableGroupForwardFlags);
            this.tableParam = new ParamDataTable();
            base.Tables.Add(this.tableParam);
            this.tableProcessClassLinks = new ProcessClassLinksDataTable();
            base.Tables.Add(this.tableProcessClassLinks);
            this.tableProcessClassParams = new ProcessClassParamsDataTable();
            base.Tables.Add(this.tableProcessClassParams);
            this.tableLinkParams = new LinkParamsDataTable();
            base.Tables.Add(this.tableLinkParams);
            this.tableGroupProcessClasses = new GroupProcessClassesDataTable();
            base.Tables.Add(this.tableGroupProcessClasses);
            this.tableGroupStatusProcesses = new GroupStatusProcessesDataTable();
            base.Tables.Add(this.tableGroupStatusProcesses);
            this.tableGroupStatus = new GroupStatusDataTable();
            base.Tables.Add(this.tableGroupStatus);
            this.tableProcessStatus = new ProcessStatusDataTable();
            base.Tables.Add(this.tableProcessStatus);
            this.tableUserPermissions = new UserPermissionsDataTable();
            base.Tables.Add(this.tableUserPermissions);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("MessageGroupForwardFlags", new global::System.Data.DataColumn[] {
                        this.tableMessage.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableGroupForwardFlags.MessageIDColumn});
            this.tableGroupForwardFlags.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("GroupGroupForwardFlags", new global::System.Data.DataColumn[] {
                        this.tableGroup.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableGroupForwardFlags.GroupIDColumn});
            this.tableGroupForwardFlags.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("LinkProcessClassLinks", new global::System.Data.DataColumn[] {
                        this.tableLink.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableProcessClassLinks.LinkIDColumn});
            this.tableProcessClassLinks.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("ProcessClassProcessClassLinks", new global::System.Data.DataColumn[] {
                        this.tableProcessClass.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableProcessClassLinks.ProcessClassIDColumn});
            this.tableProcessClassLinks.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("ParamProcessClassParams", new global::System.Data.DataColumn[] {
                        this.tableParam.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableProcessClassParams.ParamIDColumn});
            this.tableProcessClassParams.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("ProcessClassProcessClassParams", new global::System.Data.DataColumn[] {
                        this.tableProcessClass.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableProcessClassParams.ProcessClassIDColumn});
            this.tableProcessClassParams.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("ParamLinkParams", new global::System.Data.DataColumn[] {
                        this.tableParam.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLinkParams.ParamIDColumn});
            this.tableLinkParams.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("LinkLinkParams", new global::System.Data.DataColumn[] {
                        this.tableLink.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLinkParams.LinkIDColumn});
            this.tableLinkParams.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("GroupGroupProcessClasses", new global::System.Data.DataColumn[] {
                        this.tableGroup.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableGroupProcessClasses.GroupIDColumn});
            this.tableGroupProcessClasses.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("ProcessClassGroupProcessClasses", new global::System.Data.DataColumn[] {
                        this.tableProcessClass.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableGroupProcessClasses.ProcessClassIDColumn});
            this.tableGroupProcessClasses.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("ProcessStatusGroupStatusProcesses", new global::System.Data.DataColumn[] {
                        this.tableProcessStatus.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableGroupStatusProcesses.ProcessIDColumn});
            this.tableGroupStatusProcesses.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("GroupStatusGroupStatusProcesses", new global::System.Data.DataColumn[] {
                        this.tableGroupStatus.GroupIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableGroupStatusProcesses.GroupIDColumn});
            this.tableGroupStatusProcesses.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("GroupGroupStatus", new global::System.Data.DataColumn[] {
                        this.tableGroup.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableGroupStatus.GroupIDColumn});
            this.tableGroupStatus.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("ProcessProcessStatus", new global::System.Data.DataColumn[] {
                        this.tableProcessClass.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableProcessStatus.ProcessClassIDColumn});
            this.tableProcessStatus.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            this.relationMessageGroupForwardFlags = new global::System.Data.DataRelation("MessageGroupForwardFlags", new global::System.Data.DataColumn[] {
                        this.tableMessage.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableGroupForwardFlags.MessageIDColumn}, false);
            this.Relations.Add(this.relationMessageGroupForwardFlags);
            this.relationGroupGroupForwardFlags = new global::System.Data.DataRelation("GroupGroupForwardFlags", new global::System.Data.DataColumn[] {
                        this.tableGroup.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableGroupForwardFlags.GroupIDColumn}, false);
            this.Relations.Add(this.relationGroupGroupForwardFlags);
            this.relationLinkProcessClassLinks = new global::System.Data.DataRelation("LinkProcessClassLinks", new global::System.Data.DataColumn[] {
                        this.tableLink.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableProcessClassLinks.LinkIDColumn}, false);
            this.Relations.Add(this.relationLinkProcessClassLinks);
            this.relationProcessClassProcessClassLinks = new global::System.Data.DataRelation("ProcessClassProcessClassLinks", new global::System.Data.DataColumn[] {
                        this.tableProcessClass.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableProcessClassLinks.ProcessClassIDColumn}, false);
            this.Relations.Add(this.relationProcessClassProcessClassLinks);
            this.relationParamProcessClassParams = new global::System.Data.DataRelation("ParamProcessClassParams", new global::System.Data.DataColumn[] {
                        this.tableParam.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableProcessClassParams.ParamIDColumn}, false);
            this.Relations.Add(this.relationParamProcessClassParams);
            this.relationProcessClassProcessClassParams = new global::System.Data.DataRelation("ProcessClassProcessClassParams", new global::System.Data.DataColumn[] {
                        this.tableProcessClass.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableProcessClassParams.ProcessClassIDColumn}, false);
            this.Relations.Add(this.relationProcessClassProcessClassParams);
            this.relationParamLinkParams = new global::System.Data.DataRelation("ParamLinkParams", new global::System.Data.DataColumn[] {
                        this.tableParam.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLinkParams.ParamIDColumn}, false);
            this.Relations.Add(this.relationParamLinkParams);
            this.relationLinkLinkParams = new global::System.Data.DataRelation("LinkLinkParams", new global::System.Data.DataColumn[] {
                        this.tableLink.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLinkParams.LinkIDColumn}, false);
            this.Relations.Add(this.relationLinkLinkParams);
            this.relationGroupGroupProcessClasses = new global::System.Data.DataRelation("GroupGroupProcessClasses", new global::System.Data.DataColumn[] {
                        this.tableGroup.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableGroupProcessClasses.GroupIDColumn}, false);
            this.Relations.Add(this.relationGroupGroupProcessClasses);
            this.relationProcessClassGroupProcessClasses = new global::System.Data.DataRelation("ProcessClassGroupProcessClasses", new global::System.Data.DataColumn[] {
                        this.tableProcessClass.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableGroupProcessClasses.ProcessClassIDColumn}, false);
            this.Relations.Add(this.relationProcessClassGroupProcessClasses);
            this.relationProcessStatusGroupStatusProcesses = new global::System.Data.DataRelation("ProcessStatusGroupStatusProcesses", new global::System.Data.DataColumn[] {
                        this.tableProcessStatus.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableGroupStatusProcesses.ProcessIDColumn}, false);
            this.Relations.Add(this.relationProcessStatusGroupStatusProcesses);
            this.relationGroupStatusGroupStatusProcesses = new global::System.Data.DataRelation("GroupStatusGroupStatusProcesses", new global::System.Data.DataColumn[] {
                        this.tableGroupStatus.GroupIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableGroupStatusProcesses.GroupIDColumn}, false);
            this.Relations.Add(this.relationGroupStatusGroupStatusProcesses);
            this.relationGroupGroupStatus = new global::System.Data.DataRelation("GroupGroupStatus", new global::System.Data.DataColumn[] {
                        this.tableGroup.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableGroupStatus.GroupIDColumn}, false);
            this.Relations.Add(this.relationGroupGroupStatus);
            this.relationProcessProcessStatus = new global::System.Data.DataRelation("ProcessProcessStatus", new global::System.Data.DataColumn[] {
                        this.tableProcessClass.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableProcessStatus.ProcessClassIDColumn}, false);
            this.Relations.Add(this.relationProcessProcessStatus);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProcessClass() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLink() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGroup() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMessage() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGroupForwardFlags() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeParam() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProcessClassLinks() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProcessClassParams() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLinkParams() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGroupProcessClasses() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGroupStatusProcesses() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGroupStatus() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProcessStatus() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUserPermissions() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            MultiXTpmDB ds = new MultiXTpmDB();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ProcessClassRowChangeEventHandler(object sender, ProcessClassRowChangeEvent e);
        
        public delegate void LinkRowChangeEventHandler(object sender, LinkRowChangeEvent e);
        
        public delegate void GroupRowChangeEventHandler(object sender, GroupRowChangeEvent e);
        
        public delegate void MessageRowChangeEventHandler(object sender, MessageRowChangeEvent e);
        
        public delegate void GroupForwardFlagsRowChangeEventHandler(object sender, GroupForwardFlagsRowChangeEvent e);
        
        public delegate void ParamRowChangeEventHandler(object sender, ParamRowChangeEvent e);
        
        public delegate void ProcessClassLinksRowChangeEventHandler(object sender, ProcessClassLinksRowChangeEvent e);
        
        public delegate void ProcessClassParamsRowChangeEventHandler(object sender, ProcessClassParamsRowChangeEvent e);
        
        public delegate void LinkParamsRowChangeEventHandler(object sender, LinkParamsRowChangeEvent e);
        
        public delegate void GroupProcessClassesRowChangeEventHandler(object sender, GroupProcessClassesRowChangeEvent e);
        
        public delegate void GroupStatusProcessesRowChangeEventHandler(object sender, GroupStatusProcessesRowChangeEvent e);
        
        public delegate void GroupStatusRowChangeEventHandler(object sender, GroupStatusRowChangeEvent e);
        
        public delegate void ProcessStatusRowChangeEventHandler(object sender, ProcessStatusRowChangeEvent e);
        
        public delegate void UserPermissionsRowChangeEventHandler(object sender, UserPermissionsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProcessClassDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnPasswordToSend;
            
            private global::System.Data.DataColumn columnExpectedPassword;
            
            private global::System.Data.DataColumn columnExecCmd;
            
            private global::System.Data.DataColumn columnClassName;
            
            private global::System.Data.DataColumn columnDebugLevel;
            
            private global::System.Data.DataColumn columnDefaultSendTimeout;
            
            private global::System.Data.DataColumn columnExecParams;
            
            private global::System.Data.DataColumn columnMaxQueueSize;
            
            private global::System.Data.DataColumn columnMaxSessions;
            
            private global::System.Data.DataColumn columnMaxRecoveryQueueSize;
            
            private global::System.Data.DataColumn columnAutoStart;
            
            private global::System.Data.DataColumn columnMinInstances;
            
            private global::System.Data.DataColumn columnMaxInstances;
            
            private global::System.Data.DataColumn columnStartProcessDelay;
            
            private global::System.Data.DataColumn columnInactivityTimer;
            
            private global::System.Data.DataColumn columnAdditionalConfigTextFile;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassDataTable() {
                this.TableName = "ProcessClass";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProcessClassDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProcessClassDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PasswordToSendColumn {
                get {
                    return this.columnPasswordToSend;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpectedPasswordColumn {
                get {
                    return this.columnExpectedPassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExecCmdColumn {
                get {
                    return this.columnExecCmd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClassNameColumn {
                get {
                    return this.columnClassName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DebugLevelColumn {
                get {
                    return this.columnDebugLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefaultSendTimeoutColumn {
                get {
                    return this.columnDefaultSendTimeout;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExecParamsColumn {
                get {
                    return this.columnExecParams;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxQueueSizeColumn {
                get {
                    return this.columnMaxQueueSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxSessionsColumn {
                get {
                    return this.columnMaxSessions;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxRecoveryQueueSizeColumn {
                get {
                    return this.columnMaxRecoveryQueueSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AutoStartColumn {
                get {
                    return this.columnAutoStart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinInstancesColumn {
                get {
                    return this.columnMinInstances;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxInstancesColumn {
                get {
                    return this.columnMaxInstances;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartProcessDelayColumn {
                get {
                    return this.columnStartProcessDelay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InactivityTimerColumn {
                get {
                    return this.columnInactivityTimer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdditionalConfigTextFileColumn {
                get {
                    return this.columnAdditionalConfigTextFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassRow this[int index] {
                get {
                    return ((ProcessClassRow)(this.Rows[index]));
                }
            }
            
            public event ProcessClassRowChangeEventHandler ProcessClassRowChanging;
            
            public event ProcessClassRowChangeEventHandler ProcessClassRowChanged;
            
            public event ProcessClassRowChangeEventHandler ProcessClassRowDeleting;
            
            public event ProcessClassRowChangeEventHandler ProcessClassRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProcessClassRow(ProcessClassRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassRow AddProcessClassRow(
                        int ID, 
                        string Description, 
                        string PasswordToSend, 
                        string ExpectedPassword, 
                        string ExecCmd, 
                        string ClassName, 
                        int DebugLevel, 
                        int DefaultSendTimeout, 
                        string ExecParams, 
                        int MaxQueueSize, 
                        int MaxSessions, 
                        int MaxRecoveryQueueSize, 
                        bool AutoStart, 
                        int MinInstances, 
                        int MaxInstances, 
                        int StartProcessDelay, 
                        int InactivityTimer, 
                        string AdditionalConfigTextFile) {
                ProcessClassRow rowProcessClassRow = ((ProcessClassRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        Description,
                        PasswordToSend,
                        ExpectedPassword,
                        ExecCmd,
                        ClassName,
                        DebugLevel,
                        DefaultSendTimeout,
                        ExecParams,
                        MaxQueueSize,
                        MaxSessions,
                        MaxRecoveryQueueSize,
                        AutoStart,
                        MinInstances,
                        MaxInstances,
                        StartProcessDelay,
                        InactivityTimer,
                        AdditionalConfigTextFile};
                rowProcessClassRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProcessClassRow);
                return rowProcessClassRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassRow FindByID(int ID) {
                return ((ProcessClassRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProcessClassDataTable cln = ((ProcessClassDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProcessClassDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnDescription = base.Columns["Description"];
                this.columnPasswordToSend = base.Columns["PasswordToSend"];
                this.columnExpectedPassword = base.Columns["ExpectedPassword"];
                this.columnExecCmd = base.Columns["ExecCmd"];
                this.columnClassName = base.Columns["ClassName"];
                this.columnDebugLevel = base.Columns["DebugLevel"];
                this.columnDefaultSendTimeout = base.Columns["DefaultSendTimeout"];
                this.columnExecParams = base.Columns["ExecParams"];
                this.columnMaxQueueSize = base.Columns["MaxQueueSize"];
                this.columnMaxSessions = base.Columns["MaxSessions"];
                this.columnMaxRecoveryQueueSize = base.Columns["MaxRecoveryQueueSize"];
                this.columnAutoStart = base.Columns["AutoStart"];
                this.columnMinInstances = base.Columns["MinInstances"];
                this.columnMaxInstances = base.Columns["MaxInstances"];
                this.columnStartProcessDelay = base.Columns["StartProcessDelay"];
                this.columnInactivityTimer = base.Columns["InactivityTimer"];
                this.columnAdditionalConfigTextFile = base.Columns["AdditionalConfigTextFile"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnPasswordToSend = new global::System.Data.DataColumn("PasswordToSend", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPasswordToSend);
                this.columnExpectedPassword = new global::System.Data.DataColumn("ExpectedPassword", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpectedPassword);
                this.columnExecCmd = new global::System.Data.DataColumn("ExecCmd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExecCmd);
                this.columnClassName = new global::System.Data.DataColumn("ClassName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClassName);
                this.columnDebugLevel = new global::System.Data.DataColumn("DebugLevel", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDebugLevel);
                this.columnDefaultSendTimeout = new global::System.Data.DataColumn("DefaultSendTimeout", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultSendTimeout);
                this.columnExecParams = new global::System.Data.DataColumn("ExecParams", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExecParams);
                this.columnMaxQueueSize = new global::System.Data.DataColumn("MaxQueueSize", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxQueueSize);
                this.columnMaxSessions = new global::System.Data.DataColumn("MaxSessions", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxSessions);
                this.columnMaxRecoveryQueueSize = new global::System.Data.DataColumn("MaxRecoveryQueueSize", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxRecoveryQueueSize);
                this.columnAutoStart = new global::System.Data.DataColumn("AutoStart", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAutoStart);
                this.columnMinInstances = new global::System.Data.DataColumn("MinInstances", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinInstances);
                this.columnMaxInstances = new global::System.Data.DataColumn("MaxInstances", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxInstances);
                this.columnStartProcessDelay = new global::System.Data.DataColumn("StartProcessDelay", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartProcessDelay);
                this.columnInactivityTimer = new global::System.Data.DataColumn("InactivityTimer", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInactivityTimer);
                this.columnAdditionalConfigTextFile = new global::System.Data.DataColumn("AdditionalConfigTextFile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdditionalConfigTextFile);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("MultiXTpmDBKey1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnID.DefaultValue = ((int)(0));
                this.columnDebugLevel.AllowDBNull = false;
                this.columnDebugLevel.DefaultValue = ((int)(0));
                this.columnDefaultSendTimeout.AllowDBNull = false;
                this.columnDefaultSendTimeout.DefaultValue = ((int)(0));
                this.columnMaxQueueSize.AllowDBNull = false;
                this.columnMaxQueueSize.DefaultValue = ((int)(0));
                this.columnMaxSessions.AllowDBNull = false;
                this.columnMaxSessions.DefaultValue = ((int)(0));
                this.columnMaxRecoveryQueueSize.AllowDBNull = false;
                this.columnMaxRecoveryQueueSize.DefaultValue = ((int)(0));
                this.columnAutoStart.AllowDBNull = false;
                this.columnAutoStart.DefaultValue = ((bool)(false));
                this.columnMinInstances.AllowDBNull = false;
                this.columnMinInstances.DefaultValue = ((int)(0));
                this.columnMaxInstances.AllowDBNull = false;
                this.columnMaxInstances.DefaultValue = ((int)(0));
                this.columnStartProcessDelay.AllowDBNull = false;
                this.columnStartProcessDelay.DefaultValue = ((int)(0));
                this.columnInactivityTimer.AllowDBNull = false;
                this.columnInactivityTimer.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassRow NewProcessClassRow() {
                return ((ProcessClassRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProcessClassRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProcessClassRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProcessClassRowChanged != null)) {
                    this.ProcessClassRowChanged(this, new ProcessClassRowChangeEvent(((ProcessClassRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProcessClassRowChanging != null)) {
                    this.ProcessClassRowChanging(this, new ProcessClassRowChangeEvent(((ProcessClassRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProcessClassRowDeleted != null)) {
                    this.ProcessClassRowDeleted(this, new ProcessClassRowChangeEvent(((ProcessClassRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProcessClassRowDeleting != null)) {
                    this.ProcessClassRowDeleting(this, new ProcessClassRowChangeEvent(((ProcessClassRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProcessClassRow(ProcessClassRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MultiXTpmDB ds = new MultiXTpmDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProcessClassDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LinkDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnLinkType;
            
            private global::System.Data.DataColumn columnOpenMode;
            
            private global::System.Data.DataColumn columnRaw;
            
            private global::System.Data.DataColumn columnLocalAddress;
            
            private global::System.Data.DataColumn columnLocalPort;
            
            private global::System.Data.DataColumn columnRemoteAddress;
            
            private global::System.Data.DataColumn columnRemotePort;
            
            private global::System.Data.DataColumn columnSSLAPI;
            
            private global::System.Data.DataColumn columnSSLClientAuthenticationRequired;
            
            private global::System.Data.DataColumn columnSSLServerAuthenticationRequired;
            
            private global::System.Data.DataColumn columnSSLServerNameVerificationRequired;
            
            private global::System.Data.DataColumn columnSSLTrustStoreFile;
            
            private global::System.Data.DataColumn columnSSLTrustStoreDirectory;
            
            private global::System.Data.DataColumn columnSSLCertificateFile;
            
            private global::System.Data.DataColumn columnSSLPrivateKeyFile;
            
            private global::System.Data.DataColumn columnSSLPrivateKeyPassword;
            
            private global::System.Data.DataColumn columnSSLRSAPrivateKeyFile;
            
            private global::System.Data.DataColumn columnSSLDHFile;
            
            private global::System.Data.DataColumn columnSSLPrivateKeyPasswordFile;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkDataTable() {
                this.TableName = "Link";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LinkDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkTypeColumn {
                get {
                    return this.columnLinkType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OpenModeColumn {
                get {
                    return this.columnOpenMode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RawColumn {
                get {
                    return this.columnRaw;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalAddressColumn {
                get {
                    return this.columnLocalAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalPortColumn {
                get {
                    return this.columnLocalPort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemoteAddressColumn {
                get {
                    return this.columnRemoteAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemotePortColumn {
                get {
                    return this.columnRemotePort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SSLAPIColumn {
                get {
                    return this.columnSSLAPI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SSLClientAuthenticationRequiredColumn {
                get {
                    return this.columnSSLClientAuthenticationRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SSLServerAuthenticationRequiredColumn {
                get {
                    return this.columnSSLServerAuthenticationRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SSLServerNameVerificationRequiredColumn {
                get {
                    return this.columnSSLServerNameVerificationRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SSLTrustStoreFileColumn {
                get {
                    return this.columnSSLTrustStoreFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SSLTrustStoreDirectoryColumn {
                get {
                    return this.columnSSLTrustStoreDirectory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SSLCertificateFileColumn {
                get {
                    return this.columnSSLCertificateFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SSLPrivateKeyFileColumn {
                get {
                    return this.columnSSLPrivateKeyFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SSLPrivateKeyPasswordColumn {
                get {
                    return this.columnSSLPrivateKeyPassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SSLRSAPrivateKeyFileColumn {
                get {
                    return this.columnSSLRSAPrivateKeyFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SSLDHFileColumn {
                get {
                    return this.columnSSLDHFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SSLPrivateKeyPasswordFileColumn {
                get {
                    return this.columnSSLPrivateKeyPasswordFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkRow this[int index] {
                get {
                    return ((LinkRow)(this.Rows[index]));
                }
            }
            
            public event LinkRowChangeEventHandler LinkRowChanging;
            
            public event LinkRowChangeEventHandler LinkRowChanged;
            
            public event LinkRowChangeEventHandler LinkRowDeleting;
            
            public event LinkRowChangeEventHandler LinkRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLinkRow(LinkRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkRow AddLinkRow(
                        int ID, 
                        string Description, 
                        int LinkType, 
                        int OpenMode, 
                        bool Raw, 
                        string LocalAddress, 
                        string LocalPort, 
                        string RemoteAddress, 
                        string RemotePort, 
                        string SSLAPI, 
                        bool SSLClientAuthenticationRequired, 
                        bool SSLServerAuthenticationRequired, 
                        bool SSLServerNameVerificationRequired, 
                        string SSLTrustStoreFile, 
                        string SSLTrustStoreDirectory, 
                        string SSLCertificateFile, 
                        string SSLPrivateKeyFile, 
                        string SSLPrivateKeyPassword, 
                        string SSLRSAPrivateKeyFile, 
                        string SSLDHFile, 
                        string SSLPrivateKeyPasswordFile) {
                LinkRow rowLinkRow = ((LinkRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        Description,
                        LinkType,
                        OpenMode,
                        Raw,
                        LocalAddress,
                        LocalPort,
                        RemoteAddress,
                        RemotePort,
                        SSLAPI,
                        SSLClientAuthenticationRequired,
                        SSLServerAuthenticationRequired,
                        SSLServerNameVerificationRequired,
                        SSLTrustStoreFile,
                        SSLTrustStoreDirectory,
                        SSLCertificateFile,
                        SSLPrivateKeyFile,
                        SSLPrivateKeyPassword,
                        SSLRSAPrivateKeyFile,
                        SSLDHFile,
                        SSLPrivateKeyPasswordFile};
                rowLinkRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLinkRow);
                return rowLinkRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkRow FindByID(int ID) {
                return ((LinkRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LinkDataTable cln = ((LinkDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LinkDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnDescription = base.Columns["Description"];
                this.columnLinkType = base.Columns["LinkType"];
                this.columnOpenMode = base.Columns["OpenMode"];
                this.columnRaw = base.Columns["Raw"];
                this.columnLocalAddress = base.Columns["LocalAddress"];
                this.columnLocalPort = base.Columns["LocalPort"];
                this.columnRemoteAddress = base.Columns["RemoteAddress"];
                this.columnRemotePort = base.Columns["RemotePort"];
                this.columnSSLAPI = base.Columns["SSLAPI"];
                this.columnSSLClientAuthenticationRequired = base.Columns["SSLClientAuthenticationRequired"];
                this.columnSSLServerAuthenticationRequired = base.Columns["SSLServerAuthenticationRequired"];
                this.columnSSLServerNameVerificationRequired = base.Columns["SSLServerNameVerificationRequired"];
                this.columnSSLTrustStoreFile = base.Columns["SSLTrustStoreFile"];
                this.columnSSLTrustStoreDirectory = base.Columns["SSLTrustStoreDirectory"];
                this.columnSSLCertificateFile = base.Columns["SSLCertificateFile"];
                this.columnSSLPrivateKeyFile = base.Columns["SSLPrivateKeyFile"];
                this.columnSSLPrivateKeyPassword = base.Columns["SSLPrivateKeyPassword"];
                this.columnSSLRSAPrivateKeyFile = base.Columns["SSLRSAPrivateKeyFile"];
                this.columnSSLDHFile = base.Columns["SSLDHFile"];
                this.columnSSLPrivateKeyPasswordFile = base.Columns["SSLPrivateKeyPasswordFile"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnLinkType = new global::System.Data.DataColumn("LinkType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkType);
                this.columnOpenMode = new global::System.Data.DataColumn("OpenMode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOpenMode);
                this.columnRaw = new global::System.Data.DataColumn("Raw", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRaw);
                this.columnLocalAddress = new global::System.Data.DataColumn("LocalAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalAddress);
                this.columnLocalPort = new global::System.Data.DataColumn("LocalPort", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalPort);
                this.columnRemoteAddress = new global::System.Data.DataColumn("RemoteAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemoteAddress);
                this.columnRemotePort = new global::System.Data.DataColumn("RemotePort", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemotePort);
                this.columnSSLAPI = new global::System.Data.DataColumn("SSLAPI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSSLAPI);
                this.columnSSLClientAuthenticationRequired = new global::System.Data.DataColumn("SSLClientAuthenticationRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSSLClientAuthenticationRequired);
                this.columnSSLServerAuthenticationRequired = new global::System.Data.DataColumn("SSLServerAuthenticationRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSSLServerAuthenticationRequired);
                this.columnSSLServerNameVerificationRequired = new global::System.Data.DataColumn("SSLServerNameVerificationRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSSLServerNameVerificationRequired);
                this.columnSSLTrustStoreFile = new global::System.Data.DataColumn("SSLTrustStoreFile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSSLTrustStoreFile);
                this.columnSSLTrustStoreDirectory = new global::System.Data.DataColumn("SSLTrustStoreDirectory", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSSLTrustStoreDirectory);
                this.columnSSLCertificateFile = new global::System.Data.DataColumn("SSLCertificateFile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSSLCertificateFile);
                this.columnSSLPrivateKeyFile = new global::System.Data.DataColumn("SSLPrivateKeyFile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSSLPrivateKeyFile);
                this.columnSSLPrivateKeyPassword = new global::System.Data.DataColumn("SSLPrivateKeyPassword", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSSLPrivateKeyPassword);
                this.columnSSLRSAPrivateKeyFile = new global::System.Data.DataColumn("SSLRSAPrivateKeyFile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSSLRSAPrivateKeyFile);
                this.columnSSLDHFile = new global::System.Data.DataColumn("SSLDHFile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSSLDHFile);
                this.columnSSLPrivateKeyPasswordFile = new global::System.Data.DataColumn("SSLPrivateKeyPasswordFile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSSLPrivateKeyPasswordFile);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("MultiXTpmDBKey2", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnID.DefaultValue = ((int)(0));
                this.columnLinkType.AllowDBNull = false;
                this.columnLinkType.DefaultValue = ((int)(0));
                this.columnOpenMode.AllowDBNull = false;
                this.columnOpenMode.DefaultValue = ((int)(0));
                this.columnRaw.AllowDBNull = false;
                this.columnRaw.DefaultValue = ((bool)(false));
                this.columnSSLAPI.AllowDBNull = false;
                this.columnSSLAPI.DefaultValue = ((string)("NoSSLAPI"));
                this.columnSSLClientAuthenticationRequired.AllowDBNull = false;
                this.columnSSLClientAuthenticationRequired.DefaultValue = ((bool)(false));
                this.columnSSLServerAuthenticationRequired.AllowDBNull = false;
                this.columnSSLServerAuthenticationRequired.DefaultValue = ((bool)(false));
                this.columnSSLServerNameVerificationRequired.AllowDBNull = false;
                this.columnSSLServerNameVerificationRequired.DefaultValue = ((bool)(false));
                this.columnSSLTrustStoreFile.AllowDBNull = false;
                this.columnSSLTrustStoreFile.DefaultValue = ((string)("cacerts.pem"));
                this.columnSSLTrustStoreDirectory.AllowDBNull = false;
                this.columnSSLTrustStoreDirectory.DefaultValue = ((string)(""));
                this.columnSSLCertificateFile.AllowDBNull = false;
                this.columnSSLCertificateFile.DefaultValue = ((string)("LocalMultiXTpmServer.pem"));
                this.columnSSLPrivateKeyFile.AllowDBNull = false;
                this.columnSSLPrivateKeyFile.DefaultValue = ((string)("LocalMultiXTpmServer.pem"));
                this.columnSSLPrivateKeyPassword.AllowDBNull = false;
                this.columnSSLPrivateKeyPassword.DefaultValue = ((string)("password"));
                this.columnSSLRSAPrivateKeyFile.AllowDBNull = false;
                this.columnSSLRSAPrivateKeyFile.DefaultValue = ((string)(""));
                this.columnSSLDHFile.AllowDBNull = false;
                this.columnSSLDHFile.DefaultValue = ((string)(""));
                this.columnSSLPrivateKeyPasswordFile.DefaultValue = ((string)(""));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkRow NewLinkRow() {
                return ((LinkRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LinkRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LinkRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LinkRowChanged != null)) {
                    this.LinkRowChanged(this, new LinkRowChangeEvent(((LinkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LinkRowChanging != null)) {
                    this.LinkRowChanging(this, new LinkRowChangeEvent(((LinkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LinkRowDeleted != null)) {
                    this.LinkRowDeleted(this, new LinkRowChangeEvent(((LinkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LinkRowDeleting != null)) {
                    this.LinkRowDeleting(this, new LinkRowChangeEvent(((LinkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLinkRow(LinkRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MultiXTpmDB ds = new MultiXTpmDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LinkDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GroupDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupDataTable() {
                this.TableName = "Group";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GroupDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GroupDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupRow this[int index] {
                get {
                    return ((GroupRow)(this.Rows[index]));
                }
            }
            
            public event GroupRowChangeEventHandler GroupRowChanging;
            
            public event GroupRowChangeEventHandler GroupRowChanged;
            
            public event GroupRowChangeEventHandler GroupRowDeleting;
            
            public event GroupRowChangeEventHandler GroupRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGroupRow(GroupRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupRow AddGroupRow(int ID, string Description) {
                GroupRow rowGroupRow = ((GroupRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        Description};
                rowGroupRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGroupRow);
                return rowGroupRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupRow FindByID(int ID) {
                return ((GroupRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GroupDataTable cln = ((GroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GroupDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("MultiXTpmDBKey3", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnID.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupRow NewGroupRow() {
                return ((GroupRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GroupRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GroupRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GroupRowChanged != null)) {
                    this.GroupRowChanged(this, new GroupRowChangeEvent(((GroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GroupRowChanging != null)) {
                    this.GroupRowChanging(this, new GroupRowChangeEvent(((GroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GroupRowDeleted != null)) {
                    this.GroupRowDeleted(this, new GroupRowChangeEvent(((GroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GroupRowDeleting != null)) {
                    this.GroupRowDeleting(this, new GroupRowChangeEvent(((GroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGroupRow(GroupRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MultiXTpmDB ds = new MultiXTpmDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MessageDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnStateful;
            
            private global::System.Data.DataColumn columnDbProtected;
            
            private global::System.Data.DataColumn columnTimeout;
            
            private global::System.Data.DataColumn columnPriority;
            
            private global::System.Data.DataColumn columnWSSoapAction;
            
            private global::System.Data.DataColumn columnWSDllFile;
            
            private global::System.Data.DataColumn columnWSDllFunction;
            
            private global::System.Data.DataColumn columnWSURL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessageDataTable() {
                this.TableName = "Message";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MessageDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MessageDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatefulColumn {
                get {
                    return this.columnStateful;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DbProtectedColumn {
                get {
                    return this.columnDbProtected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeoutColumn {
                get {
                    return this.columnTimeout;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriorityColumn {
                get {
                    return this.columnPriority;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WSSoapActionColumn {
                get {
                    return this.columnWSSoapAction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WSDllFileColumn {
                get {
                    return this.columnWSDllFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WSDllFunctionColumn {
                get {
                    return this.columnWSDllFunction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WSURLColumn {
                get {
                    return this.columnWSURL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessageRow this[int index] {
                get {
                    return ((MessageRow)(this.Rows[index]));
                }
            }
            
            public event MessageRowChangeEventHandler MessageRowChanging;
            
            public event MessageRowChangeEventHandler MessageRowChanged;
            
            public event MessageRowChangeEventHandler MessageRowDeleting;
            
            public event MessageRowChangeEventHandler MessageRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMessageRow(MessageRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessageRow AddMessageRow(int ID, string Description, bool Stateful, bool DbProtected, int Timeout, int Priority, string WSSoapAction, string WSDllFile, string WSDllFunction, string WSURL) {
                MessageRow rowMessageRow = ((MessageRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        Description,
                        Stateful,
                        DbProtected,
                        Timeout,
                        Priority,
                        WSSoapAction,
                        WSDllFile,
                        WSDllFunction,
                        WSURL};
                rowMessageRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMessageRow);
                return rowMessageRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessageRow FindByID(int ID) {
                return ((MessageRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MessageDataTable cln = ((MessageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MessageDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnDescription = base.Columns["Description"];
                this.columnStateful = base.Columns["Stateful"];
                this.columnDbProtected = base.Columns["DbProtected"];
                this.columnTimeout = base.Columns["Timeout"];
                this.columnPriority = base.Columns["Priority"];
                this.columnWSSoapAction = base.Columns["WSSoapAction"];
                this.columnWSDllFile = base.Columns["WSDllFile"];
                this.columnWSDllFunction = base.Columns["WSDllFunction"];
                this.columnWSURL = base.Columns["WSURL"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnStateful = new global::System.Data.DataColumn("Stateful", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStateful);
                this.columnDbProtected = new global::System.Data.DataColumn("DbProtected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDbProtected);
                this.columnTimeout = new global::System.Data.DataColumn("Timeout", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeout);
                this.columnPriority = new global::System.Data.DataColumn("Priority", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriority);
                this.columnWSSoapAction = new global::System.Data.DataColumn("WSSoapAction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWSSoapAction);
                this.columnWSDllFile = new global::System.Data.DataColumn("WSDllFile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWSDllFile);
                this.columnWSDllFunction = new global::System.Data.DataColumn("WSDllFunction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWSDllFunction);
                this.columnWSURL = new global::System.Data.DataColumn("WSURL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWSURL);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("MultiXTpmDBKey4", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnID.DefaultValue = ((int)(0));
                this.columnStateful.AllowDBNull = false;
                this.columnStateful.DefaultValue = ((bool)(false));
                this.columnDbProtected.AllowDBNull = false;
                this.columnDbProtected.DefaultValue = ((bool)(false));
                this.columnTimeout.AllowDBNull = false;
                this.columnTimeout.DefaultValue = ((int)(0));
                this.columnPriority.AllowDBNull = false;
                this.columnPriority.DefaultValue = ((int)(0));
                this.columnWSSoapAction.AllowDBNull = false;
                this.columnWSSoapAction.DefaultValue = ((string)(""));
                this.columnWSDllFile.AllowDBNull = false;
                this.columnWSDllFile.DefaultValue = ((string)(""));
                this.columnWSDllFunction.AllowDBNull = false;
                this.columnWSDllFunction.DefaultValue = ((string)(""));
                this.columnWSURL.AllowDBNull = false;
                this.columnWSURL.DefaultValue = ((string)(""));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessageRow NewMessageRow() {
                return ((MessageRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MessageRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MessageRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MessageRowChanged != null)) {
                    this.MessageRowChanged(this, new MessageRowChangeEvent(((MessageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MessageRowChanging != null)) {
                    this.MessageRowChanging(this, new MessageRowChangeEvent(((MessageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MessageRowDeleted != null)) {
                    this.MessageRowDeleted(this, new MessageRowChangeEvent(((MessageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MessageRowDeleting != null)) {
                    this.MessageRowDeleting(this, new MessageRowChangeEvent(((MessageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMessageRow(MessageRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MultiXTpmDB ds = new MultiXTpmDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MessageDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GroupForwardFlagsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnGroupID;
            
            private global::System.Data.DataColumn columnMessageID;
            
            private global::System.Data.DataColumn columnResponseRequired;
            
            private global::System.Data.DataColumn columnIgnoreResponse;
            
            private global::System.Data.DataColumn columnForwardToAll;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupForwardFlagsDataTable() {
                this.TableName = "GroupForwardFlags";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GroupForwardFlagsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GroupForwardFlagsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupIDColumn {
                get {
                    return this.columnGroupID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MessageIDColumn {
                get {
                    return this.columnMessageID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResponseRequiredColumn {
                get {
                    return this.columnResponseRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IgnoreResponseColumn {
                get {
                    return this.columnIgnoreResponse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ForwardToAllColumn {
                get {
                    return this.columnForwardToAll;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupForwardFlagsRow this[int index] {
                get {
                    return ((GroupForwardFlagsRow)(this.Rows[index]));
                }
            }
            
            public event GroupForwardFlagsRowChangeEventHandler GroupForwardFlagsRowChanging;
            
            public event GroupForwardFlagsRowChangeEventHandler GroupForwardFlagsRowChanged;
            
            public event GroupForwardFlagsRowChangeEventHandler GroupForwardFlagsRowDeleting;
            
            public event GroupForwardFlagsRowChangeEventHandler GroupForwardFlagsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGroupForwardFlagsRow(GroupForwardFlagsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupForwardFlagsRow AddGroupForwardFlagsRow(GroupRow parentGroupRowByGroupGroupForwardFlags, MessageRow parentMessageRowByMessageGroupForwardFlags, bool ResponseRequired, bool IgnoreResponse, bool ForwardToAll) {
                GroupForwardFlagsRow rowGroupForwardFlagsRow = ((GroupForwardFlagsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        ResponseRequired,
                        IgnoreResponse,
                        ForwardToAll};
                if ((parentGroupRowByGroupGroupForwardFlags != null)) {
                    columnValuesArray[1] = parentGroupRowByGroupGroupForwardFlags[0];
                }
                if ((parentMessageRowByMessageGroupForwardFlags != null)) {
                    columnValuesArray[2] = parentMessageRowByMessageGroupForwardFlags[0];
                }
                rowGroupForwardFlagsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGroupForwardFlagsRow);
                return rowGroupForwardFlagsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupForwardFlagsRow FindByID(int ID) {
                return ((GroupForwardFlagsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GroupForwardFlagsDataTable cln = ((GroupForwardFlagsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GroupForwardFlagsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnGroupID = base.Columns["GroupID"];
                this.columnMessageID = base.Columns["MessageID"];
                this.columnResponseRequired = base.Columns["ResponseRequired"];
                this.columnIgnoreResponse = base.Columns["IgnoreResponse"];
                this.columnForwardToAll = base.Columns["ForwardToAll"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnGroupID = new global::System.Data.DataColumn("GroupID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupID);
                this.columnMessageID = new global::System.Data.DataColumn("MessageID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessageID);
                this.columnResponseRequired = new global::System.Data.DataColumn("ResponseRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResponseRequired);
                this.columnIgnoreResponse = new global::System.Data.DataColumn("IgnoreResponse", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIgnoreResponse);
                this.columnForwardToAll = new global::System.Data.DataColumn("ForwardToAll", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnForwardToAll);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("MultiXTpmDBKey5", new global::System.Data.DataColumn[] {
                                this.columnGroupID,
                                this.columnMessageID}, false));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("MultiXTpmDBKey19", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnGroupID.AllowDBNull = false;
                this.columnGroupID.DefaultValue = ((int)(0));
                this.columnMessageID.AllowDBNull = false;
                this.columnMessageID.DefaultValue = ((int)(0));
                this.columnResponseRequired.AllowDBNull = false;
                this.columnResponseRequired.DefaultValue = ((bool)(false));
                this.columnIgnoreResponse.AllowDBNull = false;
                this.columnIgnoreResponse.DefaultValue = ((bool)(false));
                this.columnForwardToAll.AllowDBNull = false;
                this.columnForwardToAll.DefaultValue = ((bool)(false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupForwardFlagsRow NewGroupForwardFlagsRow() {
                return ((GroupForwardFlagsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GroupForwardFlagsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GroupForwardFlagsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GroupForwardFlagsRowChanged != null)) {
                    this.GroupForwardFlagsRowChanged(this, new GroupForwardFlagsRowChangeEvent(((GroupForwardFlagsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GroupForwardFlagsRowChanging != null)) {
                    this.GroupForwardFlagsRowChanging(this, new GroupForwardFlagsRowChangeEvent(((GroupForwardFlagsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GroupForwardFlagsRowDeleted != null)) {
                    this.GroupForwardFlagsRowDeleted(this, new GroupForwardFlagsRowChangeEvent(((GroupForwardFlagsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GroupForwardFlagsRowDeleting != null)) {
                    this.GroupForwardFlagsRowDeleting(this, new GroupForwardFlagsRowChangeEvent(((GroupForwardFlagsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGroupForwardFlagsRow(GroupForwardFlagsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MultiXTpmDB ds = new MultiXTpmDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GroupForwardFlagsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ParamDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnParamName;
            
            private global::System.Data.DataColumn columnParamValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParamDataTable() {
                this.TableName = "Param";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParamDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ParamDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParamNameColumn {
                get {
                    return this.columnParamName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParamValueColumn {
                get {
                    return this.columnParamValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParamRow this[int index] {
                get {
                    return ((ParamRow)(this.Rows[index]));
                }
            }
            
            public event ParamRowChangeEventHandler ParamRowChanging;
            
            public event ParamRowChangeEventHandler ParamRowChanged;
            
            public event ParamRowChangeEventHandler ParamRowDeleting;
            
            public event ParamRowChangeEventHandler ParamRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddParamRow(ParamRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParamRow AddParamRow(string ParamName, string ParamValue) {
                ParamRow rowParamRow = ((ParamRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ParamName,
                        ParamValue};
                rowParamRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowParamRow);
                return rowParamRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParamRow FindByID(int ID) {
                return ((ParamRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ParamDataTable cln = ((ParamDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ParamDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnParamName = base.Columns["ParamName"];
                this.columnParamValue = base.Columns["ParamValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnParamName = new global::System.Data.DataColumn("ParamName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParamName);
                this.columnParamValue = new global::System.Data.DataColumn("ParamValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParamValue);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("MultiXTpmDBKey6", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParamRow NewParamRow() {
                return ((ParamRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ParamRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ParamRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ParamRowChanged != null)) {
                    this.ParamRowChanged(this, new ParamRowChangeEvent(((ParamRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ParamRowChanging != null)) {
                    this.ParamRowChanging(this, new ParamRowChangeEvent(((ParamRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ParamRowDeleted != null)) {
                    this.ParamRowDeleted(this, new ParamRowChangeEvent(((ParamRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ParamRowDeleting != null)) {
                    this.ParamRowDeleting(this, new ParamRowChangeEvent(((ParamRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveParamRow(ParamRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MultiXTpmDB ds = new MultiXTpmDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ParamDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProcessClassLinksDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnProcessClassID;
            
            private global::System.Data.DataColumn columnLinkID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassLinksDataTable() {
                this.TableName = "ProcessClassLinks";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProcessClassLinksDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProcessClassLinksDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcessClassIDColumn {
                get {
                    return this.columnProcessClassID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkIDColumn {
                get {
                    return this.columnLinkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassLinksRow this[int index] {
                get {
                    return ((ProcessClassLinksRow)(this.Rows[index]));
                }
            }
            
            public event ProcessClassLinksRowChangeEventHandler ProcessClassLinksRowChanging;
            
            public event ProcessClassLinksRowChangeEventHandler ProcessClassLinksRowChanged;
            
            public event ProcessClassLinksRowChangeEventHandler ProcessClassLinksRowDeleting;
            
            public event ProcessClassLinksRowChangeEventHandler ProcessClassLinksRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProcessClassLinksRow(ProcessClassLinksRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassLinksRow AddProcessClassLinksRow(ProcessClassRow parentProcessClassRowByProcessClassProcessClassLinks, LinkRow parentLinkRowByLinkProcessClassLinks) {
                ProcessClassLinksRow rowProcessClassLinksRow = ((ProcessClassLinksRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null};
                if ((parentProcessClassRowByProcessClassProcessClassLinks != null)) {
                    columnValuesArray[1] = parentProcessClassRowByProcessClassProcessClassLinks[0];
                }
                if ((parentLinkRowByLinkProcessClassLinks != null)) {
                    columnValuesArray[2] = parentLinkRowByLinkProcessClassLinks[0];
                }
                rowProcessClassLinksRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProcessClassLinksRow);
                return rowProcessClassLinksRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassLinksRow FindByID(int ID) {
                return ((ProcessClassLinksRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProcessClassLinksDataTable cln = ((ProcessClassLinksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProcessClassLinksDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnProcessClassID = base.Columns["ProcessClassID"];
                this.columnLinkID = base.Columns["LinkID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnProcessClassID = new global::System.Data.DataColumn("ProcessClassID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcessClassID);
                this.columnLinkID = new global::System.Data.DataColumn("LinkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("MultiXTpmDBKey7", new global::System.Data.DataColumn[] {
                                this.columnProcessClassID,
                                this.columnLinkID}, false));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("MultiXTpmDBKey15", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnProcessClassID.AllowDBNull = false;
                this.columnProcessClassID.DefaultValue = ((int)(0));
                this.columnLinkID.AllowDBNull = false;
                this.columnLinkID.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassLinksRow NewProcessClassLinksRow() {
                return ((ProcessClassLinksRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProcessClassLinksRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProcessClassLinksRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProcessClassLinksRowChanged != null)) {
                    this.ProcessClassLinksRowChanged(this, new ProcessClassLinksRowChangeEvent(((ProcessClassLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProcessClassLinksRowChanging != null)) {
                    this.ProcessClassLinksRowChanging(this, new ProcessClassLinksRowChangeEvent(((ProcessClassLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProcessClassLinksRowDeleted != null)) {
                    this.ProcessClassLinksRowDeleted(this, new ProcessClassLinksRowChangeEvent(((ProcessClassLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProcessClassLinksRowDeleting != null)) {
                    this.ProcessClassLinksRowDeleting(this, new ProcessClassLinksRowChangeEvent(((ProcessClassLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProcessClassLinksRow(ProcessClassLinksRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MultiXTpmDB ds = new MultiXTpmDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProcessClassLinksDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProcessClassParamsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnProcessClassID;
            
            private global::System.Data.DataColumn columnParamID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassParamsDataTable() {
                this.TableName = "ProcessClassParams";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProcessClassParamsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProcessClassParamsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcessClassIDColumn {
                get {
                    return this.columnProcessClassID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParamIDColumn {
                get {
                    return this.columnParamID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassParamsRow this[int index] {
                get {
                    return ((ProcessClassParamsRow)(this.Rows[index]));
                }
            }
            
            public event ProcessClassParamsRowChangeEventHandler ProcessClassParamsRowChanging;
            
            public event ProcessClassParamsRowChangeEventHandler ProcessClassParamsRowChanged;
            
            public event ProcessClassParamsRowChangeEventHandler ProcessClassParamsRowDeleting;
            
            public event ProcessClassParamsRowChangeEventHandler ProcessClassParamsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProcessClassParamsRow(ProcessClassParamsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassParamsRow AddProcessClassParamsRow(ProcessClassRow parentProcessClassRowByProcessClassProcessClassParams, ParamRow parentParamRowByParamProcessClassParams) {
                ProcessClassParamsRow rowProcessClassParamsRow = ((ProcessClassParamsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null};
                if ((parentProcessClassRowByProcessClassProcessClassParams != null)) {
                    columnValuesArray[1] = parentProcessClassRowByProcessClassProcessClassParams[0];
                }
                if ((parentParamRowByParamProcessClassParams != null)) {
                    columnValuesArray[2] = parentParamRowByParamProcessClassParams[0];
                }
                rowProcessClassParamsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProcessClassParamsRow);
                return rowProcessClassParamsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassParamsRow FindByID(int ID) {
                return ((ProcessClassParamsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProcessClassParamsDataTable cln = ((ProcessClassParamsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProcessClassParamsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnProcessClassID = base.Columns["ProcessClassID"];
                this.columnParamID = base.Columns["ParamID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnProcessClassID = new global::System.Data.DataColumn("ProcessClassID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcessClassID);
                this.columnParamID = new global::System.Data.DataColumn("ParamID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParamID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("MultiXTpmDBKey8", new global::System.Data.DataColumn[] {
                                this.columnProcessClassID,
                                this.columnParamID}, false));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("MultiXTpmDBKey16", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnProcessClassID.AllowDBNull = false;
                this.columnProcessClassID.DefaultValue = ((int)(0));
                this.columnParamID.AllowDBNull = false;
                this.columnParamID.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassParamsRow NewProcessClassParamsRow() {
                return ((ProcessClassParamsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProcessClassParamsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProcessClassParamsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProcessClassParamsRowChanged != null)) {
                    this.ProcessClassParamsRowChanged(this, new ProcessClassParamsRowChangeEvent(((ProcessClassParamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProcessClassParamsRowChanging != null)) {
                    this.ProcessClassParamsRowChanging(this, new ProcessClassParamsRowChangeEvent(((ProcessClassParamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProcessClassParamsRowDeleted != null)) {
                    this.ProcessClassParamsRowDeleted(this, new ProcessClassParamsRowChangeEvent(((ProcessClassParamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProcessClassParamsRowDeleting != null)) {
                    this.ProcessClassParamsRowDeleting(this, new ProcessClassParamsRowChangeEvent(((ProcessClassParamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProcessClassParamsRow(ProcessClassParamsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MultiXTpmDB ds = new MultiXTpmDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProcessClassParamsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LinkParamsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnLinkID;
            
            private global::System.Data.DataColumn columnParamID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkParamsDataTable() {
                this.TableName = "LinkParams";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkParamsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LinkParamsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkIDColumn {
                get {
                    return this.columnLinkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParamIDColumn {
                get {
                    return this.columnParamID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkParamsRow this[int index] {
                get {
                    return ((LinkParamsRow)(this.Rows[index]));
                }
            }
            
            public event LinkParamsRowChangeEventHandler LinkParamsRowChanging;
            
            public event LinkParamsRowChangeEventHandler LinkParamsRowChanged;
            
            public event LinkParamsRowChangeEventHandler LinkParamsRowDeleting;
            
            public event LinkParamsRowChangeEventHandler LinkParamsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLinkParamsRow(LinkParamsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkParamsRow AddLinkParamsRow(LinkRow parentLinkRowByLinkLinkParams, ParamRow parentParamRowByParamLinkParams) {
                LinkParamsRow rowLinkParamsRow = ((LinkParamsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null};
                if ((parentLinkRowByLinkLinkParams != null)) {
                    columnValuesArray[1] = parentLinkRowByLinkLinkParams[0];
                }
                if ((parentParamRowByParamLinkParams != null)) {
                    columnValuesArray[2] = parentParamRowByParamLinkParams[0];
                }
                rowLinkParamsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLinkParamsRow);
                return rowLinkParamsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkParamsRow FindByID(int ID) {
                return ((LinkParamsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LinkParamsDataTable cln = ((LinkParamsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LinkParamsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnLinkID = base.Columns["LinkID"];
                this.columnParamID = base.Columns["ParamID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnLinkID = new global::System.Data.DataColumn("LinkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkID);
                this.columnParamID = new global::System.Data.DataColumn("ParamID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParamID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("MultiXTpmDBKey9", new global::System.Data.DataColumn[] {
                                this.columnLinkID,
                                this.columnParamID}, false));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("MultiXTpmDBKey14", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnLinkID.AllowDBNull = false;
                this.columnLinkID.DefaultValue = ((int)(0));
                this.columnParamID.AllowDBNull = false;
                this.columnParamID.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkParamsRow NewLinkParamsRow() {
                return ((LinkParamsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LinkParamsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LinkParamsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LinkParamsRowChanged != null)) {
                    this.LinkParamsRowChanged(this, new LinkParamsRowChangeEvent(((LinkParamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LinkParamsRowChanging != null)) {
                    this.LinkParamsRowChanging(this, new LinkParamsRowChangeEvent(((LinkParamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LinkParamsRowDeleted != null)) {
                    this.LinkParamsRowDeleted(this, new LinkParamsRowChangeEvent(((LinkParamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LinkParamsRowDeleting != null)) {
                    this.LinkParamsRowDeleting(this, new LinkParamsRowChangeEvent(((LinkParamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLinkParamsRow(LinkParamsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MultiXTpmDB ds = new MultiXTpmDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LinkParamsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GroupProcessClassesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnGroupID;
            
            private global::System.Data.DataColumn columnProcessClassID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupProcessClassesDataTable() {
                this.TableName = "GroupProcessClasses";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GroupProcessClassesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GroupProcessClassesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupIDColumn {
                get {
                    return this.columnGroupID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcessClassIDColumn {
                get {
                    return this.columnProcessClassID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupProcessClassesRow this[int index] {
                get {
                    return ((GroupProcessClassesRow)(this.Rows[index]));
                }
            }
            
            public event GroupProcessClassesRowChangeEventHandler GroupProcessClassesRowChanging;
            
            public event GroupProcessClassesRowChangeEventHandler GroupProcessClassesRowChanged;
            
            public event GroupProcessClassesRowChangeEventHandler GroupProcessClassesRowDeleting;
            
            public event GroupProcessClassesRowChangeEventHandler GroupProcessClassesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGroupProcessClassesRow(GroupProcessClassesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupProcessClassesRow AddGroupProcessClassesRow(GroupRow parentGroupRowByGroupGroupProcessClasses, ProcessClassRow parentProcessClassRowByProcessClassGroupProcessClasses) {
                GroupProcessClassesRow rowGroupProcessClassesRow = ((GroupProcessClassesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null};
                if ((parentGroupRowByGroupGroupProcessClasses != null)) {
                    columnValuesArray[1] = parentGroupRowByGroupGroupProcessClasses[0];
                }
                if ((parentProcessClassRowByProcessClassGroupProcessClasses != null)) {
                    columnValuesArray[2] = parentProcessClassRowByProcessClassGroupProcessClasses[0];
                }
                rowGroupProcessClassesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGroupProcessClassesRow);
                return rowGroupProcessClassesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupProcessClassesRow FindByID(int ID) {
                return ((GroupProcessClassesRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GroupProcessClassesDataTable cln = ((GroupProcessClassesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GroupProcessClassesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnGroupID = base.Columns["GroupID"];
                this.columnProcessClassID = base.Columns["ProcessClassID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnGroupID = new global::System.Data.DataColumn("GroupID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupID);
                this.columnProcessClassID = new global::System.Data.DataColumn("ProcessClassID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcessClassID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("MultiXTpmDBKey10", new global::System.Data.DataColumn[] {
                                this.columnGroupID,
                                this.columnProcessClassID}, false));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("MultiXTpmDBKey17", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnGroupID.AllowDBNull = false;
                this.columnGroupID.DefaultValue = ((int)(0));
                this.columnProcessClassID.AllowDBNull = false;
                this.columnProcessClassID.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupProcessClassesRow NewGroupProcessClassesRow() {
                return ((GroupProcessClassesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GroupProcessClassesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GroupProcessClassesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GroupProcessClassesRowChanged != null)) {
                    this.GroupProcessClassesRowChanged(this, new GroupProcessClassesRowChangeEvent(((GroupProcessClassesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GroupProcessClassesRowChanging != null)) {
                    this.GroupProcessClassesRowChanging(this, new GroupProcessClassesRowChangeEvent(((GroupProcessClassesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GroupProcessClassesRowDeleted != null)) {
                    this.GroupProcessClassesRowDeleted(this, new GroupProcessClassesRowChangeEvent(((GroupProcessClassesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GroupProcessClassesRowDeleting != null)) {
                    this.GroupProcessClassesRowDeleting(this, new GroupProcessClassesRowChangeEvent(((GroupProcessClassesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGroupProcessClassesRow(GroupProcessClassesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MultiXTpmDB ds = new MultiXTpmDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GroupProcessClassesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GroupStatusProcessesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnGroupID;
            
            private global::System.Data.DataColumn columnProcessID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupStatusProcessesDataTable() {
                this.TableName = "GroupStatusProcesses";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GroupStatusProcessesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GroupStatusProcessesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupIDColumn {
                get {
                    return this.columnGroupID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcessIDColumn {
                get {
                    return this.columnProcessID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupStatusProcessesRow this[int index] {
                get {
                    return ((GroupStatusProcessesRow)(this.Rows[index]));
                }
            }
            
            public event GroupStatusProcessesRowChangeEventHandler GroupStatusProcessesRowChanging;
            
            public event GroupStatusProcessesRowChangeEventHandler GroupStatusProcessesRowChanged;
            
            public event GroupStatusProcessesRowChangeEventHandler GroupStatusProcessesRowDeleting;
            
            public event GroupStatusProcessesRowChangeEventHandler GroupStatusProcessesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGroupStatusProcessesRow(GroupStatusProcessesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupStatusProcessesRow AddGroupStatusProcessesRow(GroupStatusRow parentGroupStatusRowByGroupStatusGroupStatusProcesses, ProcessStatusRow parentProcessStatusRowByProcessStatusGroupStatusProcesses) {
                GroupStatusProcessesRow rowGroupStatusProcessesRow = ((GroupStatusProcessesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null};
                if ((parentGroupStatusRowByGroupStatusGroupStatusProcesses != null)) {
                    columnValuesArray[1] = parentGroupStatusRowByGroupStatusGroupStatusProcesses[0];
                }
                if ((parentProcessStatusRowByProcessStatusGroupStatusProcesses != null)) {
                    columnValuesArray[2] = parentProcessStatusRowByProcessStatusGroupStatusProcesses[0];
                }
                rowGroupStatusProcessesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGroupStatusProcessesRow);
                return rowGroupStatusProcessesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupStatusProcessesRow FindByID(int ID) {
                return ((GroupStatusProcessesRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GroupStatusProcessesDataTable cln = ((GroupStatusProcessesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GroupStatusProcessesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnGroupID = base.Columns["GroupID"];
                this.columnProcessID = base.Columns["ProcessID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnGroupID = new global::System.Data.DataColumn("GroupID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupID);
                this.columnProcessID = new global::System.Data.DataColumn("ProcessID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcessID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("MultiXTpmDBKey13", new global::System.Data.DataColumn[] {
                                this.columnGroupID,
                                this.columnProcessID}, false));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("MultiXTpmDBKey18", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnGroupID.AllowDBNull = false;
                this.columnGroupID.DefaultValue = ((int)(0));
                this.columnProcessID.AllowDBNull = false;
                this.columnProcessID.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupStatusProcessesRow NewGroupStatusProcessesRow() {
                return ((GroupStatusProcessesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GroupStatusProcessesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GroupStatusProcessesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GroupStatusProcessesRowChanged != null)) {
                    this.GroupStatusProcessesRowChanged(this, new GroupStatusProcessesRowChangeEvent(((GroupStatusProcessesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GroupStatusProcessesRowChanging != null)) {
                    this.GroupStatusProcessesRowChanging(this, new GroupStatusProcessesRowChangeEvent(((GroupStatusProcessesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GroupStatusProcessesRowDeleted != null)) {
                    this.GroupStatusProcessesRowDeleted(this, new GroupStatusProcessesRowChangeEvent(((GroupStatusProcessesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GroupStatusProcessesRowDeleting != null)) {
                    this.GroupStatusProcessesRowDeleting(this, new GroupStatusProcessesRowChangeEvent(((GroupStatusProcessesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGroupStatusProcessesRow(GroupStatusProcessesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MultiXTpmDB ds = new MultiXTpmDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GroupStatusProcessesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GroupStatusDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnGroupID;
            
            private global::System.Data.DataColumn columnSessionsCount;
            
            private global::System.Data.DataColumn columnOutQueueSize;
            
            private global::System.Data.DataColumn columnQueuedItemsSize;
            
            private global::System.Data.DataColumn columnMaxProcessQueueEntries;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupStatusDataTable() {
                this.TableName = "GroupStatus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GroupStatusDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GroupStatusDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupIDColumn {
                get {
                    return this.columnGroupID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SessionsCountColumn {
                get {
                    return this.columnSessionsCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OutQueueSizeColumn {
                get {
                    return this.columnOutQueueSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QueuedItemsSizeColumn {
                get {
                    return this.columnQueuedItemsSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxProcessQueueEntriesColumn {
                get {
                    return this.columnMaxProcessQueueEntries;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupStatusRow this[int index] {
                get {
                    return ((GroupStatusRow)(this.Rows[index]));
                }
            }
            
            public event GroupStatusRowChangeEventHandler GroupStatusRowChanging;
            
            public event GroupStatusRowChangeEventHandler GroupStatusRowChanged;
            
            public event GroupStatusRowChangeEventHandler GroupStatusRowDeleting;
            
            public event GroupStatusRowChangeEventHandler GroupStatusRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGroupStatusRow(GroupStatusRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupStatusRow AddGroupStatusRow(GroupRow parentGroupRowByGroupGroupStatus, int SessionsCount, int OutQueueSize, int QueuedItemsSize, int MaxProcessQueueEntries) {
                GroupStatusRow rowGroupStatusRow = ((GroupStatusRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        SessionsCount,
                        OutQueueSize,
                        QueuedItemsSize,
                        MaxProcessQueueEntries};
                if ((parentGroupRowByGroupGroupStatus != null)) {
                    columnValuesArray[0] = parentGroupRowByGroupGroupStatus[0];
                }
                rowGroupStatusRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGroupStatusRow);
                return rowGroupStatusRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupStatusRow FindByGroupID(int GroupID) {
                return ((GroupStatusRow)(this.Rows.Find(new object[] {
                            GroupID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GroupStatusDataTable cln = ((GroupStatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GroupStatusDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGroupID = base.Columns["GroupID"];
                this.columnSessionsCount = base.Columns["SessionsCount"];
                this.columnOutQueueSize = base.Columns["OutQueueSize"];
                this.columnQueuedItemsSize = base.Columns["QueuedItemsSize"];
                this.columnMaxProcessQueueEntries = base.Columns["MaxProcessQueueEntries"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGroupID = new global::System.Data.DataColumn("GroupID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupID);
                this.columnSessionsCount = new global::System.Data.DataColumn("SessionsCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSessionsCount);
                this.columnOutQueueSize = new global::System.Data.DataColumn("OutQueueSize", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutQueueSize);
                this.columnQueuedItemsSize = new global::System.Data.DataColumn("QueuedItemsSize", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQueuedItemsSize);
                this.columnMaxProcessQueueEntries = new global::System.Data.DataColumn("MaxProcessQueueEntries", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxProcessQueueEntries);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("MultiXTpmDBKey11", new global::System.Data.DataColumn[] {
                                this.columnGroupID}, true));
                this.columnGroupID.AllowDBNull = false;
                this.columnGroupID.Unique = true;
                this.columnGroupID.DefaultValue = ((int)(0));
                this.columnSessionsCount.AllowDBNull = false;
                this.columnSessionsCount.DefaultValue = ((int)(0));
                this.columnOutQueueSize.AllowDBNull = false;
                this.columnOutQueueSize.DefaultValue = ((int)(0));
                this.columnQueuedItemsSize.AllowDBNull = false;
                this.columnQueuedItemsSize.DefaultValue = ((int)(0));
                this.columnMaxProcessQueueEntries.AllowDBNull = false;
                this.columnMaxProcessQueueEntries.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupStatusRow NewGroupStatusRow() {
                return ((GroupStatusRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GroupStatusRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GroupStatusRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GroupStatusRowChanged != null)) {
                    this.GroupStatusRowChanged(this, new GroupStatusRowChangeEvent(((GroupStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GroupStatusRowChanging != null)) {
                    this.GroupStatusRowChanging(this, new GroupStatusRowChangeEvent(((GroupStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GroupStatusRowDeleted != null)) {
                    this.GroupStatusRowDeleted(this, new GroupStatusRowChangeEvent(((GroupStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GroupStatusRowDeleting != null)) {
                    this.GroupStatusRowDeleting(this, new GroupStatusRowChangeEvent(((GroupStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGroupStatusRow(GroupStatusRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MultiXTpmDB ds = new MultiXTpmDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GroupStatusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProcessStatusDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnProcessClassID;
            
            private global::System.Data.DataColumn columnAppVersion;
            
            private global::System.Data.DataColumn columnMultiXVersion;
            
            private global::System.Data.DataColumn columnIsReady;
            
            private global::System.Data.DataColumn columnControlStatus;
            
            private global::System.Data.DataColumn columnSessionsCount;
            
            private global::System.Data.DataColumn columnOutQueueSize;
            
            private global::System.Data.DataColumn columnLastMsgTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessStatusDataTable() {
                this.TableName = "ProcessStatus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProcessStatusDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProcessStatusDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcessClassIDColumn {
                get {
                    return this.columnProcessClassID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppVersionColumn {
                get {
                    return this.columnAppVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MultiXVersionColumn {
                get {
                    return this.columnMultiXVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsReadyColumn {
                get {
                    return this.columnIsReady;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ControlStatusColumn {
                get {
                    return this.columnControlStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SessionsCountColumn {
                get {
                    return this.columnSessionsCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OutQueueSizeColumn {
                get {
                    return this.columnOutQueueSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastMsgTimeColumn {
                get {
                    return this.columnLastMsgTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessStatusRow this[int index] {
                get {
                    return ((ProcessStatusRow)(this.Rows[index]));
                }
            }
            
            public event ProcessStatusRowChangeEventHandler ProcessStatusRowChanging;
            
            public event ProcessStatusRowChangeEventHandler ProcessStatusRowChanged;
            
            public event ProcessStatusRowChangeEventHandler ProcessStatusRowDeleting;
            
            public event ProcessStatusRowChangeEventHandler ProcessStatusRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProcessStatusRow(ProcessStatusRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessStatusRow AddProcessStatusRow(int ID, ProcessClassRow parentProcessClassRowByProcessProcessStatus, string AppVersion, string MultiXVersion, bool IsReady, int ControlStatus, int SessionsCount, int OutQueueSize, System.DateTime LastMsgTime) {
                ProcessStatusRow rowProcessStatusRow = ((ProcessStatusRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        null,
                        AppVersion,
                        MultiXVersion,
                        IsReady,
                        ControlStatus,
                        SessionsCount,
                        OutQueueSize,
                        LastMsgTime};
                if ((parentProcessClassRowByProcessProcessStatus != null)) {
                    columnValuesArray[1] = parentProcessClassRowByProcessProcessStatus[0];
                }
                rowProcessStatusRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProcessStatusRow);
                return rowProcessStatusRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessStatusRow FindByID(int ID) {
                return ((ProcessStatusRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProcessStatusDataTable cln = ((ProcessStatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProcessStatusDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnProcessClassID = base.Columns["ProcessClassID"];
                this.columnAppVersion = base.Columns["AppVersion"];
                this.columnMultiXVersion = base.Columns["MultiXVersion"];
                this.columnIsReady = base.Columns["IsReady"];
                this.columnControlStatus = base.Columns["ControlStatus"];
                this.columnSessionsCount = base.Columns["SessionsCount"];
                this.columnOutQueueSize = base.Columns["OutQueueSize"];
                this.columnLastMsgTime = base.Columns["LastMsgTime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnProcessClassID = new global::System.Data.DataColumn("ProcessClassID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcessClassID);
                this.columnAppVersion = new global::System.Data.DataColumn("AppVersion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppVersion);
                this.columnMultiXVersion = new global::System.Data.DataColumn("MultiXVersion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMultiXVersion);
                this.columnIsReady = new global::System.Data.DataColumn("IsReady", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsReady);
                this.columnControlStatus = new global::System.Data.DataColumn("ControlStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnControlStatus);
                this.columnSessionsCount = new global::System.Data.DataColumn("SessionsCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSessionsCount);
                this.columnOutQueueSize = new global::System.Data.DataColumn("OutQueueSize", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutQueueSize);
                this.columnLastMsgTime = new global::System.Data.DataColumn("LastMsgTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastMsgTime);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("MultiXTpmDBKey12", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnID.DefaultValue = ((int)(0));
                this.columnProcessClassID.AllowDBNull = false;
                this.columnProcessClassID.DefaultValue = ((int)(0));
                this.columnIsReady.AllowDBNull = false;
                this.columnIsReady.DefaultValue = ((bool)(false));
                this.columnControlStatus.AllowDBNull = false;
                this.columnControlStatus.DefaultValue = ((int)(0));
                this.columnSessionsCount.AllowDBNull = false;
                this.columnSessionsCount.DefaultValue = ((int)(0));
                this.columnOutQueueSize.AllowDBNull = false;
                this.columnOutQueueSize.DefaultValue = ((int)(0));
                this.columnLastMsgTime.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessStatusRow NewProcessStatusRow() {
                return ((ProcessStatusRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProcessStatusRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProcessStatusRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProcessStatusRowChanged != null)) {
                    this.ProcessStatusRowChanged(this, new ProcessStatusRowChangeEvent(((ProcessStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProcessStatusRowChanging != null)) {
                    this.ProcessStatusRowChanging(this, new ProcessStatusRowChangeEvent(((ProcessStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProcessStatusRowDeleted != null)) {
                    this.ProcessStatusRowDeleted(this, new ProcessStatusRowChangeEvent(((ProcessStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProcessStatusRowDeleting != null)) {
                    this.ProcessStatusRowDeleting(this, new ProcessStatusRowChangeEvent(((ProcessStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProcessStatusRow(ProcessStatusRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MultiXTpmDB ds = new MultiXTpmDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProcessStatusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserPermissionsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUserName;
            
            private global::System.Data.DataColumn columnGetWSDL;
            
            private global::System.Data.DataColumn columnGetConfig;
            
            private global::System.Data.DataColumn columnUpdateConfig;
            
            private global::System.Data.DataColumn columnGetSystemStatus;
            
            private global::System.Data.DataColumn columnRestartProcess;
            
            private global::System.Data.DataColumn columnRestartGroup;
            
            private global::System.Data.DataColumn columnStartProcess;
            
            private global::System.Data.DataColumn columnStartGroup;
            
            private global::System.Data.DataColumn columnShutdownProcess;
            
            private global::System.Data.DataColumn columnShutdownGroup;
            
            private global::System.Data.DataColumn columnSuspendGroup;
            
            private global::System.Data.DataColumn columnSuspendProcess;
            
            private global::System.Data.DataColumn columnResumeGroup;
            
            private global::System.Data.DataColumn columnResumeProcess;
            
            private global::System.Data.DataColumn columnRestartAll;
            
            private global::System.Data.DataColumn columnStartAll;
            
            private global::System.Data.DataColumn columnShutdownAll;
            
            private global::System.Data.DataColumn columnSuspendAll;
            
            private global::System.Data.DataColumn columnResumeAll;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserPermissionsDataTable() {
                this.TableName = "UserPermissions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserPermissionsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UserPermissionsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GetWSDLColumn {
                get {
                    return this.columnGetWSDL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GetConfigColumn {
                get {
                    return this.columnGetConfig;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateConfigColumn {
                get {
                    return this.columnUpdateConfig;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GetSystemStatusColumn {
                get {
                    return this.columnGetSystemStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RestartProcessColumn {
                get {
                    return this.columnRestartProcess;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RestartGroupColumn {
                get {
                    return this.columnRestartGroup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartProcessColumn {
                get {
                    return this.columnStartProcess;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartGroupColumn {
                get {
                    return this.columnStartGroup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShutdownProcessColumn {
                get {
                    return this.columnShutdownProcess;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShutdownGroupColumn {
                get {
                    return this.columnShutdownGroup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SuspendGroupColumn {
                get {
                    return this.columnSuspendGroup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SuspendProcessColumn {
                get {
                    return this.columnSuspendProcess;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResumeGroupColumn {
                get {
                    return this.columnResumeGroup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResumeProcessColumn {
                get {
                    return this.columnResumeProcess;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RestartAllColumn {
                get {
                    return this.columnRestartAll;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartAllColumn {
                get {
                    return this.columnStartAll;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShutdownAllColumn {
                get {
                    return this.columnShutdownAll;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SuspendAllColumn {
                get {
                    return this.columnSuspendAll;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResumeAllColumn {
                get {
                    return this.columnResumeAll;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserPermissionsRow this[int index] {
                get {
                    return ((UserPermissionsRow)(this.Rows[index]));
                }
            }
            
            public event UserPermissionsRowChangeEventHandler UserPermissionsRowChanging;
            
            public event UserPermissionsRowChangeEventHandler UserPermissionsRowChanged;
            
            public event UserPermissionsRowChangeEventHandler UserPermissionsRowDeleting;
            
            public event UserPermissionsRowChangeEventHandler UserPermissionsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUserPermissionsRow(UserPermissionsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserPermissionsRow AddUserPermissionsRow(
                        string UserName, 
                        bool GetWSDL, 
                        bool GetConfig, 
                        bool UpdateConfig, 
                        bool GetSystemStatus, 
                        bool RestartProcess, 
                        bool RestartGroup, 
                        bool StartProcess, 
                        bool StartGroup, 
                        bool ShutdownProcess, 
                        bool ShutdownGroup, 
                        bool SuspendGroup, 
                        bool SuspendProcess, 
                        bool ResumeGroup, 
                        bool ResumeProcess, 
                        bool RestartAll, 
                        bool StartAll, 
                        bool ShutdownAll, 
                        bool SuspendAll, 
                        bool ResumeAll) {
                UserPermissionsRow rowUserPermissionsRow = ((UserPermissionsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UserName,
                        GetWSDL,
                        GetConfig,
                        UpdateConfig,
                        GetSystemStatus,
                        RestartProcess,
                        RestartGroup,
                        StartProcess,
                        StartGroup,
                        ShutdownProcess,
                        ShutdownGroup,
                        SuspendGroup,
                        SuspendProcess,
                        ResumeGroup,
                        ResumeProcess,
                        RestartAll,
                        StartAll,
                        ShutdownAll,
                        SuspendAll,
                        ResumeAll};
                rowUserPermissionsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUserPermissionsRow);
                return rowUserPermissionsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UserPermissionsDataTable cln = ((UserPermissionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UserPermissionsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserName = base.Columns["UserName"];
                this.columnGetWSDL = base.Columns["GetWSDL"];
                this.columnGetConfig = base.Columns["GetConfig"];
                this.columnUpdateConfig = base.Columns["UpdateConfig"];
                this.columnGetSystemStatus = base.Columns["GetSystemStatus"];
                this.columnRestartProcess = base.Columns["RestartProcess"];
                this.columnRestartGroup = base.Columns["RestartGroup"];
                this.columnStartProcess = base.Columns["StartProcess"];
                this.columnStartGroup = base.Columns["StartGroup"];
                this.columnShutdownProcess = base.Columns["ShutdownProcess"];
                this.columnShutdownGroup = base.Columns["ShutdownGroup"];
                this.columnSuspendGroup = base.Columns["SuspendGroup"];
                this.columnSuspendProcess = base.Columns["SuspendProcess"];
                this.columnResumeGroup = base.Columns["ResumeGroup"];
                this.columnResumeProcess = base.Columns["ResumeProcess"];
                this.columnRestartAll = base.Columns["RestartAll"];
                this.columnStartAll = base.Columns["StartAll"];
                this.columnShutdownAll = base.Columns["ShutdownAll"];
                this.columnSuspendAll = base.Columns["SuspendAll"];
                this.columnResumeAll = base.Columns["ResumeAll"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnGetWSDL = new global::System.Data.DataColumn("GetWSDL", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGetWSDL);
                this.columnGetConfig = new global::System.Data.DataColumn("GetConfig", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGetConfig);
                this.columnUpdateConfig = new global::System.Data.DataColumn("UpdateConfig", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateConfig);
                this.columnGetSystemStatus = new global::System.Data.DataColumn("GetSystemStatus", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGetSystemStatus);
                this.columnRestartProcess = new global::System.Data.DataColumn("RestartProcess", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRestartProcess);
                this.columnRestartGroup = new global::System.Data.DataColumn("RestartGroup", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRestartGroup);
                this.columnStartProcess = new global::System.Data.DataColumn("StartProcess", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartProcess);
                this.columnStartGroup = new global::System.Data.DataColumn("StartGroup", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartGroup);
                this.columnShutdownProcess = new global::System.Data.DataColumn("ShutdownProcess", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShutdownProcess);
                this.columnShutdownGroup = new global::System.Data.DataColumn("ShutdownGroup", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShutdownGroup);
                this.columnSuspendGroup = new global::System.Data.DataColumn("SuspendGroup", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSuspendGroup);
                this.columnSuspendProcess = new global::System.Data.DataColumn("SuspendProcess", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSuspendProcess);
                this.columnResumeGroup = new global::System.Data.DataColumn("ResumeGroup", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResumeGroup);
                this.columnResumeProcess = new global::System.Data.DataColumn("ResumeProcess", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResumeProcess);
                this.columnRestartAll = new global::System.Data.DataColumn("RestartAll", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRestartAll);
                this.columnStartAll = new global::System.Data.DataColumn("StartAll", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartAll);
                this.columnShutdownAll = new global::System.Data.DataColumn("ShutdownAll", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShutdownAll);
                this.columnSuspendAll = new global::System.Data.DataColumn("SuspendAll", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSuspendAll);
                this.columnResumeAll = new global::System.Data.DataColumn("ResumeAll", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResumeAll);
                this.columnGetWSDL.AllowDBNull = false;
                this.columnGetConfig.AllowDBNull = false;
                this.columnUpdateConfig.AllowDBNull = false;
                this.columnGetSystemStatus.AllowDBNull = false;
                this.columnRestartProcess.AllowDBNull = false;
                this.columnRestartGroup.AllowDBNull = false;
                this.columnStartProcess.AllowDBNull = false;
                this.columnStartGroup.AllowDBNull = false;
                this.columnShutdownProcess.AllowDBNull = false;
                this.columnShutdownGroup.AllowDBNull = false;
                this.columnSuspendGroup.AllowDBNull = false;
                this.columnSuspendProcess.AllowDBNull = false;
                this.columnResumeGroup.AllowDBNull = false;
                this.columnResumeProcess.AllowDBNull = false;
                this.columnRestartAll.AllowDBNull = false;
                this.columnStartAll.AllowDBNull = false;
                this.columnShutdownAll.AllowDBNull = false;
                this.columnSuspendAll.AllowDBNull = false;
                this.columnResumeAll.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserPermissionsRow NewUserPermissionsRow() {
                return ((UserPermissionsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UserPermissionsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UserPermissionsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserPermissionsRowChanged != null)) {
                    this.UserPermissionsRowChanged(this, new UserPermissionsRowChangeEvent(((UserPermissionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserPermissionsRowChanging != null)) {
                    this.UserPermissionsRowChanging(this, new UserPermissionsRowChangeEvent(((UserPermissionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserPermissionsRowDeleted != null)) {
                    this.UserPermissionsRowDeleted(this, new UserPermissionsRowChangeEvent(((UserPermissionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserPermissionsRowDeleting != null)) {
                    this.UserPermissionsRowDeleting(this, new UserPermissionsRowChangeEvent(((UserPermissionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUserPermissionsRow(UserPermissionsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MultiXTpmDB ds = new MultiXTpmDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserPermissionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProcessClassRow : global::System.Data.DataRow {
            
            private ProcessClassDataTable tableProcessClass;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProcessClassRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProcessClass = ((ProcessClassDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableProcessClass.IDColumn]));
                }
                set {
                    this[this.tableProcessClass.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableProcessClass.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ProcessClass\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessClass.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PasswordToSend {
                get {
                    try {
                        return ((string)(this[this.tableProcessClass.PasswordToSendColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PasswordToSend\' in table \'ProcessClass\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessClass.PasswordToSendColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExpectedPassword {
                get {
                    try {
                        return ((string)(this[this.tableProcessClass.ExpectedPasswordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExpectedPassword\' in table \'ProcessClass\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessClass.ExpectedPasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExecCmd {
                get {
                    try {
                        return ((string)(this[this.tableProcessClass.ExecCmdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExecCmd\' in table \'ProcessClass\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessClass.ExecCmdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClassName {
                get {
                    try {
                        return ((string)(this[this.tableProcessClass.ClassNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClassName\' in table \'ProcessClass\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessClass.ClassNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DebugLevel {
                get {
                    return ((int)(this[this.tableProcessClass.DebugLevelColumn]));
                }
                set {
                    this[this.tableProcessClass.DebugLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DefaultSendTimeout {
                get {
                    return ((int)(this[this.tableProcessClass.DefaultSendTimeoutColumn]));
                }
                set {
                    this[this.tableProcessClass.DefaultSendTimeoutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExecParams {
                get {
                    try {
                        return ((string)(this[this.tableProcessClass.ExecParamsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExecParams\' in table \'ProcessClass\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessClass.ExecParamsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaxQueueSize {
                get {
                    return ((int)(this[this.tableProcessClass.MaxQueueSizeColumn]));
                }
                set {
                    this[this.tableProcessClass.MaxQueueSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaxSessions {
                get {
                    return ((int)(this[this.tableProcessClass.MaxSessionsColumn]));
                }
                set {
                    this[this.tableProcessClass.MaxSessionsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaxRecoveryQueueSize {
                get {
                    return ((int)(this[this.tableProcessClass.MaxRecoveryQueueSizeColumn]));
                }
                set {
                    this[this.tableProcessClass.MaxRecoveryQueueSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AutoStart {
                get {
                    return ((bool)(this[this.tableProcessClass.AutoStartColumn]));
                }
                set {
                    this[this.tableProcessClass.AutoStartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinInstances {
                get {
                    return ((int)(this[this.tableProcessClass.MinInstancesColumn]));
                }
                set {
                    this[this.tableProcessClass.MinInstancesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaxInstances {
                get {
                    return ((int)(this[this.tableProcessClass.MaxInstancesColumn]));
                }
                set {
                    this[this.tableProcessClass.MaxInstancesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StartProcessDelay {
                get {
                    return ((int)(this[this.tableProcessClass.StartProcessDelayColumn]));
                }
                set {
                    this[this.tableProcessClass.StartProcessDelayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InactivityTimer {
                get {
                    return ((int)(this[this.tableProcessClass.InactivityTimerColumn]));
                }
                set {
                    this[this.tableProcessClass.InactivityTimerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdditionalConfigTextFile {
                get {
                    try {
                        return ((string)(this[this.tableProcessClass.AdditionalConfigTextFileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdditionalConfigTextFile\' in table \'ProcessClass\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableProcessClass.AdditionalConfigTextFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableProcessClass.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableProcessClass.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPasswordToSendNull() {
                return this.IsNull(this.tableProcessClass.PasswordToSendColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPasswordToSendNull() {
                this[this.tableProcessClass.PasswordToSendColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpectedPasswordNull() {
                return this.IsNull(this.tableProcessClass.ExpectedPasswordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpectedPasswordNull() {
                this[this.tableProcessClass.ExpectedPasswordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExecCmdNull() {
                return this.IsNull(this.tableProcessClass.ExecCmdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExecCmdNull() {
                this[this.tableProcessClass.ExecCmdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClassNameNull() {
                return this.IsNull(this.tableProcessClass.ClassNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClassNameNull() {
                this[this.tableProcessClass.ClassNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExecParamsNull() {
                return this.IsNull(this.tableProcessClass.ExecParamsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExecParamsNull() {
                this[this.tableProcessClass.ExecParamsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdditionalConfigTextFileNull() {
                return this.IsNull(this.tableProcessClass.AdditionalConfigTextFileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdditionalConfigTextFileNull() {
                this[this.tableProcessClass.AdditionalConfigTextFileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessStatusRow[] GetProcessStatusRows() {
                if ((this.Table.ChildRelations["ProcessProcessStatus"] == null)) {
                    return new ProcessStatusRow[0];
                }
                else {
                    return ((ProcessStatusRow[])(base.GetChildRows(this.Table.ChildRelations["ProcessProcessStatus"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupProcessClassesRow[] GetGroupProcessClassesRows() {
                if ((this.Table.ChildRelations["ProcessClassGroupProcessClasses"] == null)) {
                    return new GroupProcessClassesRow[0];
                }
                else {
                    return ((GroupProcessClassesRow[])(base.GetChildRows(this.Table.ChildRelations["ProcessClassGroupProcessClasses"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassParamsRow[] GetProcessClassParamsRows() {
                if ((this.Table.ChildRelations["ProcessClassProcessClassParams"] == null)) {
                    return new ProcessClassParamsRow[0];
                }
                else {
                    return ((ProcessClassParamsRow[])(base.GetChildRows(this.Table.ChildRelations["ProcessClassProcessClassParams"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassLinksRow[] GetProcessClassLinksRows() {
                if ((this.Table.ChildRelations["ProcessClassProcessClassLinks"] == null)) {
                    return new ProcessClassLinksRow[0];
                }
                else {
                    return ((ProcessClassLinksRow[])(base.GetChildRows(this.Table.ChildRelations["ProcessClassProcessClassLinks"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LinkRow : global::System.Data.DataRow {
            
            private LinkDataTable tableLink;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLink = ((LinkDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableLink.IDColumn]));
                }
                set {
                    this[this.tableLink.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableLink.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'Link\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLink.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkType {
                get {
                    return ((int)(this[this.tableLink.LinkTypeColumn]));
                }
                set {
                    this[this.tableLink.LinkTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OpenMode {
                get {
                    return ((int)(this[this.tableLink.OpenModeColumn]));
                }
                set {
                    this[this.tableLink.OpenModeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Raw {
                get {
                    return ((bool)(this[this.tableLink.RawColumn]));
                }
                set {
                    this[this.tableLink.RawColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocalAddress {
                get {
                    try {
                        return ((string)(this[this.tableLink.LocalAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocalAddress\' in table \'Link\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLink.LocalAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocalPort {
                get {
                    try {
                        return ((string)(this[this.tableLink.LocalPortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocalPort\' in table \'Link\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLink.LocalPortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RemoteAddress {
                get {
                    try {
                        return ((string)(this[this.tableLink.RemoteAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RemoteAddress\' in table \'Link\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLink.RemoteAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RemotePort {
                get {
                    try {
                        return ((string)(this[this.tableLink.RemotePortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RemotePort\' in table \'Link\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLink.RemotePortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SSLAPI {
                get {
                    return ((string)(this[this.tableLink.SSLAPIColumn]));
                }
                set {
                    this[this.tableLink.SSLAPIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SSLClientAuthenticationRequired {
                get {
                    return ((bool)(this[this.tableLink.SSLClientAuthenticationRequiredColumn]));
                }
                set {
                    this[this.tableLink.SSLClientAuthenticationRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SSLServerAuthenticationRequired {
                get {
                    return ((bool)(this[this.tableLink.SSLServerAuthenticationRequiredColumn]));
                }
                set {
                    this[this.tableLink.SSLServerAuthenticationRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SSLServerNameVerificationRequired {
                get {
                    return ((bool)(this[this.tableLink.SSLServerNameVerificationRequiredColumn]));
                }
                set {
                    this[this.tableLink.SSLServerNameVerificationRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SSLTrustStoreFile {
                get {
                    return ((string)(this[this.tableLink.SSLTrustStoreFileColumn]));
                }
                set {
                    this[this.tableLink.SSLTrustStoreFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SSLTrustStoreDirectory {
                get {
                    return ((string)(this[this.tableLink.SSLTrustStoreDirectoryColumn]));
                }
                set {
                    this[this.tableLink.SSLTrustStoreDirectoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SSLCertificateFile {
                get {
                    return ((string)(this[this.tableLink.SSLCertificateFileColumn]));
                }
                set {
                    this[this.tableLink.SSLCertificateFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SSLPrivateKeyFile {
                get {
                    return ((string)(this[this.tableLink.SSLPrivateKeyFileColumn]));
                }
                set {
                    this[this.tableLink.SSLPrivateKeyFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SSLPrivateKeyPassword {
                get {
                    return ((string)(this[this.tableLink.SSLPrivateKeyPasswordColumn]));
                }
                set {
                    this[this.tableLink.SSLPrivateKeyPasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SSLRSAPrivateKeyFile {
                get {
                    return ((string)(this[this.tableLink.SSLRSAPrivateKeyFileColumn]));
                }
                set {
                    this[this.tableLink.SSLRSAPrivateKeyFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SSLDHFile {
                get {
                    return ((string)(this[this.tableLink.SSLDHFileColumn]));
                }
                set {
                    this[this.tableLink.SSLDHFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SSLPrivateKeyPasswordFile {
                get {
                    try {
                        return ((string)(this[this.tableLink.SSLPrivateKeyPasswordFileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SSLPrivateKeyPasswordFile\' in table \'Link\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLink.SSLPrivateKeyPasswordFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableLink.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableLink.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocalAddressNull() {
                return this.IsNull(this.tableLink.LocalAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocalAddressNull() {
                this[this.tableLink.LocalAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocalPortNull() {
                return this.IsNull(this.tableLink.LocalPortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocalPortNull() {
                this[this.tableLink.LocalPortColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemoteAddressNull() {
                return this.IsNull(this.tableLink.RemoteAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemoteAddressNull() {
                this[this.tableLink.RemoteAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemotePortNull() {
                return this.IsNull(this.tableLink.RemotePortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemotePortNull() {
                this[this.tableLink.RemotePortColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSSLPrivateKeyPasswordFileNull() {
                return this.IsNull(this.tableLink.SSLPrivateKeyPasswordFileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSSLPrivateKeyPasswordFileNull() {
                this[this.tableLink.SSLPrivateKeyPasswordFileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkParamsRow[] GetLinkParamsRows() {
                if ((this.Table.ChildRelations["LinkLinkParams"] == null)) {
                    return new LinkParamsRow[0];
                }
                else {
                    return ((LinkParamsRow[])(base.GetChildRows(this.Table.ChildRelations["LinkLinkParams"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassLinksRow[] GetProcessClassLinksRows() {
                if ((this.Table.ChildRelations["LinkProcessClassLinks"] == null)) {
                    return new ProcessClassLinksRow[0];
                }
                else {
                    return ((ProcessClassLinksRow[])(base.GetChildRows(this.Table.ChildRelations["LinkProcessClassLinks"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GroupRow : global::System.Data.DataRow {
            
            private GroupDataTable tableGroup;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GroupRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGroup = ((GroupDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableGroup.IDColumn]));
                }
                set {
                    this[this.tableGroup.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableGroup.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'Group\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGroup.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableGroup.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableGroup.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupStatusRow[] GetGroupStatusRows() {
                if ((this.Table.ChildRelations["GroupGroupStatus"] == null)) {
                    return new GroupStatusRow[0];
                }
                else {
                    return ((GroupStatusRow[])(base.GetChildRows(this.Table.ChildRelations["GroupGroupStatus"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupProcessClassesRow[] GetGroupProcessClassesRows() {
                if ((this.Table.ChildRelations["GroupGroupProcessClasses"] == null)) {
                    return new GroupProcessClassesRow[0];
                }
                else {
                    return ((GroupProcessClassesRow[])(base.GetChildRows(this.Table.ChildRelations["GroupGroupProcessClasses"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupForwardFlagsRow[] GetGroupForwardFlagsRows() {
                if ((this.Table.ChildRelations["GroupGroupForwardFlags"] == null)) {
                    return new GroupForwardFlagsRow[0];
                }
                else {
                    return ((GroupForwardFlagsRow[])(base.GetChildRows(this.Table.ChildRelations["GroupGroupForwardFlags"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MessageRow : global::System.Data.DataRow {
            
            private MessageDataTable tableMessage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MessageRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMessage = ((MessageDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableMessage.IDColumn]));
                }
                set {
                    this[this.tableMessage.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableMessage.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'Message\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMessage.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Stateful {
                get {
                    return ((bool)(this[this.tableMessage.StatefulColumn]));
                }
                set {
                    this[this.tableMessage.StatefulColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool DbProtected {
                get {
                    return ((bool)(this[this.tableMessage.DbProtectedColumn]));
                }
                set {
                    this[this.tableMessage.DbProtectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Timeout {
                get {
                    return ((int)(this[this.tableMessage.TimeoutColumn]));
                }
                set {
                    this[this.tableMessage.TimeoutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Priority {
                get {
                    return ((int)(this[this.tableMessage.PriorityColumn]));
                }
                set {
                    this[this.tableMessage.PriorityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WSSoapAction {
                get {
                    return ((string)(this[this.tableMessage.WSSoapActionColumn]));
                }
                set {
                    this[this.tableMessage.WSSoapActionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WSDllFile {
                get {
                    return ((string)(this[this.tableMessage.WSDllFileColumn]));
                }
                set {
                    this[this.tableMessage.WSDllFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WSDllFunction {
                get {
                    return ((string)(this[this.tableMessage.WSDllFunctionColumn]));
                }
                set {
                    this[this.tableMessage.WSDllFunctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WSURL {
                get {
                    return ((string)(this[this.tableMessage.WSURLColumn]));
                }
                set {
                    this[this.tableMessage.WSURLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableMessage.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableMessage.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupForwardFlagsRow[] GetGroupForwardFlagsRows() {
                if ((this.Table.ChildRelations["MessageGroupForwardFlags"] == null)) {
                    return new GroupForwardFlagsRow[0];
                }
                else {
                    return ((GroupForwardFlagsRow[])(base.GetChildRows(this.Table.ChildRelations["MessageGroupForwardFlags"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GroupForwardFlagsRow : global::System.Data.DataRow {
            
            private GroupForwardFlagsDataTable tableGroupForwardFlags;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GroupForwardFlagsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGroupForwardFlags = ((GroupForwardFlagsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableGroupForwardFlags.IDColumn]));
                }
                set {
                    this[this.tableGroupForwardFlags.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GroupID {
                get {
                    return ((int)(this[this.tableGroupForwardFlags.GroupIDColumn]));
                }
                set {
                    this[this.tableGroupForwardFlags.GroupIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MessageID {
                get {
                    return ((int)(this[this.tableGroupForwardFlags.MessageIDColumn]));
                }
                set {
                    this[this.tableGroupForwardFlags.MessageIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ResponseRequired {
                get {
                    return ((bool)(this[this.tableGroupForwardFlags.ResponseRequiredColumn]));
                }
                set {
                    this[this.tableGroupForwardFlags.ResponseRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IgnoreResponse {
                get {
                    return ((bool)(this[this.tableGroupForwardFlags.IgnoreResponseColumn]));
                }
                set {
                    this[this.tableGroupForwardFlags.IgnoreResponseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ForwardToAll {
                get {
                    return ((bool)(this[this.tableGroupForwardFlags.ForwardToAllColumn]));
                }
                set {
                    this[this.tableGroupForwardFlags.ForwardToAllColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessageRow MessageRow {
                get {
                    return ((MessageRow)(this.GetParentRow(this.Table.ParentRelations["MessageGroupForwardFlags"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MessageGroupForwardFlags"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupRow GroupRow {
                get {
                    return ((GroupRow)(this.GetParentRow(this.Table.ParentRelations["GroupGroupForwardFlags"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["GroupGroupForwardFlags"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ParamRow : global::System.Data.DataRow {
            
            private ParamDataTable tableParam;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParamRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableParam = ((ParamDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableParam.IDColumn]));
                }
                set {
                    this[this.tableParam.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParamName {
                get {
                    try {
                        return ((string)(this[this.tableParam.ParamNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParamName\' in table \'Param\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParam.ParamNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParamValue {
                get {
                    try {
                        return ((string)(this[this.tableParam.ParamValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParamValue\' in table \'Param\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParam.ParamValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParamNameNull() {
                return this.IsNull(this.tableParam.ParamNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParamNameNull() {
                this[this.tableParam.ParamNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParamValueNull() {
                return this.IsNull(this.tableParam.ParamValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParamValueNull() {
                this[this.tableParam.ParamValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkParamsRow[] GetLinkParamsRows() {
                if ((this.Table.ChildRelations["ParamLinkParams"] == null)) {
                    return new LinkParamsRow[0];
                }
                else {
                    return ((LinkParamsRow[])(base.GetChildRows(this.Table.ChildRelations["ParamLinkParams"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassParamsRow[] GetProcessClassParamsRows() {
                if ((this.Table.ChildRelations["ParamProcessClassParams"] == null)) {
                    return new ProcessClassParamsRow[0];
                }
                else {
                    return ((ProcessClassParamsRow[])(base.GetChildRows(this.Table.ChildRelations["ParamProcessClassParams"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProcessClassLinksRow : global::System.Data.DataRow {
            
            private ProcessClassLinksDataTable tableProcessClassLinks;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProcessClassLinksRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProcessClassLinks = ((ProcessClassLinksDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableProcessClassLinks.IDColumn]));
                }
                set {
                    this[this.tableProcessClassLinks.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProcessClassID {
                get {
                    return ((int)(this[this.tableProcessClassLinks.ProcessClassIDColumn]));
                }
                set {
                    this[this.tableProcessClassLinks.ProcessClassIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkID {
                get {
                    return ((int)(this[this.tableProcessClassLinks.LinkIDColumn]));
                }
                set {
                    this[this.tableProcessClassLinks.LinkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkRow LinkRow {
                get {
                    return ((LinkRow)(this.GetParentRow(this.Table.ParentRelations["LinkProcessClassLinks"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LinkProcessClassLinks"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassRow ProcessClassRow {
                get {
                    return ((ProcessClassRow)(this.GetParentRow(this.Table.ParentRelations["ProcessClassProcessClassLinks"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProcessClassProcessClassLinks"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProcessClassParamsRow : global::System.Data.DataRow {
            
            private ProcessClassParamsDataTable tableProcessClassParams;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProcessClassParamsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProcessClassParams = ((ProcessClassParamsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableProcessClassParams.IDColumn]));
                }
                set {
                    this[this.tableProcessClassParams.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProcessClassID {
                get {
                    return ((int)(this[this.tableProcessClassParams.ProcessClassIDColumn]));
                }
                set {
                    this[this.tableProcessClassParams.ProcessClassIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParamID {
                get {
                    return ((int)(this[this.tableProcessClassParams.ParamIDColumn]));
                }
                set {
                    this[this.tableProcessClassParams.ParamIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParamRow ParamRow {
                get {
                    return ((ParamRow)(this.GetParentRow(this.Table.ParentRelations["ParamProcessClassParams"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ParamProcessClassParams"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassRow ProcessClassRow {
                get {
                    return ((ProcessClassRow)(this.GetParentRow(this.Table.ParentRelations["ProcessClassProcessClassParams"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProcessClassProcessClassParams"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LinkParamsRow : global::System.Data.DataRow {
            
            private LinkParamsDataTable tableLinkParams;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkParamsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLinkParams = ((LinkParamsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableLinkParams.IDColumn]));
                }
                set {
                    this[this.tableLinkParams.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkID {
                get {
                    return ((int)(this[this.tableLinkParams.LinkIDColumn]));
                }
                set {
                    this[this.tableLinkParams.LinkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParamID {
                get {
                    return ((int)(this[this.tableLinkParams.ParamIDColumn]));
                }
                set {
                    this[this.tableLinkParams.ParamIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParamRow ParamRow {
                get {
                    return ((ParamRow)(this.GetParentRow(this.Table.ParentRelations["ParamLinkParams"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ParamLinkParams"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkRow LinkRow {
                get {
                    return ((LinkRow)(this.GetParentRow(this.Table.ParentRelations["LinkLinkParams"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LinkLinkParams"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GroupProcessClassesRow : global::System.Data.DataRow {
            
            private GroupProcessClassesDataTable tableGroupProcessClasses;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GroupProcessClassesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGroupProcessClasses = ((GroupProcessClassesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableGroupProcessClasses.IDColumn]));
                }
                set {
                    this[this.tableGroupProcessClasses.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GroupID {
                get {
                    return ((int)(this[this.tableGroupProcessClasses.GroupIDColumn]));
                }
                set {
                    this[this.tableGroupProcessClasses.GroupIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProcessClassID {
                get {
                    return ((int)(this[this.tableGroupProcessClasses.ProcessClassIDColumn]));
                }
                set {
                    this[this.tableGroupProcessClasses.ProcessClassIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupRow GroupRow {
                get {
                    return ((GroupRow)(this.GetParentRow(this.Table.ParentRelations["GroupGroupProcessClasses"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["GroupGroupProcessClasses"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassRow ProcessClassRow {
                get {
                    return ((ProcessClassRow)(this.GetParentRow(this.Table.ParentRelations["ProcessClassGroupProcessClasses"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProcessClassGroupProcessClasses"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GroupStatusProcessesRow : global::System.Data.DataRow {
            
            private GroupStatusProcessesDataTable tableGroupStatusProcesses;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GroupStatusProcessesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGroupStatusProcesses = ((GroupStatusProcessesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableGroupStatusProcesses.IDColumn]));
                }
                set {
                    this[this.tableGroupStatusProcesses.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GroupID {
                get {
                    return ((int)(this[this.tableGroupStatusProcesses.GroupIDColumn]));
                }
                set {
                    this[this.tableGroupStatusProcesses.GroupIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProcessID {
                get {
                    return ((int)(this[this.tableGroupStatusProcesses.ProcessIDColumn]));
                }
                set {
                    this[this.tableGroupStatusProcesses.ProcessIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessStatusRow ProcessStatusRow {
                get {
                    return ((ProcessStatusRow)(this.GetParentRow(this.Table.ParentRelations["ProcessStatusGroupStatusProcesses"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProcessStatusGroupStatusProcesses"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupStatusRow GroupStatusRow {
                get {
                    return ((GroupStatusRow)(this.GetParentRow(this.Table.ParentRelations["GroupStatusGroupStatusProcesses"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["GroupStatusGroupStatusProcesses"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GroupStatusRow : global::System.Data.DataRow {
            
            private GroupStatusDataTable tableGroupStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GroupStatusRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGroupStatus = ((GroupStatusDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GroupID {
                get {
                    return ((int)(this[this.tableGroupStatus.GroupIDColumn]));
                }
                set {
                    this[this.tableGroupStatus.GroupIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SessionsCount {
                get {
                    return ((int)(this[this.tableGroupStatus.SessionsCountColumn]));
                }
                set {
                    this[this.tableGroupStatus.SessionsCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OutQueueSize {
                get {
                    return ((int)(this[this.tableGroupStatus.OutQueueSizeColumn]));
                }
                set {
                    this[this.tableGroupStatus.OutQueueSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QueuedItemsSize {
                get {
                    return ((int)(this[this.tableGroupStatus.QueuedItemsSizeColumn]));
                }
                set {
                    this[this.tableGroupStatus.QueuedItemsSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaxProcessQueueEntries {
                get {
                    return ((int)(this[this.tableGroupStatus.MaxProcessQueueEntriesColumn]));
                }
                set {
                    this[this.tableGroupStatus.MaxProcessQueueEntriesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupRow GroupRow {
                get {
                    return ((GroupRow)(this.GetParentRow(this.Table.ParentRelations["GroupGroupStatus"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["GroupGroupStatus"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupStatusProcessesRow[] GetGroupStatusProcessesRows() {
                if ((this.Table.ChildRelations["GroupStatusGroupStatusProcesses"] == null)) {
                    return new GroupStatusProcessesRow[0];
                }
                else {
                    return ((GroupStatusProcessesRow[])(base.GetChildRows(this.Table.ChildRelations["GroupStatusGroupStatusProcesses"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProcessStatusRow : global::System.Data.DataRow {
            
            private ProcessStatusDataTable tableProcessStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProcessStatusRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProcessStatus = ((ProcessStatusDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableProcessStatus.IDColumn]));
                }
                set {
                    this[this.tableProcessStatus.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProcessClassID {
                get {
                    return ((int)(this[this.tableProcessStatus.ProcessClassIDColumn]));
                }
                set {
                    this[this.tableProcessStatus.ProcessClassIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AppVersion {
                get {
                    try {
                        return ((string)(this[this.tableProcessStatus.AppVersionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AppVersion\' in table \'ProcessStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessStatus.AppVersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MultiXVersion {
                get {
                    try {
                        return ((string)(this[this.tableProcessStatus.MultiXVersionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MultiXVersion\' in table \'ProcessStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessStatus.MultiXVersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReady {
                get {
                    return ((bool)(this[this.tableProcessStatus.IsReadyColumn]));
                }
                set {
                    this[this.tableProcessStatus.IsReadyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ControlStatus {
                get {
                    return ((int)(this[this.tableProcessStatus.ControlStatusColumn]));
                }
                set {
                    this[this.tableProcessStatus.ControlStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SessionsCount {
                get {
                    return ((int)(this[this.tableProcessStatus.SessionsCountColumn]));
                }
                set {
                    this[this.tableProcessStatus.SessionsCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OutQueueSize {
                get {
                    return ((int)(this[this.tableProcessStatus.OutQueueSizeColumn]));
                }
                set {
                    this[this.tableProcessStatus.OutQueueSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastMsgTime {
                get {
                    return ((global::System.DateTime)(this[this.tableProcessStatus.LastMsgTimeColumn]));
                }
                set {
                    this[this.tableProcessStatus.LastMsgTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassRow ProcessClassRow {
                get {
                    return ((ProcessClassRow)(this.GetParentRow(this.Table.ParentRelations["ProcessProcessStatus"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProcessProcessStatus"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAppVersionNull() {
                return this.IsNull(this.tableProcessStatus.AppVersionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAppVersionNull() {
                this[this.tableProcessStatus.AppVersionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMultiXVersionNull() {
                return this.IsNull(this.tableProcessStatus.MultiXVersionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMultiXVersionNull() {
                this[this.tableProcessStatus.MultiXVersionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupStatusProcessesRow[] GetGroupStatusProcessesRows() {
                if ((this.Table.ChildRelations["ProcessStatusGroupStatusProcesses"] == null)) {
                    return new GroupStatusProcessesRow[0];
                }
                else {
                    return ((GroupStatusProcessesRow[])(base.GetChildRows(this.Table.ChildRelations["ProcessStatusGroupStatusProcesses"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UserPermissionsRow : global::System.Data.DataRow {
            
            private UserPermissionsDataTable tableUserPermissions;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserPermissionsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUserPermissions = ((UserPermissionsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    try {
                        return ((string)(this[this.tableUserPermissions.UserNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserName\' in table \'UserPermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserPermissions.UserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool GetWSDL {
                get {
                    return ((bool)(this[this.tableUserPermissions.GetWSDLColumn]));
                }
                set {
                    this[this.tableUserPermissions.GetWSDLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool GetConfig {
                get {
                    return ((bool)(this[this.tableUserPermissions.GetConfigColumn]));
                }
                set {
                    this[this.tableUserPermissions.GetConfigColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UpdateConfig {
                get {
                    return ((bool)(this[this.tableUserPermissions.UpdateConfigColumn]));
                }
                set {
                    this[this.tableUserPermissions.UpdateConfigColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool GetSystemStatus {
                get {
                    return ((bool)(this[this.tableUserPermissions.GetSystemStatusColumn]));
                }
                set {
                    this[this.tableUserPermissions.GetSystemStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RestartProcess {
                get {
                    return ((bool)(this[this.tableUserPermissions.RestartProcessColumn]));
                }
                set {
                    this[this.tableUserPermissions.RestartProcessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RestartGroup {
                get {
                    return ((bool)(this[this.tableUserPermissions.RestartGroupColumn]));
                }
                set {
                    this[this.tableUserPermissions.RestartGroupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool StartProcess {
                get {
                    return ((bool)(this[this.tableUserPermissions.StartProcessColumn]));
                }
                set {
                    this[this.tableUserPermissions.StartProcessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool StartGroup {
                get {
                    return ((bool)(this[this.tableUserPermissions.StartGroupColumn]));
                }
                set {
                    this[this.tableUserPermissions.StartGroupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ShutdownProcess {
                get {
                    return ((bool)(this[this.tableUserPermissions.ShutdownProcessColumn]));
                }
                set {
                    this[this.tableUserPermissions.ShutdownProcessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ShutdownGroup {
                get {
                    return ((bool)(this[this.tableUserPermissions.ShutdownGroupColumn]));
                }
                set {
                    this[this.tableUserPermissions.ShutdownGroupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SuspendGroup {
                get {
                    return ((bool)(this[this.tableUserPermissions.SuspendGroupColumn]));
                }
                set {
                    this[this.tableUserPermissions.SuspendGroupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SuspendProcess {
                get {
                    return ((bool)(this[this.tableUserPermissions.SuspendProcessColumn]));
                }
                set {
                    this[this.tableUserPermissions.SuspendProcessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ResumeGroup {
                get {
                    return ((bool)(this[this.tableUserPermissions.ResumeGroupColumn]));
                }
                set {
                    this[this.tableUserPermissions.ResumeGroupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ResumeProcess {
                get {
                    return ((bool)(this[this.tableUserPermissions.ResumeProcessColumn]));
                }
                set {
                    this[this.tableUserPermissions.ResumeProcessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RestartAll {
                get {
                    return ((bool)(this[this.tableUserPermissions.RestartAllColumn]));
                }
                set {
                    this[this.tableUserPermissions.RestartAllColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool StartAll {
                get {
                    return ((bool)(this[this.tableUserPermissions.StartAllColumn]));
                }
                set {
                    this[this.tableUserPermissions.StartAllColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ShutdownAll {
                get {
                    return ((bool)(this[this.tableUserPermissions.ShutdownAllColumn]));
                }
                set {
                    this[this.tableUserPermissions.ShutdownAllColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SuspendAll {
                get {
                    return ((bool)(this[this.tableUserPermissions.SuspendAllColumn]));
                }
                set {
                    this[this.tableUserPermissions.SuspendAllColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ResumeAll {
                get {
                    return ((bool)(this[this.tableUserPermissions.ResumeAllColumn]));
                }
                set {
                    this[this.tableUserPermissions.ResumeAllColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserNameNull() {
                return this.IsNull(this.tableUserPermissions.UserNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserNameNull() {
                this[this.tableUserPermissions.UserNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProcessClassRowChangeEvent : global::System.EventArgs {
            
            private ProcessClassRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassRowChangeEvent(ProcessClassRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LinkRowChangeEvent : global::System.EventArgs {
            
            private LinkRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkRowChangeEvent(LinkRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GroupRowChangeEvent : global::System.EventArgs {
            
            private GroupRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupRowChangeEvent(GroupRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MessageRowChangeEvent : global::System.EventArgs {
            
            private MessageRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessageRowChangeEvent(MessageRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GroupForwardFlagsRowChangeEvent : global::System.EventArgs {
            
            private GroupForwardFlagsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupForwardFlagsRowChangeEvent(GroupForwardFlagsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupForwardFlagsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ParamRowChangeEvent : global::System.EventArgs {
            
            private ParamRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParamRowChangeEvent(ParamRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParamRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProcessClassLinksRowChangeEvent : global::System.EventArgs {
            
            private ProcessClassLinksRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassLinksRowChangeEvent(ProcessClassLinksRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassLinksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProcessClassParamsRowChangeEvent : global::System.EventArgs {
            
            private ProcessClassParamsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassParamsRowChangeEvent(ProcessClassParamsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessClassParamsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LinkParamsRowChangeEvent : global::System.EventArgs {
            
            private LinkParamsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkParamsRowChangeEvent(LinkParamsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkParamsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GroupProcessClassesRowChangeEvent : global::System.EventArgs {
            
            private GroupProcessClassesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupProcessClassesRowChangeEvent(GroupProcessClassesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupProcessClassesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GroupStatusProcessesRowChangeEvent : global::System.EventArgs {
            
            private GroupStatusProcessesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupStatusProcessesRowChangeEvent(GroupStatusProcessesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupStatusProcessesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GroupStatusRowChangeEvent : global::System.EventArgs {
            
            private GroupStatusRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupStatusRowChangeEvent(GroupStatusRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupStatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProcessStatusRowChangeEvent : global::System.EventArgs {
            
            private ProcessStatusRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessStatusRowChangeEvent(ProcessStatusRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessStatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UserPermissionsRowChangeEvent : global::System.EventArgs {
            
            private UserPermissionsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserPermissionsRowChangeEvent(UserPermissionsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserPermissionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591