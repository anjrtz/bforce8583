<html>
<head>
	<meta http-equiv="Content-Type" content="text/html">
	<meta name="keywords" content="Application Server, SOAP, XML, Message Oriented Middleware, MOM, Distributed Processing, Application Level Router, POS, 
Point of Sale, Message Queue, Development, Developers, Projects, Downloads, OSTG, VA Software, SF.net, SourceForge, Web Services, ISO 8583, Transaction Processing Monitor, Open Source">
	<title>MultiXTpm gSoap Enhancer - MSE</title>
	<style>
a
{
 font-weight: bold; 
}
</style>
</head>
<body alink="blue" bgcolor="lightyellow" lang="EN-US" link="blue" vlink="purple">
	<font face="Arial,Helvetica">
		<div style="text-align: center;">
			<table border="0" cellpadding="8" cellspacing="2" >
				<tr>
					<td align="center">
						<a href="/">
							Home</a>
					</td>
				</tr>
				<tr>
					<td align="center">
						<h1 style="font-size: 30pt; color: orangered">
							MultiXTpm gSoap Enhancer - MSE</h1>
						<h1 style="font-size: 30pt; color: orangered">
							Open Source/Free Software</h1>
					</td>
				</tr>
				<tr>
					<td align="left">
						<strong>MultiXTpm gSoap Enhancer</strong> is an application built on top <a href="MultiXTpm Application Server.htm">MultiXTpm Application Server</a>. Its purpose is to assist <a href="http://www.cs.fsu.edu/~engelen/soap.html">gSoap</a> developers in implementing a large, scalable, load balanced system with as little effort as developing only the service routines. It frees the developer from all concerns relating to communications and transport issues, threads, processes and sessions management.
					</td>
				</tr>
				<tr>
					<td align="left">
						As a MultiXTpm based application, <strong>MSE</strong> enhances <a href="http://www.cs.fsu.edu/~engelen/soap.html">gSoap</a> by providing the following features without any programming effort required from the developer:<br />
						<ul>
							<li>Develop only the service functions in a single DLL. This eliminates the need for developing a complete program with listeners and threads. This also eliminates the need to develop multiple web services in a single process or the need to handle multiple DLLs in a single process.</li>
							<li>Session management. This enables the service functions maintain states between invocations of the same function or even between different functions in the same web service and even between different functions in different web services.</li>
							<li>Route web service calls to different processes and DLLS based on the URL specified in the request. In addition, if SOAPAction is specified, the call can be configured to be routed to a specific function in a specific DLL.</li>
							<li>Complete separation between the Listener/Transport handler and the Web Service functions that implement the business logic. This means that the Listener/Transport handler can be located on one machine and the Web Service function can be executed on another machine.</li>
							<li>Configuration dependent SSL support at the Front End Process. No recompilation
								of gSoap code required in order to switch between SSL and non-SSL modes.</li>
							<li>Configuration Dependent HTTP Basic Authentication at the Front End Process. Enables
								a single point of Authentication and Authorization, regardless of the number of
								Web Services supported and without the need to include Authentication and Authorization
								at the web service code.</li>
							<li>The separation between the Listeners and the Back End processes that handle the business logic enables configuring the system to support any desirable combination of Listeners/Ports/Back End processes. The following table shows all available combinations. </li>
						</ul>
					</td>
				</tr>
				<tr>
					<td align="left">
						<table id="TABLE1" border="1" cellpadding="4" cellspacing="0">
							<tr>
								<td>
									Listeners
								</td>
								<td>
									Ports
								</td>
								<td>
									Back End Processes
								</td>
								<td>
									Web Services
								</td>
								<td>
									Comment
								</td>
							</tr>
							<tr>
								<td>
									Single
								</td>
								<td>
									Single
								</td>
								<td>
									Single
								</td>
								<td>
									Single
								</td>
								<td>
									This is how its done when using <a href="http://www.cs.fsu.edu/~engelen/soap.html">gSoap</a> AS IS in a single process
								</td>
							</tr>
							<tr>
								<td>
									Single
								</td>
								<td>
									Single
								</td>
								<td>
									Single
								</td>
								<td>
									Multiple
								</td>
								<td>
									Seamlessly adds the ability to support more then one Web Service in a Single Process
								</td>
							</tr>
							<tr>
								<td>
									Single
								</td>
								<td>
									Single
								</td>
								<td>
									Multiple
								</td>
								<td>
									Single
								</td>
								<td>
									Seamlessly adds the ability to handle a Single Web Service in more than one process and maybe on more than one machine. This adds scalability and better availability. <a href="MultiXTpm%20Application%20Server.htm" title="Click here for a description of MultiXTpm Application Server">MultiXTpm</a> Load Balances between all process instances.
								</td>
							</tr>
							<tr>
								<td>
									Single
								</td>
								<td>
									Single
								</td>
								<td>
									Multiple
								</td>
								<td>
									Multiple
								</td>
								<td>
									Seamlessly adds the ability to handle Multiple Web Services in an array of processes located on one or more machines. In addition to the benefits mentioned above, this can also reduce the number of processes when large number of Web Services is required.
								</td>
							</tr>
							<tr>
								<td>
									Single
								</td>
								<td>
									Multiple
								</td>
								<td>
									Single or Multiple
								</td>
								<td>
									Single or Multiple
								</td>
								<td>
									In addition to all benefits mentioned above, this adds the ability to provide services on multiple ports without hooking a single Web Service to a Single Port.
								</td>
							</tr>
							<tr>
								<td>
									Multiple
								</td>
								<td>
									Single or Multiple
								</td>
								<td>
									Single or Multiple
								</td>
								<td>
									Single or Multiple
								</td>
								<td>
									In addition to all benefits mentioned above, this adds the ability to provide services using more then one Listener process and on more than one machine.
								</td>
							</tr>
						</table>
					</td>
				</tr>
				<tr>
					<td align="left">
						<strong>MSE</strong> is an application layer router. In general this means that it is a standard application running on a host, anticipating all incoming traffic on predefined ports, and after parsing the received data for some information, it routes the entire message to a predefined set of applications/processes based on some data found in the header of the incoming message. After the target application has processed the data and replied with some other data, <strong>MSE</strong> routes back the response to the sender of the request.
					</td>
				</tr>
				<tr>
					<td align="left">
						<strong>MSE</strong>, as an application layer router, supports the HTTP/SOAP as the application layer protocol. This means that when <strong>MSE</strong> is started, it starts listening on one or more preconfigured ports for incoming HTTP requests. Once a connection is established, <strong>MSE</strong> waits for the entire HTTP header to arrive. Based on the header that was received, <strong>MSE</strong> extracts 3 pieces of information:
						<ul>
							<li>The internal path to the web service name.</li>
							<li>The SOAPAction – if it exists.</li>
							<li>The entire message length.</li>
						</ul>
						Once this information is extracted, <strong>MSE</strong> waits for the entire message to arrive. Once it has all the data, <strong>MSE</strong> forwards the entire message to one or more processes based preconfigured rules for the routing. When response(s) from application(s) arrive, <strong>MSE</strong> chooses the most appropriate response (will be discussed later) and it forwards it back to the sender. In order to handle all HTTP/SOAP parsing and services invocations, <strong>MSE</strong> uses the <a href="http://www.cs.fsu.edu/~engelen/soap.html">gSoap</a> toolkit. This means <strong>MSE</strong> will integrate seamlessly into environments that use <a href="http://www.cs.fsu.edu/~engelen/soap.html">gSoap</a> as their platform for handling Web Services Requests, provided that the web services are compiled as DLLs and not as EXECUTABLES. For all other cases, <strong>MSE</strong> handles all TCP/IP interface and all routing/load balancing, but the final applications, will have to handle the Web Service invocation, handing over the data forwarded by <strong>MSE</strong>, and handing over to <strong>MSE</strong> the response from the Web Service function.
					</td>
				</tr>
				<tr>
					<td align="left">
						<h2 style="text-align: center; text-decoration: underline; color: green;">
							Architecture</h2>
						<strong>MSE</strong> runtime environment comprises of 3 processes at the minimum:
						<ul>
							<li><a href="MultiXTpm%20Application%20Server.htm" title="Click here for a description of MultiXTpm Application Server">MultiXTpm</a> – Application Server, Router, load balancer.</li>
							<li><strong>MultiXWSFE</strong> – Front End process.</li>
							<li><strong>MultiXWSServer</strong> – Web services dispatcher. </li>
						</ul>
					</td>
				</tr>
				<tr>
					<td align="left">
						<h2 style="text-align: center; text-decoration: underline; color: green;">
							MultiXWSFE</h2>
						This process acts as a Listener/Transport handler. It is responsible for the actual communication with HTTP/SOAP client. When a new connection is established, it creates a new session object, it waits for incoming HTTP/SOAP messages and when a full message is received, it is forwarded to <a href="MultiXTpm%20Application%20Server.htm" title="Click here for a description of MultiXTpm Application Server">MultiXTpm</a> process (in the context of the session created earlier) with a special indication of the SOAPAction and the internal logical path of the Web Service application. <a href="MultiXTpm%20Application%20Server.htm" title="Click here for a description of MultiXTpm Application Server">MultiXTpm</a> in turn forwards the request to the appropriate process for the actual processing of the request. When a response comes from the Web Service application, it is forwarded back to the client. The connection is kept open, waiting for the next request, or disconnect from the client or an idle timer expires in which case the connection is aborted. This process is multithreaded and all communication activities are in NOWAIT manner, so it does not block on any call, so it can theoretically process unlimited number of connections simultaneously. This process can have more then one instance where each instance can manage a different range of ports. All instances can run on a single machine or can be divided between multiple machines.<br />
						Since <strong>MultiXWSFE</strong>handles all communications with Web Services Clients, it provides
						two security related features to the system. SSL Support and HTTP Basic Authentication.<br />
						<br />
						<strong><span style="text-decoration: underline">SSL Support</span></strong><br />
						SSL Support is provided by <a href="MultiXTpm%20Application%20Server.htm" title="Click here for a description of MultiXTpm Application Server">
							MultiXTpm</a> thru configuration of the
						Link objects. Since all connectivity to the Clients is done thru <strong>MultiXWSFE</strong> Links,
						this means that SSL related issues start and end in <strong>MultiXWSFE</strong>. When a new SSL connection
						is established with the Client, <strong>MultiXWSFE</strong> handles all the handshake and certificates
						exchange if required and moves on to the data transfer phase. When requests are
						forwarded from <strong>MultiXWSFE</strong> to <a href="MultiXTpm%20Application%20Server.htm"
							title="Click here for a description of MultiXTpm Application Server">MultiXTpm</a>,
						they are forwarded as clear text, after
						being decoded by MultiXWSFE. When the requests propagate to the gSoap Web Service
						DLL, they get there in clear text, which means that no SSL support is required by
						the gSoap compiled units. A Developer should compile all source code without the
						"WITH_OPENSSL" define, the decision whether to use SSL or not is done thru configuration
						at runtime and not at compile time. Even more, the implementer may decide to require
						SSL per a group of web services, per specific web service DLL and if configured
						correctly, on function by function basis within a Web Service DLL. The most evident
						implication of this architecture is the ability to separate the Front End Process
						from the gSoap DLLs and put these processes on different machines, so SSL processing
						does not consume resources meant to be used by the applications themselves. To get
						more information on how to use SSL in <a href="MultiXTpm%20Application%20Server.htm" title="Click here for a description of MultiXTpm Application Server">
							MultiXTpm</a> environment,
						please look at <a href="SSL_Support.htm">SSL_Support.htm</a> located at <strong><span
							style="text-decoration: underline">MultiXTpm Application Server</span></strong>
						directory.<br />
						<br />
						<strong><span style="text-decoration: underline">HTTP Basic Authentication</span></strong><br />
						When <strong>MultiXWSFE</strong> receives the full SOAP message from the Web Service Client, it enables
						the application level code to check for user name and password, and if required,
						the application level code can request MultiX API to challenge the Client to send
						the user name and password. If a developer wishes to implement Authentication and
						Authorization in one centralized place, rather than in each Web Service DLL, Modifying
						the <strong>MultiXWSFE</strong> code is the best way to do it. Just go to the source file "MultiXWSFEServerLink.cpp"
						locate the function "CMultiXWSFEServerLink::IsAuthenticated()" and modify it to
						support whatever authentication and authorization mechanisms you choose.</td>
				</tr>
				<tr>
					<td align="left">
						<h2 style="text-align: center; text-decoration: underline; color: green;">
							<a href="MultiXTpm%20Application%20Server.htm" title="Click here for a description of MultiXTpm Application Server">MultiXTpm</a></h2>
						This is the main process within this architecture. When it starts, it reads a preconfigured XML file where all configuration data is stored in. Among other things, it starts the first instances of the other processes. When the other processes are started, it provides them with some configuration data, specifically, it provides <strong>MultiXWSFE</strong> the information about the TCP/IP ports to listen on for incoming HTTP/SOAP requests. <a href="MultiXTpm%20Application%20Server.htm" title="Click here for a description of MultiXTpm Application Server">MultiXTpm</a>'s main responsibilities are:
						<ul>
							<li>Monitor the other processes for unexpected termination. When it realizes that one of the processes has terminated, it restarts it if it is configured to do so.</li>
							<li>When a new request arrives from <strong>MultiXWSFE</strong>, it routes the request to one or more processes for handling the request.</li>
							<li>Monitor the queues for the Web Services Applications. Based on configuration data, <a href="MultiXTpm%20Application%20Server.htm" title="Click here for a description of MultiXTpm Application Server">MultiXTpm</a> maintains a queue for each Web Service Application process</li>
							<li>Receiving a response from Web Service Application processes and forward the responses back to <strong>MultiXWSFE</strong>. </li>
						</ul>
						When forwarding a request to a Web Services Application process, <a href="MultiXTpm%20Application%20Server.htm" title="Click here for a description of MultiXTpm Application Server">MultiXTpm</a> accompanies the raw data with information regarding the DLL to use and which function to call for the specific request. The DLL and function to call are configured separately from web service URL and the SOAPAction.
					</td>
				</tr>
				<tr>
					<td align="left">
						<h2 style="text-align: center; text-decoration: underline; color: green;">
							MultiXWSServer</h2>
						This process is actually the Web Services Application. It's main function is to receive requests from <a href="MultiXTpm%20Application%20Server.htm" title="Click here for a description of MultiXTpm Application Server">MultiXTpm</a> or from <strong>MultiXWSFE</strong> directly, load the appropriate user specified DLL and call the user specified function for that specific call. This process can have one or more instances running at the same time and it can run on a single or multiple machines. The number and the location of the processes is determined by <a href="MultiXTpm%20Application%20Server.htm" title="Click here for a description of MultiXTpm Application Server">MultiXTpm</a> based on predefined configuration.
					</td>
				</tr>
				<tr>
					<td align="center">
						<img width="594" height="352" src="image001.gif"></td>
				</tr>
				<tr>
					<td align="left">
						Figure 1 above illustrates the structure of <strong>MultiXTpm gSoap Enhancer</strong> and the data flow. Each web service call passes thru few phases starting from connection establishment and ending with the connection closing. Between these two phases the Client is said to be "in a session". Following is a brief description of the various phases.
					</td>
				</tr>
				<tr>
					<td align="left">
						<ol>
							<li>The client sends its HTTP request.</li>
							<li><strong>MultiXWSFE</strong> Processes the HTTP header and receives the entire message.</li>
							<li>The message is forwarded in its entirety with additional information regarding the Web Service URL and the SOAPAction if exists. If the request is the first one in the session, it is forwarded to <a href="MultiXTpm%20Application%20Server.htm" title="Click here for a description of MultiXTpm Application Server">MultiXTpm</a>, otherwise it is forwarded directly to the <strong>MultiXWSServer</strong> (3S) that was previously elected by <a href="MultiXTpm%20Application%20Server.htm" title="Click here for a description of MultiXTpm Application Server">MultiXTpm</a> on the first call.</li>
							<li><a href="MultiXTpm%20Application%20Server.htm" title="Click here for a description of MultiXTpm Application Server">MultiXTpm</a>, upon receiving the new request, searches its local configuration data for an entry matching the URL and the SOAPAction, it does not scan the message AT ALL. If it finds such an entry, it elects the appropriate <strong>MultiXWSServer</strong> process and queues the message for a later forwarding to that processes. The new message includes the original data plus two preconfigured fields: the DLL to load and the Function to call.</li>
							<li>If the queue for that process is empty or its size is below a preconfigured maximum, the message is forwarded immediately to the process.</li>
							<li>Upon receiving the request, <strong>MultiXWSServer</strong> tries to load the DLL specified by <a href="MultiXTpm%20Application%20Server.htm" title="Click here for a description of MultiXTpm Application Server">MultiXTpm</a>, if it does not find it or the function is not found in the DLL, an error reply is sent, otherwise, the function is called.</li>
							<li>While the Web Service function is executing, no other Web Service call can be processed by this instance of <strong>MultiXWSServer</strong>, concurrency is achieved by using multiple processes in a distributed environment.</li>
							<li>When the Web Service function returns, <strong>MultiXWSServer</strong> packs the response and forwards it back to the process it received the request from. See (3) (3S). If the request was received directly from <strong>MultiXWSFE</strong>, the response is sent directly to it (8S).</li>
							<li>When <a href="MultiXTpm%20Application%20Server.htm" title="Click here for a description of MultiXTpm Application Server">MultiXTpm</a> receives the response, it checks it's configuration to see if that response should be ignored, if not so, it forwards it to the sender of the request. Once a response is sent to the sender, all future responses for that request (in case of multiple recipients) are ignored.</li>
							<li>The response is forwarded back to the <strong>MultiXWSFE</strong> process who originally received it from the client.</li>
							<li>When the response from <a href="MultiXTpm%20Application%20Server.htm" title="Click here for a description of MultiXTpm Application Server">MultiXTpm</a> or <strong>MultiXWSServer</strong> is received, <strong>MultiXWSFE</strong> checks that the connection with the client is still valid and if so, it forwards the response.</li>
							<li>The response is sent to the Web Service client. At that point the client may elect to close the connection and as a result, <strong>MultiXWSFE</strong> will delete the session object. If the connection is not closed, <strong>MultiXWSFE</strong> will use the same session object for handling future requests. </li>
						</ol>
					</td>
				</tr>
				<tr>
					<td align="left">
						<h2 style="text-align: center; text-decoration: underline; color: green;">
							gSoap sample DLLs</h2>
						<strong>MSE</strong> includes 3 smaples to show how to to compile and use gSoap modules.<br />
						<ol>
							<li><strong>gSoapCalculator</strong> - This is a simple DLL with the basic operation.</li>
							<li><strong>gSoapDimeServer</strong> - This DLL is based on the "dimeserver" sample
								that is included with the gSoap distribution. The only difference is that it is
								compiled as a DLL and not as an executable.</li>
							<li><strong>gSoapEchoServer and gSoapEchoClient</strong> - An executable and a Server
								DLL that demonstrate a simple use of gSoap and MultiXTpm.</li>
						</ol>
						<p>
						</p>
							<p>
								One important thin to notice in these examples is that all code to handle sockets
								and threads is totaly eliminated.</p>
						<p>
							&nbsp;</p>
					</td>
				</tr>
				<tr>
					<td align="left">
						<h2 style="text-align: center; text-decoration: underline; color: green;">
							HTTP/SOAP Requests Handling</h2>
						As mentioned before, <strong>MSE</strong> uses <a href="http://www.cs.fsu.edu/~engelen/soap.html">gSoap</a> toolkit for parsing the SOAP header in <strong>MultiXWSFE</strong> and it assumes <a href="http://www.cs.fsu.edu/~engelen/soap.html">gSoap</a> based DLLs when calling the Web Service functions. This means that the DLLs provided by the developer should be based on <a href="http://www.cs.fsu.edu/~engelen/soap.html">gSoap</a> and that all <a href="http://www.cs.fsu.edu/~engelen/soap.html">gSoap</a> code should be included in the DLL. <strong>MultiXWSServer</strong> uses some <a href="http://www.cs.fsu.edu/~engelen/soap.html">gSoap</a> functions to initialize the "soap" structure and it assumes that the DLLs provided include these functions. The reason it is done this way, to avoid problems that could arise by using different versions of <a href="http://www.cs.fsu.edu/~engelen/soap.html">gSoap</a>. It is advisable to compile the DLLs using the same <a href="http://www.cs.fsu.edu/~engelen/soap.html">gSoap</a> version that is used when compiling <strong>MultiXWSFE</strong> and <strong>MultiXWSServer</strong>.
					</td>
				</tr>
				<tr>
					<td align="left">
						<h2 style="text-align: center; text-decoration: underline; color: green;">
							Download information</h2>
						<strong>MultiXTpm Application Server</strong> is free software; you can redistribute
						it and/or modify it under the terms of the <a href="http://www.gnu.org/copyleft/gpl.html">
							GNU General Public License</a> as published by the Free Software Foundation; either
						version 2 of the License, or (at your option) any later version.<br />
						<br />
						<strong>MultiXTpm Application Server</strong> is distributed in source code format
						and it supports: Windows OS, Linux, Solaris and HP Nonstop Server OSS.<br />
						<br />
						The source code is packed in ZIP file and can be downloaded from SourceForge.net.<br />
						<br />
						To Access the <a href="http://sourceforge.net/project/showfiles.php?group_id=196021"
							onclick="javascript:urchinTracker('/outgoing/DownloadPage');">Download Page</a>
						at SourceForge.net you may click <a href="http://sourceforge.net/project/showfiles.php?group_id=196021"
							onclick="javascript:urchinTracker('/outgoing/DownloadPage');">Here</a><br />
						or
						<br />
						Navigate to <a href="http://sourceforge.net/projects/multixtpm" onclick="javascript:urchinTracker('/outgoing/ProjectPage');">
							http://sourceforge.net/projects/multixtpm</a>
						<br />
					</td>
				</tr>
				<tr>
					<td align="left">
						<h2 style="text-align: center; text-decoration: underline; color: green;">
							Contact information</h2>
						For more information, Bug Reports, Feature Requests, and Support Requests, please
						use:
						<br />
						<a href="http://sourceforge.net/tracker/?group_id=196021" onclick="javascript:urchinTracker('/outgoing/TrackerPage');">
							SourceForge.net tracker</a>
						<br />
						or
						<br />
						<a href="http://sourceforge.net/forum/?group_id=196021" onclick="javascript:urchinTracker('/outgoing/ForumPage');">
							SourceForge.net Project Forums</a>
						<br />
						or
						<br />
						<a href="http://tech.groups.yahoo.com/group/multixtpm/" onclick="javascript:urchinTracker('/outgoing/YahooGroup');">
							MultiXTpm group at Yahoo Groups.</a>
						<br />
						or
						<br />
						you may send an email to: <a href="mailto:multixtpm@mitug.co.il" onclick="javascript:urchinTracker('/outgoing/Email');">
							Moshe Shitrit</a>
					</td>
				</tr>
				<tr>
					<td align="center">
						<a href="/">Home</a>
					</td>
				</tr>
			</table>
		</div>
	</font>

	<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
	</script>

	<script type="text/javascript">
	if(window.location.hostname	==	"www.mitug.co.il")
		_uacct = "UA-2084378-1";
	else
		_uacct = "UA-2084437-1";
urchinTracker();
	</script>

</body>
</html>
