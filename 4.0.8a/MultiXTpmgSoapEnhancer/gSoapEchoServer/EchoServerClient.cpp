/* EchoServerClient.cpp
   Generated by gSOAP 2.7.9l from EchoServer.h
   Copyright(C) 2000-2007, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "EchoServerH.h"

SOAP_SOURCE_STAMP("@(#) EchoServerClient.cpp ver 2.7.9l 2008-02-05 11:57:21 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_EchoServer__ToUpper(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string S, std::string &Result)
{	struct EchoServer__ToUpper soap_tmp_EchoServer__ToUpper;
	struct EchoServer__ToUpperResponse *soap_tmp_EchoServer__ToUpperResponse;
	soap->encodingStyle = NULL;
	soap_tmp_EchoServer__ToUpper.S = S;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_EchoServer__ToUpper(soap, &soap_tmp_EchoServer__ToUpper);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_EchoServer__ToUpper(soap, &soap_tmp_EchoServer__ToUpper, "EchoServer:ToUpper", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_EchoServer__ToUpper(soap, &soap_tmp_EchoServer__ToUpper, "EchoServer:ToUpper", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_xsd__string(soap, &Result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_EchoServer__ToUpperResponse = soap_get_EchoServer__ToUpperResponse(soap, NULL, "EchoServer:ToUpperResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	Result = soap_tmp_EchoServer__ToUpperResponse->Result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_EchoServer__ToLower(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string S, std::string &Result)
{	struct EchoServer__ToLower soap_tmp_EchoServer__ToLower;
	struct EchoServer__ToLowerResponse *soap_tmp_EchoServer__ToLowerResponse;
	soap->encodingStyle = NULL;
	soap_tmp_EchoServer__ToLower.S = S;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_EchoServer__ToLower(soap, &soap_tmp_EchoServer__ToLower);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_EchoServer__ToLower(soap, &soap_tmp_EchoServer__ToLower, "EchoServer:ToLower", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_EchoServer__ToLower(soap, &soap_tmp_EchoServer__ToLower, "EchoServer:ToLower", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_xsd__string(soap, &Result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_EchoServer__ToLowerResponse = soap_get_EchoServer__ToLowerResponse(soap, NULL, "EchoServer:ToLowerResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	Result = soap_tmp_EchoServer__ToLowerResponse->Result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_EchoServer__Echo(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string S, std::string &Result)
{	struct EchoServer__Echo soap_tmp_EchoServer__Echo;
	struct EchoServer__EchoResponse *soap_tmp_EchoServer__EchoResponse;
	soap->encodingStyle = NULL;
	soap_tmp_EchoServer__Echo.S = S;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_EchoServer__Echo(soap, &soap_tmp_EchoServer__Echo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_EchoServer__Echo(soap, &soap_tmp_EchoServer__Echo, "EchoServer:Echo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_EchoServer__Echo(soap, &soap_tmp_EchoServer__Echo, "EchoServer:Echo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_xsd__string(soap, &Result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_EchoServer__EchoResponse = soap_get_EchoServer__EchoResponse(soap, NULL, "EchoServer:EchoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	Result = soap_tmp_EchoServer__EchoResponse->Result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_EchoServer__EchoWithSessionData(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string S, std::string &Result)
{	struct EchoServer__EchoWithSessionData soap_tmp_EchoServer__EchoWithSessionData;
	struct EchoServer__EchoWithSessionDataResponse *soap_tmp_EchoServer__EchoWithSessionDataResponse;
	soap->encodingStyle = NULL;
	soap_tmp_EchoServer__EchoWithSessionData.S = S;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_EchoServer__EchoWithSessionData(soap, &soap_tmp_EchoServer__EchoWithSessionData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_EchoServer__EchoWithSessionData(soap, &soap_tmp_EchoServer__EchoWithSessionData, "EchoServer:EchoWithSessionData", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_EchoServer__EchoWithSessionData(soap, &soap_tmp_EchoServer__EchoWithSessionData, "EchoServer:EchoWithSessionData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_xsd__string(soap, &Result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_EchoServer__EchoWithSessionDataResponse = soap_get_EchoServer__EchoWithSessionDataResponse(soap, NULL, "EchoServer:EchoWithSessionDataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	Result = soap_tmp_EchoServer__EchoWithSessionDataResponse->Result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_EchoServer__EchoWithApplicationData(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string S, std::string &Result)
{	struct EchoServer__EchoWithApplicationData soap_tmp_EchoServer__EchoWithApplicationData;
	struct EchoServer__EchoWithApplicationDataResponse *soap_tmp_EchoServer__EchoWithApplicationDataResponse;
	soap->encodingStyle = NULL;
	soap_tmp_EchoServer__EchoWithApplicationData.S = S;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_EchoServer__EchoWithApplicationData(soap, &soap_tmp_EchoServer__EchoWithApplicationData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_EchoServer__EchoWithApplicationData(soap, &soap_tmp_EchoServer__EchoWithApplicationData, "EchoServer:EchoWithApplicationData", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_EchoServer__EchoWithApplicationData(soap, &soap_tmp_EchoServer__EchoWithApplicationData, "EchoServer:EchoWithApplicationData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_xsd__string(soap, &Result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_EchoServer__EchoWithApplicationDataResponse = soap_get_EchoServer__EchoWithApplicationDataResponse(soap, NULL, "EchoServer:EchoWithApplicationDataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	Result = soap_tmp_EchoServer__EchoWithApplicationDataResponse->Result;
	return soap_closesock(soap);
}

/* End of EchoServerClient.cpp */
