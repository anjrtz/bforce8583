/* gSoapISO8583WSC.cpp
   Generated by gSOAP 2.7.10 from gSoapISO8583WSwsdl.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "gSoapISO8583WSH.h"

SOAP_SOURCE_STAMP("@(#) gSoapISO8583WSC.cpp ver 2.7.10 2008-06-25 16:15:54 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ISO8583WS__TValueType:
		return soap_in_ISO8583WS__TValueType(soap, NULL, NULL, "ISO8583WS:TValueType");
	case SOAP_TYPE_ISO8583WS__TValidationError:
		return soap_in_ISO8583WS__TValidationError(soap, NULL, NULL, "ISO8583WS:TValidationError");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ISO8583WS__ISO8583Field:
		return soap_in_ISO8583WS__ISO8583Field(soap, NULL, NULL, "ISO8583WS:ISO8583Field");
	case SOAP_TYPE_ISO8583WS__ArrayOfISO8583Field:
		return soap_in_ISO8583WS__ArrayOfISO8583Field(soap, NULL, NULL, "ISO8583WS:ArrayOfISO8583Field");
	case SOAP_TYPE_ISO8583WS__Bin:
		return soap_in_ISO8583WS__Bin(soap, NULL, NULL, "ISO8583WS:Bin");
	case SOAP_TYPE_ISO8583WS__ArrayOfBin:
		return soap_in_ISO8583WS__ArrayOfBin(soap, NULL, NULL, "ISO8583WS:ArrayOfBin");
	case SOAP_TYPE_ISO8583WS__Num:
		return soap_in_ISO8583WS__Num(soap, NULL, NULL, "ISO8583WS:Num");
	case SOAP_TYPE_ISO8583WS__ArrayOfNum:
		return soap_in_ISO8583WS__ArrayOfNum(soap, NULL, NULL, "ISO8583WS:ArrayOfNum");
	case SOAP_TYPE_ISO8583WS__AlNum:
		return soap_in_ISO8583WS__AlNum(soap, NULL, NULL, "ISO8583WS:AlNum");
	case SOAP_TYPE_ISO8583WS__ArrayOfAlNum:
		return soap_in_ISO8583WS__ArrayOfAlNum(soap, NULL, NULL, "ISO8583WS:ArrayOfAlNum");
	case SOAP_TYPE_ISO8583WS__CISO8583Msg:
		return soap_in_ISO8583WS__CISO8583Msg(soap, NULL, NULL, "ISO8583WS:CISO8583Msg");
	case SOAP_TYPE_ISO8583WS__ArrayOfCISO8583Msg:
		return soap_in_ISO8583WS__ArrayOfCISO8583Msg(soap, NULL, NULL, "ISO8583WS:ArrayOfCISO8583Msg");
	case SOAP_TYPE_xsd__hexBinary:
		return soap_in_xsd__hexBinary(soap, NULL, NULL, "xsd:hexBinary");
	case SOAP_TYPE_PointerTo_ISO8583WS__ISO8583RequestResponse:
		return soap_in_PointerTo_ISO8583WS__ISO8583RequestResponse(soap, NULL, NULL, "ISO8583WS:ISO8583RequestResponse");
	case SOAP_TYPE_PointerTo_ISO8583WS__ISO8583Request:
		return soap_in_PointerTo_ISO8583WS__ISO8583Request(soap, NULL, NULL, "ISO8583WS:ISO8583Request");
	case SOAP_TYPE_PointerToISO8583WS__ArrayOfCISO8583Msg:
		return soap_in_PointerToISO8583WS__ArrayOfCISO8583Msg(soap, NULL, NULL, "ISO8583WS:ArrayOfCISO8583Msg");
	case SOAP_TYPE_PointerToISO8583WS__ISO8583Field:
		return soap_in_PointerToISO8583WS__ISO8583Field(soap, NULL, NULL, "ISO8583WS:ISO8583Field");
	case SOAP_TYPE_PointerToxsd__hexBinary:
		return soap_in_PointerToxsd__hexBinary(soap, NULL, NULL, "xsd:hexBinary");
	case SOAP_TYPE_PointerToISO8583WS__Bin:
		return soap_in_PointerToISO8583WS__Bin(soap, NULL, NULL, "ISO8583WS:Bin");
	case SOAP_TYPE_PointerToISO8583WS__Num:
		return soap_in_PointerToISO8583WS__Num(soap, NULL, NULL, "ISO8583WS:Num");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerToISO8583WS__AlNum:
		return soap_in_PointerToISO8583WS__AlNum(soap, NULL, NULL, "ISO8583WS:AlNum");
	case SOAP_TYPE_PointerToISO8583WS__ArrayOfISO8583Field:
		return soap_in_PointerToISO8583WS__ArrayOfISO8583Field(soap, NULL, NULL, "ISO8583WS:ArrayOfISO8583Field");
	case SOAP_TYPE_PointerToISO8583WS__ArrayOfBin:
		return soap_in_PointerToISO8583WS__ArrayOfBin(soap, NULL, NULL, "ISO8583WS:ArrayOfBin");
	case SOAP_TYPE_PointerToISO8583WS__ArrayOfNum:
		return soap_in_PointerToISO8583WS__ArrayOfNum(soap, NULL, NULL, "ISO8583WS:ArrayOfNum");
	case SOAP_TYPE_PointerToISO8583WS__ArrayOfAlNum:
		return soap_in_PointerToISO8583WS__ArrayOfAlNum(soap, NULL, NULL, "ISO8583WS:ArrayOfAlNum");
	case SOAP_TYPE_PointerToISO8583WS__CISO8583Msg:
		return soap_in_PointerToISO8583WS__CISO8583Msg(soap, NULL, NULL, "ISO8583WS:CISO8583Msg");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ISO8583WS:ISO8583Field"))
		{	*type = SOAP_TYPE_ISO8583WS__ISO8583Field;
			return soap_in_ISO8583WS__ISO8583Field(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ISO8583WS:ArrayOfISO8583Field"))
		{	*type = SOAP_TYPE_ISO8583WS__ArrayOfISO8583Field;
			return soap_in_ISO8583WS__ArrayOfISO8583Field(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ISO8583WS:Bin"))
		{	*type = SOAP_TYPE_ISO8583WS__Bin;
			return soap_in_ISO8583WS__Bin(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ISO8583WS:ArrayOfBin"))
		{	*type = SOAP_TYPE_ISO8583WS__ArrayOfBin;
			return soap_in_ISO8583WS__ArrayOfBin(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ISO8583WS:Num"))
		{	*type = SOAP_TYPE_ISO8583WS__Num;
			return soap_in_ISO8583WS__Num(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ISO8583WS:ArrayOfNum"))
		{	*type = SOAP_TYPE_ISO8583WS__ArrayOfNum;
			return soap_in_ISO8583WS__ArrayOfNum(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ISO8583WS:AlNum"))
		{	*type = SOAP_TYPE_ISO8583WS__AlNum;
			return soap_in_ISO8583WS__AlNum(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ISO8583WS:ArrayOfAlNum"))
		{	*type = SOAP_TYPE_ISO8583WS__ArrayOfAlNum;
			return soap_in_ISO8583WS__ArrayOfAlNum(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ISO8583WS:CISO8583Msg"))
		{	*type = SOAP_TYPE_ISO8583WS__CISO8583Msg;
			return soap_in_ISO8583WS__CISO8583Msg(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ISO8583WS:ArrayOfCISO8583Msg"))
		{	*type = SOAP_TYPE_ISO8583WS__ArrayOfCISO8583Msg;
			return soap_in_ISO8583WS__ArrayOfCISO8583Msg(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:hexBinary"))
		{	*type = SOAP_TYPE_xsd__hexBinary;
			return soap_in_xsd__hexBinary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ISO8583WS:TValueType"))
		{	*type = SOAP_TYPE_ISO8583WS__TValueType;
			return soap_in_ISO8583WS__TValueType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ISO8583WS:TValidationError"))
		{	*type = SOAP_TYPE_ISO8583WS__TValidationError;
			return soap_in_ISO8583WS__TValidationError(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ISO8583WS:ISO8583RequestResponse"))
		{	*type = SOAP_TYPE__ISO8583WS__ISO8583RequestResponse;
			return soap_in__ISO8583WS__ISO8583RequestResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ISO8583WS:ISO8583Request"))
		{	*type = SOAP_TYPE__ISO8583WS__ISO8583Request;
			return soap_in__ISO8583WS__ISO8583Request(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_ISO8583WS__TValueType:
		return soap_out_ISO8583WS__TValueType(soap, tag, id, (const enum ISO8583WS__TValueType *)ptr, "ISO8583WS:TValueType");
	case SOAP_TYPE_ISO8583WS__TValidationError:
		return soap_out_ISO8583WS__TValidationError(soap, tag, id, (const enum ISO8583WS__TValidationError *)ptr, "ISO8583WS:TValidationError");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__ISO8583WS__ISO8583RequestResponse:
		return ((_ISO8583WS__ISO8583RequestResponse *)ptr)->soap_out(soap, "ISO8583WS:ISO8583RequestResponse", id, NULL);
	case SOAP_TYPE__ISO8583WS__ISO8583Request:
		return ((_ISO8583WS__ISO8583Request *)ptr)->soap_out(soap, "ISO8583WS:ISO8583Request", id, NULL);
	case SOAP_TYPE_ISO8583WS__ISO8583Field:
		return ((ISO8583WS__ISO8583Field *)ptr)->soap_out(soap, tag, id, "ISO8583WS:ISO8583Field");
	case SOAP_TYPE_ISO8583WS__ArrayOfISO8583Field:
		return ((ISO8583WS__ArrayOfISO8583Field *)ptr)->soap_out(soap, tag, id, "ISO8583WS:ArrayOfISO8583Field");
	case SOAP_TYPE_ISO8583WS__Bin:
		return ((ISO8583WS__Bin *)ptr)->soap_out(soap, tag, id, "ISO8583WS:Bin");
	case SOAP_TYPE_ISO8583WS__ArrayOfBin:
		return ((ISO8583WS__ArrayOfBin *)ptr)->soap_out(soap, tag, id, "ISO8583WS:ArrayOfBin");
	case SOAP_TYPE_ISO8583WS__Num:
		return ((ISO8583WS__Num *)ptr)->soap_out(soap, tag, id, "ISO8583WS:Num");
	case SOAP_TYPE_ISO8583WS__ArrayOfNum:
		return ((ISO8583WS__ArrayOfNum *)ptr)->soap_out(soap, tag, id, "ISO8583WS:ArrayOfNum");
	case SOAP_TYPE_ISO8583WS__AlNum:
		return ((ISO8583WS__AlNum *)ptr)->soap_out(soap, tag, id, "ISO8583WS:AlNum");
	case SOAP_TYPE_ISO8583WS__ArrayOfAlNum:
		return ((ISO8583WS__ArrayOfAlNum *)ptr)->soap_out(soap, tag, id, "ISO8583WS:ArrayOfAlNum");
	case SOAP_TYPE_ISO8583WS__CISO8583Msg:
		return ((ISO8583WS__CISO8583Msg *)ptr)->soap_out(soap, tag, id, "ISO8583WS:CISO8583Msg");
	case SOAP_TYPE_ISO8583WS__ArrayOfCISO8583Msg:
		return ((ISO8583WS__ArrayOfCISO8583Msg *)ptr)->soap_out(soap, tag, id, "ISO8583WS:ArrayOfCISO8583Msg");
	case SOAP_TYPE_xsd__hexBinary:
		return ((xsd__hexBinary *)ptr)->soap_out(soap, tag, id, "xsd:hexBinary");
	case SOAP_TYPE_PointerTo_ISO8583WS__ISO8583RequestResponse:
		return soap_out_PointerTo_ISO8583WS__ISO8583RequestResponse(soap, tag, id, (_ISO8583WS__ISO8583RequestResponse *const*)ptr, "ISO8583WS:ISO8583RequestResponse");
	case SOAP_TYPE_PointerTo_ISO8583WS__ISO8583Request:
		return soap_out_PointerTo_ISO8583WS__ISO8583Request(soap, tag, id, (_ISO8583WS__ISO8583Request *const*)ptr, "ISO8583WS:ISO8583Request");
	case SOAP_TYPE_PointerToISO8583WS__ArrayOfCISO8583Msg:
		return soap_out_PointerToISO8583WS__ArrayOfCISO8583Msg(soap, tag, id, (ISO8583WS__ArrayOfCISO8583Msg *const*)ptr, "ISO8583WS:ArrayOfCISO8583Msg");
	case SOAP_TYPE_PointerToISO8583WS__ISO8583Field:
		return soap_out_PointerToISO8583WS__ISO8583Field(soap, tag, id, (ISO8583WS__ISO8583Field *const*)ptr, "ISO8583WS:ISO8583Field");
	case SOAP_TYPE_PointerToxsd__hexBinary:
		return soap_out_PointerToxsd__hexBinary(soap, tag, id, (xsd__hexBinary *const*)ptr, "xsd:hexBinary");
	case SOAP_TYPE_PointerToISO8583WS__Bin:
		return soap_out_PointerToISO8583WS__Bin(soap, tag, id, (ISO8583WS__Bin *const*)ptr, "ISO8583WS:Bin");
	case SOAP_TYPE_PointerToISO8583WS__Num:
		return soap_out_PointerToISO8583WS__Num(soap, tag, id, (ISO8583WS__Num *const*)ptr, "ISO8583WS:Num");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerToISO8583WS__AlNum:
		return soap_out_PointerToISO8583WS__AlNum(soap, tag, id, (ISO8583WS__AlNum *const*)ptr, "ISO8583WS:AlNum");
	case SOAP_TYPE_PointerToISO8583WS__ArrayOfISO8583Field:
		return soap_out_PointerToISO8583WS__ArrayOfISO8583Field(soap, tag, id, (ISO8583WS__ArrayOfISO8583Field *const*)ptr, "ISO8583WS:ArrayOfISO8583Field");
	case SOAP_TYPE_PointerToISO8583WS__ArrayOfBin:
		return soap_out_PointerToISO8583WS__ArrayOfBin(soap, tag, id, (ISO8583WS__ArrayOfBin *const*)ptr, "ISO8583WS:ArrayOfBin");
	case SOAP_TYPE_PointerToISO8583WS__ArrayOfNum:
		return soap_out_PointerToISO8583WS__ArrayOfNum(soap, tag, id, (ISO8583WS__ArrayOfNum *const*)ptr, "ISO8583WS:ArrayOfNum");
	case SOAP_TYPE_PointerToISO8583WS__ArrayOfAlNum:
		return soap_out_PointerToISO8583WS__ArrayOfAlNum(soap, tag, id, (ISO8583WS__ArrayOfAlNum *const*)ptr, "ISO8583WS:ArrayOfAlNum");
	case SOAP_TYPE_PointerToISO8583WS__CISO8583Msg:
		return soap_out_PointerToISO8583WS__CISO8583Msg(soap, tag, id, (ISO8583WS__CISO8583Msg *const*)ptr, "ISO8583WS:CISO8583Msg");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "xsd:QName", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__ISO8583WS__ISO8583RequestResponse:
		((_ISO8583WS__ISO8583RequestResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ISO8583WS__ISO8583Request:
		((_ISO8583WS__ISO8583Request *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ISO8583WS__ISO8583Field:
		((ISO8583WS__ISO8583Field *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ISO8583WS__ArrayOfISO8583Field:
		((ISO8583WS__ArrayOfISO8583Field *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ISO8583WS__Bin:
		((ISO8583WS__Bin *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ISO8583WS__ArrayOfBin:
		((ISO8583WS__ArrayOfBin *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ISO8583WS__Num:
		((ISO8583WS__Num *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ISO8583WS__ArrayOfNum:
		((ISO8583WS__ArrayOfNum *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ISO8583WS__AlNum:
		((ISO8583WS__AlNum *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ISO8583WS__ArrayOfAlNum:
		((ISO8583WS__ArrayOfAlNum *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ISO8583WS__CISO8583Msg:
		((ISO8583WS__CISO8583Msg *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ISO8583WS__ArrayOfCISO8583Msg:
		((ISO8583WS__ArrayOfCISO8583Msg *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__hexBinary:
		((xsd__hexBinary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ISO8583WS12__ISO8583Request:
		soap_serialize___ISO8583WS12__ISO8583Request(soap, (const struct __ISO8583WS12__ISO8583Request *)ptr);
		break;
	case SOAP_TYPE___ISO8583WS11__ISO8583Request:
		soap_serialize___ISO8583WS11__ISO8583Request(soap, (const struct __ISO8583WS11__ISO8583Request *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ISO8583WS__ISO8583RequestResponse:
		soap_serialize_PointerTo_ISO8583WS__ISO8583RequestResponse(soap, (_ISO8583WS__ISO8583RequestResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ISO8583WS__ISO8583Request:
		soap_serialize_PointerTo_ISO8583WS__ISO8583Request(soap, (_ISO8583WS__ISO8583Request *const*)ptr);
		break;
	case SOAP_TYPE_PointerToISO8583WS__ArrayOfCISO8583Msg:
		soap_serialize_PointerToISO8583WS__ArrayOfCISO8583Msg(soap, (ISO8583WS__ArrayOfCISO8583Msg *const*)ptr);
		break;
	case SOAP_TYPE_PointerToISO8583WS__ISO8583Field:
		soap_serialize_PointerToISO8583WS__ISO8583Field(soap, (ISO8583WS__ISO8583Field *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__hexBinary:
		soap_serialize_PointerToxsd__hexBinary(soap, (xsd__hexBinary *const*)ptr);
		break;
	case SOAP_TYPE_PointerToISO8583WS__Bin:
		soap_serialize_PointerToISO8583WS__Bin(soap, (ISO8583WS__Bin *const*)ptr);
		break;
	case SOAP_TYPE_PointerToISO8583WS__Num:
		soap_serialize_PointerToISO8583WS__Num(soap, (ISO8583WS__Num *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerToISO8583WS__AlNum:
		soap_serialize_PointerToISO8583WS__AlNum(soap, (ISO8583WS__AlNum *const*)ptr);
		break;
	case SOAP_TYPE_PointerToISO8583WS__ArrayOfISO8583Field:
		soap_serialize_PointerToISO8583WS__ArrayOfISO8583Field(soap, (ISO8583WS__ArrayOfISO8583Field *const*)ptr);
		break;
	case SOAP_TYPE_PointerToISO8583WS__ArrayOfBin:
		soap_serialize_PointerToISO8583WS__ArrayOfBin(soap, (ISO8583WS__ArrayOfBin *const*)ptr);
		break;
	case SOAP_TYPE_PointerToISO8583WS__ArrayOfNum:
		soap_serialize_PointerToISO8583WS__ArrayOfNum(soap, (ISO8583WS__ArrayOfNum *const*)ptr);
		break;
	case SOAP_TYPE_PointerToISO8583WS__ArrayOfAlNum:
		soap_serialize_PointerToISO8583WS__ArrayOfAlNum(soap, (ISO8583WS__ArrayOfAlNum *const*)ptr);
		break;
	case SOAP_TYPE_PointerToISO8583WS__CISO8583Msg:
		soap_serialize_PointerToISO8583WS__CISO8583Msg(soap, (ISO8583WS__CISO8583Msg *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_xsd__hexBinary:
		return (void*)soap_instantiate_xsd__hexBinary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ISO8583WS__ArrayOfCISO8583Msg:
		return (void*)soap_instantiate_ISO8583WS__ArrayOfCISO8583Msg(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ISO8583WS__CISO8583Msg:
		return (void*)soap_instantiate_ISO8583WS__CISO8583Msg(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ISO8583WS__ArrayOfAlNum:
		return (void*)soap_instantiate_ISO8583WS__ArrayOfAlNum(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ISO8583WS__AlNum:
		return (void*)soap_instantiate_ISO8583WS__AlNum(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ISO8583WS__ArrayOfNum:
		return (void*)soap_instantiate_ISO8583WS__ArrayOfNum(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ISO8583WS__Num:
		return (void*)soap_instantiate_ISO8583WS__Num(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ISO8583WS__ArrayOfBin:
		return (void*)soap_instantiate_ISO8583WS__ArrayOfBin(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ISO8583WS__Bin:
		return (void*)soap_instantiate_ISO8583WS__Bin(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ISO8583WS__ArrayOfISO8583Field:
		return (void*)soap_instantiate_ISO8583WS__ArrayOfISO8583Field(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ISO8583WS__ISO8583Field:
		return (void*)soap_instantiate_ISO8583WS__ISO8583Field(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ISO8583WS__ISO8583Request:
		return (void*)soap_instantiate__ISO8583WS__ISO8583Request(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ISO8583WS__ISO8583RequestResponse:
		return (void*)soap_instantiate__ISO8583WS__ISO8583RequestResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ISO8583WS11__ISO8583Request:
		return (void*)soap_instantiate___ISO8583WS11__ISO8583Request(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ISO8583WS12__ISO8583Request:
		return (void*)soap_instantiate___ISO8583WS12__ISO8583Request(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__ISO8583Field:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerToISO8583WS__ISO8583Field(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__Bin:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerToISO8583WS__Bin(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__Num:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerToISO8583WS__Num(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__AlNum:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerToISO8583WS__AlNum(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__CISO8583Msg:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerToISO8583WS__CISO8583Msg(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__hexBinary:
		if (p->size < 0)
			delete (xsd__hexBinary*)p->ptr;
		else
			delete[] (xsd__hexBinary*)p->ptr;
		break;
	case SOAP_TYPE_ISO8583WS__ArrayOfCISO8583Msg:
		if (p->size < 0)
			delete (ISO8583WS__ArrayOfCISO8583Msg*)p->ptr;
		else
			delete[] (ISO8583WS__ArrayOfCISO8583Msg*)p->ptr;
		break;
	case SOAP_TYPE_ISO8583WS__CISO8583Msg:
		if (p->size < 0)
			delete (ISO8583WS__CISO8583Msg*)p->ptr;
		else
			delete[] (ISO8583WS__CISO8583Msg*)p->ptr;
		break;
	case SOAP_TYPE_ISO8583WS__ArrayOfAlNum:
		if (p->size < 0)
			delete (ISO8583WS__ArrayOfAlNum*)p->ptr;
		else
			delete[] (ISO8583WS__ArrayOfAlNum*)p->ptr;
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_ISO8583WS__AlNum:
		if (p->size < 0)
			delete (ISO8583WS__AlNum*)p->ptr;
		else
			delete[] (ISO8583WS__AlNum*)p->ptr;
		break;
	case SOAP_TYPE_ISO8583WS__ArrayOfNum:
		if (p->size < 0)
			delete (ISO8583WS__ArrayOfNum*)p->ptr;
		else
			delete[] (ISO8583WS__ArrayOfNum*)p->ptr;
		break;
	case SOAP_TYPE_ISO8583WS__Num:
		if (p->size < 0)
			delete (ISO8583WS__Num*)p->ptr;
		else
			delete[] (ISO8583WS__Num*)p->ptr;
		break;
	case SOAP_TYPE_ISO8583WS__ArrayOfBin:
		if (p->size < 0)
			delete (ISO8583WS__ArrayOfBin*)p->ptr;
		else
			delete[] (ISO8583WS__ArrayOfBin*)p->ptr;
		break;
	case SOAP_TYPE_ISO8583WS__Bin:
		if (p->size < 0)
			delete (ISO8583WS__Bin*)p->ptr;
		else
			delete[] (ISO8583WS__Bin*)p->ptr;
		break;
	case SOAP_TYPE_ISO8583WS__ArrayOfISO8583Field:
		if (p->size < 0)
			delete (ISO8583WS__ArrayOfISO8583Field*)p->ptr;
		else
			delete[] (ISO8583WS__ArrayOfISO8583Field*)p->ptr;
		break;
	case SOAP_TYPE_ISO8583WS__ISO8583Field:
		if (p->size < 0)
			delete (ISO8583WS__ISO8583Field*)p->ptr;
		else
			delete[] (ISO8583WS__ISO8583Field*)p->ptr;
		break;
	case SOAP_TYPE__ISO8583WS__ISO8583Request:
		if (p->size < 0)
			delete (_ISO8583WS__ISO8583Request*)p->ptr;
		else
			delete[] (_ISO8583WS__ISO8583Request*)p->ptr;
		break;
	case SOAP_TYPE__ISO8583WS__ISO8583RequestResponse:
		if (p->size < 0)
			delete (_ISO8583WS__ISO8583RequestResponse*)p->ptr;
		else
			delete[] (_ISO8583WS__ISO8583RequestResponse*)p->ptr;
		break;
	case SOAP_TYPE___ISO8583WS11__ISO8583Request:
		if (p->size < 0)
			delete (struct __ISO8583WS11__ISO8583Request*)p->ptr;
		else
			delete[] (struct __ISO8583WS11__ISO8583Request*)p->ptr;
		break;
	case SOAP_TYPE___ISO8583WS12__ISO8583Request:
		if (p->size < 0)
			delete (struct __ISO8583WS12__ISO8583Request*)p->ptr;
		else
			delete[] (struct __ISO8583WS12__ISO8583Request*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__ISO8583Field:
		if (p->size < 0)
			delete (std::vector<ISO8583WS__ISO8583Field * >*)p->ptr;
		else
			delete[] (std::vector<ISO8583WS__ISO8583Field * >*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__Bin:
		if (p->size < 0)
			delete (std::vector<ISO8583WS__Bin * >*)p->ptr;
		else
			delete[] (std::vector<ISO8583WS__Bin * >*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__Num:
		if (p->size < 0)
			delete (std::vector<ISO8583WS__Num * >*)p->ptr;
		else
			delete[] (std::vector<ISO8583WS__Num * >*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__AlNum:
		if (p->size < 0)
			delete (std::vector<ISO8583WS__AlNum * >*)p->ptr;
		else
			delete[] (std::vector<ISO8583WS__AlNum * >*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__CISO8583Msg:
		if (p->size < 0)
			delete (std::vector<ISO8583WS__CISO8583Msg * >*)p->ptr;
		else
			delete[] (std::vector<ISO8583WS__CISO8583Msg * >*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__ISO8583Field:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ISO8583WS__ISO8583Field * >*)p)[len] = *(ISO8583WS__ISO8583Field **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__Bin:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ISO8583WS__Bin * >*)p)[len] = *(ISO8583WS__Bin **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__Num:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ISO8583WS__Num * >*)p)[len] = *(ISO8583WS__Num **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__AlNum:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ISO8583WS__AlNum * >*)p)[len] = *(ISO8583WS__AlNum **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__CISO8583Msg:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ISO8583WS__CISO8583Msg * >*)p)[len] = *(ISO8583WS__CISO8583Msg **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	return soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	return soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{	return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ISO8583WS__TValueType(struct soap *soap, enum ISO8583WS__TValueType *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ISO8583WS__TValueType
	*a = SOAP_DEFAULT_ISO8583WS__TValueType;
#else
	*a = (enum ISO8583WS__TValueType)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ISO8583WS__TValueType(struct soap *soap, const enum ISO8583WS__TValueType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ISO8583WS__TValueType);
	if (soap_out_ISO8583WS__TValueType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_ISO8583WS__TValueType[] =
{	{ (long)ISO8583WS__TValueType__Numeric, "Numeric" },
	{ (long)ISO8583WS__TValueType__AlphaNumeric, "AlphaNumeric" },
	{ (long)ISO8583WS__TValueType__HexBinary, "HexBinary" },
	{ (long)ISO8583WS__TValueType__String, "String" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ISO8583WS__TValueType2s(struct soap *soap, enum ISO8583WS__TValueType n)
{	const char *s = soap_code_str(soap_codes_ISO8583WS__TValueType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ISO8583WS__TValueType(struct soap *soap, const char *tag, int id, const enum ISO8583WS__TValueType *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ISO8583WS__TValueType), type) || soap_send(soap, soap_ISO8583WS__TValueType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum ISO8583WS__TValueType * SOAP_FMAC4 soap_get_ISO8583WS__TValueType(struct soap *soap, enum ISO8583WS__TValueType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ISO8583WS__TValueType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ISO8583WS__TValueType(struct soap *soap, const char *s, enum ISO8583WS__TValueType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_ISO8583WS__TValueType, s);
	if (map)
		*a = (enum ISO8583WS__TValueType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 3)))
			return soap->error = SOAP_TYPE;
		*a = (enum ISO8583WS__TValueType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ISO8583WS__TValueType * SOAP_FMAC4 soap_in_ISO8583WS__TValueType(struct soap *soap, const char *tag, enum ISO8583WS__TValueType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ISO8583WS__TValueType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ISO8583WS__TValueType, sizeof(enum ISO8583WS__TValueType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ISO8583WS__TValueType(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ISO8583WS__TValueType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ISO8583WS__TValueType, 0, sizeof(enum ISO8583WS__TValueType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ISO8583WS__TValidationError(struct soap *soap, enum ISO8583WS__TValidationError *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ISO8583WS__TValidationError
	*a = SOAP_DEFAULT_ISO8583WS__TValidationError;
#else
	*a = (enum ISO8583WS__TValidationError)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ISO8583WS__TValidationError(struct soap *soap, const enum ISO8583WS__TValidationError *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ISO8583WS__TValidationError);
	if (soap_out_ISO8583WS__TValidationError(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_ISO8583WS__TValidationError[] =
{	{ (long)ISO8583WS__TValidationError__NoError, "NoError" },
	{ (long)ISO8583WS__TValidationError__InvalidMsgLength, "InvalidMsgLength" },
	{ (long)ISO8583WS__TValidationError__InvalidMsgFormat, "InvalidMsgFormat" },
	{ (long)ISO8583WS__TValidationError__InvalidMTIVersion, "InvalidMTIVersion" },
	{ (long)ISO8583WS__TValidationError__InvalidMTIClass, "InvalidMTIClass" },
	{ (long)ISO8583WS__TValidationError__InvalidMTIFunction, "InvalidMTIFunction" },
	{ (long)ISO8583WS__TValidationError__InvalidMTIOrigin, "InvalidMTIOrigin" },
	{ (long)ISO8583WS__TValidationError__InvalidElementID, "InvalidElementID" },
	{ (long)ISO8583WS__TValidationError__InvalidElementSize, "InvalidElementSize" },
	{ (long)ISO8583WS__TValidationError__InvalidElementValue, "InvalidElementValue" },
	{ (long)ISO8583WS__TValidationError__ElementIsMissing, "ElementIsMissing" },
	{ (long)ISO8583WS__TValidationError__ExtraElementsFound, "ExtraElementsFound" },
	{ (long)ISO8583WS__TValidationError__VersionNotSupported, "VersionNotSupported" },
	{ (long)ISO8583WS__TValidationError__MTINotSupported, "MTINotSupported" },
	{ (long)ISO8583WS__TValidationError__PANIsMissing, "PANIsMissing" },
	{ (long)ISO8583WS__TValidationError__ProcessingCodeIsMissing, "ProcessingCodeIsMissing" },
	{ (long)ISO8583WS__TValidationError__TransactionAmountIsMissing, "TransactionAmountIsMissing" },
	{ (long)ISO8583WS__TValidationError__TransactionCurrencyIsMissing, "TransactionCurrencyIsMissing" },
	{ (long)ISO8583WS__TValidationError__CardholderBillingAmountIsMissing, "CardholderBillingAmountIsMissing" },
	{ (long)ISO8583WS__TValidationError__CardholderBillingCurrencyIsNotEuro, "CardholderBillingCurrencyIsNotEuro" },
	{ (long)ISO8583WS__TValidationError__CardholderBillingConversionRateIsMissing, "CardholderBillingConversionRateIsMissing" },
	{ (long)ISO8583WS__TValidationError__CardholderBillingAmountWrong, "CardholderBillingAmountWrong" },
	{ (long)ISO8583WS__TValidationError__STANIsMissing, "STANIsMissing" },
	{ (long)ISO8583WS__TValidationError__DateTimeLocalIsMissing, "DateTimeLocalIsMissing" },
	{ (long)ISO8583WS__TValidationError__ExpirationDateIsMissing, "ExpirationDateIsMissing" },
	{ (long)ISO8583WS__TValidationError__POSDataCodeIsMissing, "POSDataCodeIsMissing" },
	{ (long)ISO8583WS__TValidationError__CardSequenceNumberIsMissing, "CardSequenceNumberIsMissing" },
	{ (long)ISO8583WS__TValidationError__FunctionCodeIsMissing, "FunctionCodeIsMissing" },
	{ (long)ISO8583WS__TValidationError__CardAcceptorBusinessCodeIsMissing, "CardAcceptorBusinessCodeIsMissing" },
	{ (long)ISO8583WS__TValidationError__AcquiringInstitutionIdentificationCodeIsMissing, "AcquiringInstitutionIdentificationCodeIsMissing" },
	{ (long)ISO8583WS__TValidationError__Track2DataIsMissing, "Track2DataIsMissing" },
	{ (long)ISO8583WS__TValidationError__RRNIsMissing, "RRNIsMissing" },
	{ (long)ISO8583WS__TValidationError__TerminalIDIsMissing, "TerminalIDIsMissing" },
	{ (long)ISO8583WS__TValidationError__CardAcceptorIdentificationCodeIsMissing, "CardAcceptorIdentificationCodeIsMissing" },
	{ (long)ISO8583WS__TValidationError__CardAcceptorNameLocationIsMissing, "CardAcceptorNameLocationIsMissing" },
	{ (long)ISO8583WS__TValidationError__PINIsMissing, "PINIsMissing" },
	{ (long)ISO8583WS__TValidationError__SecurityRelatedControlInformationIsMissing, "SecurityRelatedControlInformationIsMissing" },
	{ (long)ISO8583WS__TValidationError__AdditionalAmountsIsMissing, "AdditionalAmountsIsMissing" },
	{ (long)ISO8583WS__TValidationError__ICCDataIsMissing, "ICCDataIsMissing" },
	{ (long)ISO8583WS__TValidationError__AdditionalPrivateDataIsMissing, "AdditionalPrivateDataIsMissing" },
	{ (long)ISO8583WS__TValidationError__MAC1IsMissing, "MAC1IsMissing" },
	{ (long)ISO8583WS__TValidationError__FunctionCodeIsInvalid, "FunctionCodeIsInvalid" },
	{ (long)ISO8583WS__TValidationError__MessageReasonCodeIsMissing, "MessageReasonCodeIsMissing" },
	{ (long)ISO8583WS__TValidationError__TransactionDestinationInstitutionIdentificationCodeIsMissing, "TransactionDestinationInstitutionIdentificationCodeIsMissing" },
	{ (long)ISO8583WS__TValidationError__TransactionOriginatorInstitutionIdentificationCodeIsMissing, "TransactionOriginatorInstitutionIdentificationCodeIsMissing" },
	{ (long)ISO8583WS__TValidationError__MAC2IsMissing, "MAC2IsMissing" },
	{ (long)ISO8583WS__TValidationError__InvalidRequest, "InvalidRequest" },
	{ (long)ISO8583WS__TValidationError__OriginalAmountsIsMissing, "OriginalAmountsIsMissing" },
	{ (long)ISO8583WS__TValidationError__ApprovalCodeIsMissing, "ApprovalCodeIsMissing" },
	{ (long)ISO8583WS__TValidationError__OriginalDataElementsIsMissing, "OriginalDataElementsIsMissing" },
	{ (long)ISO8583WS__TValidationError__AuthorizingAgentInstitutionIdentificationCodeIsMissing, "AuthorizingAgentInstitutionIdentificationCodeIsMissing" },
	{ (long)ISO8583WS__TValidationError__ForwardToIssuerFailed, "ForwardToIssuerFailed" },
	{ (long)ISO8583WS__TValidationError__TerminalIDUnknown, "TerminalIDUnknown" },
	{ (long)ISO8583WS__TValidationError__InvalidProcessingCode, "InvalidProcessingCode" },
	{ (long)ISO8583WS__TValidationError__TransactionAmountAboveMaximum, "TransactionAmountAboveMaximum" },
	{ (long)ISO8583WS__TValidationError__GeneralSystemError, "GeneralSystemError" },
	{ (long)ISO8583WS__TValidationError__NoDatabaseConnection, "NoDatabaseConnection" },
	{ (long)ISO8583WS__TValidationError__RequestRejected, "RequestRejected" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ISO8583WS__TValidationError2s(struct soap *soap, enum ISO8583WS__TValidationError n)
{	const char *s = soap_code_str(soap_codes_ISO8583WS__TValidationError, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ISO8583WS__TValidationError(struct soap *soap, const char *tag, int id, const enum ISO8583WS__TValidationError *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ISO8583WS__TValidationError), type) || soap_send(soap, soap_ISO8583WS__TValidationError2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum ISO8583WS__TValidationError * SOAP_FMAC4 soap_get_ISO8583WS__TValidationError(struct soap *soap, enum ISO8583WS__TValidationError *p, const char *tag, const char *type)
{
	if ((p = soap_in_ISO8583WS__TValidationError(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ISO8583WS__TValidationError(struct soap *soap, const char *s, enum ISO8583WS__TValidationError *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_ISO8583WS__TValidationError, s);
	if (map)
		*a = (enum ISO8583WS__TValidationError)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 57)))
			return soap->error = SOAP_TYPE;
		*a = (enum ISO8583WS__TValidationError)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ISO8583WS__TValidationError * SOAP_FMAC4 soap_in_ISO8583WS__TValidationError(struct soap *soap, const char *tag, enum ISO8583WS__TValidationError *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ISO8583WS__TValidationError *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ISO8583WS__TValidationError, sizeof(enum ISO8583WS__TValidationError), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ISO8583WS__TValidationError(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ISO8583WS__TValidationError *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ISO8583WS__TValidationError, 0, sizeof(enum ISO8583WS__TValidationError), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_std__string(struct soap *soap, int n)
{	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__string(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void _ISO8583WS__ISO8583RequestResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ISO8583WS__ISO8583RequestResponse::ISO8583RequestResult);
	this->_ISO8583WS__ISO8583RequestResponse::ISO8583Msgs = NULL;
	/* transient soap skipped */
}

void _ISO8583WS__ISO8583RequestResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToISO8583WS__ArrayOfCISO8583Msg(soap, &this->_ISO8583WS__ISO8583RequestResponse::ISO8583Msgs);
	/* transient soap skipped */
}

int _ISO8583WS__ISO8583RequestResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ISO8583WS__ISO8583RequestResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ISO8583WS__ISO8583RequestResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ISO8583WS__ISO8583RequestResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ISO8583WS__ISO8583RequestResponse(struct soap *soap, const char *tag, int id, const _ISO8583WS__ISO8583RequestResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ISO8583WS__ISO8583RequestResponse), type))
		return soap->error;
	soap_element_result(soap, "ISO8583WS:ISO8583RequestResult");
	if (soap_out_bool(soap, "ISO8583WS:ISO8583RequestResult", -1, &(a->_ISO8583WS__ISO8583RequestResponse::ISO8583RequestResult), ""))
		return soap->error;
	if (soap_out_PointerToISO8583WS__ArrayOfCISO8583Msg(soap, "ISO8583WS:ISO8583Msgs", -1, &(a->_ISO8583WS__ISO8583RequestResponse::ISO8583Msgs), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ISO8583WS__ISO8583RequestResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ISO8583WS__ISO8583RequestResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ISO8583WS__ISO8583RequestResponse * SOAP_FMAC4 soap_get__ISO8583WS__ISO8583RequestResponse(struct soap *soap, _ISO8583WS__ISO8583RequestResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ISO8583WS__ISO8583RequestResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ISO8583WS__ISO8583RequestResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ISO8583WS__ISO8583RequestResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ISO8583WS__ISO8583RequestResponse * SOAP_FMAC4 soap_in__ISO8583WS__ISO8583RequestResponse(struct soap *soap, const char *tag, _ISO8583WS__ISO8583RequestResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ISO8583WS__ISO8583RequestResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ISO8583WS__ISO8583RequestResponse, sizeof(_ISO8583WS__ISO8583RequestResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ISO8583WS__ISO8583RequestResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ISO8583WS__ISO8583RequestResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_ISO8583RequestResult1 = 1, soap_flag_ISO8583Msgs1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ISO8583RequestResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ISO8583WS:ISO8583RequestResult", &(a->_ISO8583WS__ISO8583RequestResponse::ISO8583RequestResult), "xsd:boolean"))
				{	soap_flag_ISO8583RequestResult1--;
					continue;
				}
			if (soap_flag_ISO8583Msgs1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToISO8583WS__ArrayOfCISO8583Msg(soap, "ISO8583WS:ISO8583Msgs", &(a->_ISO8583WS__ISO8583RequestResponse::ISO8583Msgs), "ISO8583WS:ArrayOfCISO8583Msg"))
				{	soap_flag_ISO8583Msgs1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ISO8583WS:ISO8583RequestResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ISO8583WS__ISO8583RequestResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ISO8583WS__ISO8583RequestResponse, 0, sizeof(_ISO8583WS__ISO8583RequestResponse), 0, soap_copy__ISO8583WS__ISO8583RequestResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ISO8583RequestResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ISO8583WS__ISO8583RequestResponse * SOAP_FMAC6 soap_new__ISO8583WS__ISO8583RequestResponse(struct soap *soap, int n)
{	return soap_instantiate__ISO8583WS__ISO8583RequestResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ISO8583WS__ISO8583RequestResponse(struct soap *soap, _ISO8583WS__ISO8583RequestResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ISO8583WS__ISO8583RequestResponse * SOAP_FMAC4 soap_instantiate__ISO8583WS__ISO8583RequestResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ISO8583WS__ISO8583RequestResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ISO8583WS__ISO8583RequestResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ISO8583WS__ISO8583RequestResponse;
		if (size)
			*size = sizeof(_ISO8583WS__ISO8583RequestResponse);
		((_ISO8583WS__ISO8583RequestResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ISO8583WS__ISO8583RequestResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ISO8583WS__ISO8583RequestResponse);
		for (int i = 0; i < n; i++)
			((_ISO8583WS__ISO8583RequestResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ISO8583WS__ISO8583RequestResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ISO8583WS__ISO8583RequestResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ISO8583WS__ISO8583RequestResponse %p -> %p\n", q, p));
	*(_ISO8583WS__ISO8583RequestResponse*)p = *(_ISO8583WS__ISO8583RequestResponse*)q;
}

void _ISO8583WS__ISO8583Request::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ISO8583WS__ISO8583Request::ISO8583Msgs = NULL;
	/* transient soap skipped */
}

void _ISO8583WS__ISO8583Request::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToISO8583WS__ArrayOfCISO8583Msg(soap, &this->_ISO8583WS__ISO8583Request::ISO8583Msgs);
	/* transient soap skipped */
}

int _ISO8583WS__ISO8583Request::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ISO8583WS__ISO8583Request);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ISO8583WS__ISO8583Request::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ISO8583WS__ISO8583Request(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ISO8583WS__ISO8583Request(struct soap *soap, const char *tag, int id, const _ISO8583WS__ISO8583Request *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ISO8583WS__ISO8583Request), type))
		return soap->error;
	if (soap_out_PointerToISO8583WS__ArrayOfCISO8583Msg(soap, "ISO8583WS:ISO8583Msgs", -1, &(a->_ISO8583WS__ISO8583Request::ISO8583Msgs), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ISO8583WS__ISO8583Request::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ISO8583WS__ISO8583Request(soap, this, tag, type);
}

SOAP_FMAC3 _ISO8583WS__ISO8583Request * SOAP_FMAC4 soap_get__ISO8583WS__ISO8583Request(struct soap *soap, _ISO8583WS__ISO8583Request *p, const char *tag, const char *type)
{
	if ((p = soap_in__ISO8583WS__ISO8583Request(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ISO8583WS__ISO8583Request::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ISO8583WS__ISO8583Request(soap, tag, this, type);
}

SOAP_FMAC3 _ISO8583WS__ISO8583Request * SOAP_FMAC4 soap_in__ISO8583WS__ISO8583Request(struct soap *soap, const char *tag, _ISO8583WS__ISO8583Request *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ISO8583WS__ISO8583Request *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ISO8583WS__ISO8583Request, sizeof(_ISO8583WS__ISO8583Request), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ISO8583WS__ISO8583Request)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ISO8583WS__ISO8583Request *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_ISO8583Msgs1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ISO8583Msgs1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToISO8583WS__ArrayOfCISO8583Msg(soap, "ISO8583WS:ISO8583Msgs", &(a->_ISO8583WS__ISO8583Request::ISO8583Msgs), "ISO8583WS:ArrayOfCISO8583Msg"))
				{	soap_flag_ISO8583Msgs1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ISO8583WS__ISO8583Request *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ISO8583WS__ISO8583Request, 0, sizeof(_ISO8583WS__ISO8583Request), 0, soap_copy__ISO8583WS__ISO8583Request);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ISO8583WS__ISO8583Request * SOAP_FMAC6 soap_new__ISO8583WS__ISO8583Request(struct soap *soap, int n)
{	return soap_instantiate__ISO8583WS__ISO8583Request(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ISO8583WS__ISO8583Request(struct soap *soap, _ISO8583WS__ISO8583Request *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ISO8583WS__ISO8583Request * SOAP_FMAC4 soap_instantiate__ISO8583WS__ISO8583Request(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ISO8583WS__ISO8583Request(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ISO8583WS__ISO8583Request, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ISO8583WS__ISO8583Request;
		if (size)
			*size = sizeof(_ISO8583WS__ISO8583Request);
		((_ISO8583WS__ISO8583Request*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ISO8583WS__ISO8583Request[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ISO8583WS__ISO8583Request);
		for (int i = 0; i < n; i++)
			((_ISO8583WS__ISO8583Request*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ISO8583WS__ISO8583Request*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ISO8583WS__ISO8583Request(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ISO8583WS__ISO8583Request %p -> %p\n", q, p));
	*(_ISO8583WS__ISO8583Request*)p = *(_ISO8583WS__ISO8583Request*)q;
}

void ISO8583WS__ISO8583Field::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ISO8583WS__ISO8583Field::ID);
	this->ISO8583WS__ISO8583Field::Value = NULL;
	this->ISO8583WS__ISO8583Field::ValueType = (enum ISO8583WS__TValueType)3;
	/* transient soap skipped */
}

void ISO8583WS__ISO8583Field::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int ISO8583WS__ISO8583Field::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ISO8583WS__ISO8583Field);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ISO8583WS__ISO8583Field::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ISO8583WS__ISO8583Field(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ISO8583WS__ISO8583Field(struct soap *soap, const char *tag, int id, const ISO8583WS__ISO8583Field *a, const char *type)
{
	soap_set_attr(soap, "ID", soap_int2s(soap, ((ISO8583WS__ISO8583Field *)a)->ID));
	if (((ISO8583WS__ISO8583Field *)a)->Value)
		soap_set_attr(soap, "Value", ((ISO8583WS__ISO8583Field *)a)->Value->c_str());
	soap_set_attr(soap, "ValueType", soap_ISO8583WS__TValueType2s(soap, ((ISO8583WS__ISO8583Field *)a)->ValueType));
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ISO8583WS__ISO8583Field), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ISO8583WS__ISO8583Field::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ISO8583WS__ISO8583Field(soap, this, tag, type);
}

SOAP_FMAC3 ISO8583WS__ISO8583Field * SOAP_FMAC4 soap_get_ISO8583WS__ISO8583Field(struct soap *soap, ISO8583WS__ISO8583Field *p, const char *tag, const char *type)
{
	if ((p = soap_in_ISO8583WS__ISO8583Field(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ISO8583WS__ISO8583Field::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ISO8583WS__ISO8583Field(soap, tag, this, type);
}

SOAP_FMAC3 ISO8583WS__ISO8583Field * SOAP_FMAC4 soap_in_ISO8583WS__ISO8583Field(struct soap *soap, const char *tag, ISO8583WS__ISO8583Field *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ISO8583WS__ISO8583Field *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ISO8583WS__ISO8583Field, sizeof(ISO8583WS__ISO8583Field), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ISO8583WS__ISO8583Field)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ISO8583WS__ISO8583Field *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2int(soap, soap_attr_value(soap, "ID", 1), &((ISO8583WS__ISO8583Field *)a)->ID))
		return NULL;
	{	const char *t = soap_attr_value(soap, "Value", 0);
		if (t)
		{
			char *s = NULL;
			if (soap_s2string(soap, t, &s))
				return NULL;
			if (s)
			{	((ISO8583WS__ISO8583Field *)a)->Value = soap_new_std__string(soap, -1);
				((ISO8583WS__ISO8583Field *)a)->Value->assign(s);
			}
		}
	}
	if (soap_s2ISO8583WS__TValueType(soap, soap_attr_value(soap, "ValueType", 0), &((ISO8583WS__ISO8583Field *)a)->ValueType))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ISO8583WS__ISO8583Field *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ISO8583WS__ISO8583Field, 0, sizeof(ISO8583WS__ISO8583Field), 0, soap_copy_ISO8583WS__ISO8583Field);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ISO8583WS__ISO8583Field * SOAP_FMAC6 soap_new_ISO8583WS__ISO8583Field(struct soap *soap, int n)
{	return soap_instantiate_ISO8583WS__ISO8583Field(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ISO8583WS__ISO8583Field(struct soap *soap, ISO8583WS__ISO8583Field *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ISO8583WS__ISO8583Field * SOAP_FMAC4 soap_instantiate_ISO8583WS__ISO8583Field(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ISO8583WS__ISO8583Field(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ISO8583WS__ISO8583Field, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ISO8583WS__ISO8583Field;
		if (size)
			*size = sizeof(ISO8583WS__ISO8583Field);
		((ISO8583WS__ISO8583Field*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ISO8583WS__ISO8583Field[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ISO8583WS__ISO8583Field);
		for (int i = 0; i < n; i++)
			((ISO8583WS__ISO8583Field*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ISO8583WS__ISO8583Field*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ISO8583WS__ISO8583Field(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ISO8583WS__ISO8583Field %p -> %p\n", q, p));
	*(ISO8583WS__ISO8583Field*)p = *(ISO8583WS__ISO8583Field*)q;
}

void ISO8583WS__ArrayOfISO8583Field::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerToISO8583WS__ISO8583Field(soap, &this->ISO8583WS__ArrayOfISO8583Field::Field);
	/* transient soap skipped */
}

void ISO8583WS__ArrayOfISO8583Field::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerToISO8583WS__ISO8583Field(soap, &this->ISO8583WS__ArrayOfISO8583Field::Field);
	/* transient soap skipped */
}

int ISO8583WS__ArrayOfISO8583Field::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ISO8583WS__ArrayOfISO8583Field);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ISO8583WS__ArrayOfISO8583Field::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ISO8583WS__ArrayOfISO8583Field(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ISO8583WS__ArrayOfISO8583Field(struct soap *soap, const char *tag, int id, const ISO8583WS__ArrayOfISO8583Field *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ISO8583WS__ArrayOfISO8583Field), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerToISO8583WS__ISO8583Field(soap, "ISO8583WS:Field", -1, &(a->ISO8583WS__ArrayOfISO8583Field::Field), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ISO8583WS__ArrayOfISO8583Field::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ISO8583WS__ArrayOfISO8583Field(soap, this, tag, type);
}

SOAP_FMAC3 ISO8583WS__ArrayOfISO8583Field * SOAP_FMAC4 soap_get_ISO8583WS__ArrayOfISO8583Field(struct soap *soap, ISO8583WS__ArrayOfISO8583Field *p, const char *tag, const char *type)
{
	if ((p = soap_in_ISO8583WS__ArrayOfISO8583Field(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ISO8583WS__ArrayOfISO8583Field::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ISO8583WS__ArrayOfISO8583Field(soap, tag, this, type);
}

SOAP_FMAC3 ISO8583WS__ArrayOfISO8583Field * SOAP_FMAC4 soap_in_ISO8583WS__ArrayOfISO8583Field(struct soap *soap, const char *tag, ISO8583WS__ArrayOfISO8583Field *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ISO8583WS__ArrayOfISO8583Field *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ISO8583WS__ArrayOfISO8583Field, sizeof(ISO8583WS__ArrayOfISO8583Field), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ISO8583WS__ArrayOfISO8583Field)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ISO8583WS__ArrayOfISO8583Field *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerToISO8583WS__ISO8583Field(soap, "ISO8583WS:Field", &(a->ISO8583WS__ArrayOfISO8583Field::Field), "ISO8583WS:ISO8583Field"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ISO8583WS__ArrayOfISO8583Field *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ISO8583WS__ArrayOfISO8583Field, 0, sizeof(ISO8583WS__ArrayOfISO8583Field), 0, soap_copy_ISO8583WS__ArrayOfISO8583Field);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ISO8583WS__ArrayOfISO8583Field * SOAP_FMAC6 soap_new_ISO8583WS__ArrayOfISO8583Field(struct soap *soap, int n)
{	return soap_instantiate_ISO8583WS__ArrayOfISO8583Field(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ISO8583WS__ArrayOfISO8583Field(struct soap *soap, ISO8583WS__ArrayOfISO8583Field *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ISO8583WS__ArrayOfISO8583Field * SOAP_FMAC4 soap_instantiate_ISO8583WS__ArrayOfISO8583Field(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ISO8583WS__ArrayOfISO8583Field(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ISO8583WS__ArrayOfISO8583Field, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ISO8583WS__ArrayOfISO8583Field;
		if (size)
			*size = sizeof(ISO8583WS__ArrayOfISO8583Field);
		((ISO8583WS__ArrayOfISO8583Field*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ISO8583WS__ArrayOfISO8583Field[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ISO8583WS__ArrayOfISO8583Field);
		for (int i = 0; i < n; i++)
			((ISO8583WS__ArrayOfISO8583Field*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ISO8583WS__ArrayOfISO8583Field*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ISO8583WS__ArrayOfISO8583Field(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ISO8583WS__ArrayOfISO8583Field %p -> %p\n", q, p));
	*(ISO8583WS__ArrayOfISO8583Field*)p = *(ISO8583WS__ArrayOfISO8583Field*)q;
}

void ISO8583WS__Bin::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ISO8583WS__Bin::ID);
	this->ISO8583WS__Bin::Value = NULL;
	/* transient soap skipped */
}

void ISO8583WS__Bin::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__hexBinary(soap, &this->ISO8583WS__Bin::Value);
	/* transient soap skipped */
}

int ISO8583WS__Bin::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ISO8583WS__Bin);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ISO8583WS__Bin::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ISO8583WS__Bin(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ISO8583WS__Bin(struct soap *soap, const char *tag, int id, const ISO8583WS__Bin *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ISO8583WS__Bin), type))
		return soap->error;
	if (soap_out_int(soap, "ISO8583WS:ID", -1, &(a->ISO8583WS__Bin::ID), ""))
		return soap->error;
	if (soap_out_PointerToxsd__hexBinary(soap, "ISO8583WS:Value", -1, &(a->ISO8583WS__Bin::Value), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ISO8583WS__Bin::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ISO8583WS__Bin(soap, this, tag, type);
}

SOAP_FMAC3 ISO8583WS__Bin * SOAP_FMAC4 soap_get_ISO8583WS__Bin(struct soap *soap, ISO8583WS__Bin *p, const char *tag, const char *type)
{
	if ((p = soap_in_ISO8583WS__Bin(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ISO8583WS__Bin::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ISO8583WS__Bin(soap, tag, this, type);
}

SOAP_FMAC3 ISO8583WS__Bin * SOAP_FMAC4 soap_in_ISO8583WS__Bin(struct soap *soap, const char *tag, ISO8583WS__Bin *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ISO8583WS__Bin *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ISO8583WS__Bin, sizeof(ISO8583WS__Bin), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ISO8583WS__Bin)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ISO8583WS__Bin *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_ID1 = 1, soap_flag_Value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ISO8583WS:ID", &(a->ISO8583WS__Bin::ID), "xsd:int"))
				{	soap_flag_ID1--;
					continue;
				}
			if (soap_flag_Value1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__hexBinary(soap, "ISO8583WS:Value", &(a->ISO8583WS__Bin::Value), "xsd:hexBinary"))
				{	soap_flag_Value1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ISO8583WS__Bin *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ISO8583WS__Bin, 0, sizeof(ISO8583WS__Bin), 0, soap_copy_ISO8583WS__Bin);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ISO8583WS__Bin * SOAP_FMAC6 soap_new_ISO8583WS__Bin(struct soap *soap, int n)
{	return soap_instantiate_ISO8583WS__Bin(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ISO8583WS__Bin(struct soap *soap, ISO8583WS__Bin *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ISO8583WS__Bin * SOAP_FMAC4 soap_instantiate_ISO8583WS__Bin(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ISO8583WS__Bin(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ISO8583WS__Bin, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ISO8583WS__Bin;
		if (size)
			*size = sizeof(ISO8583WS__Bin);
		((ISO8583WS__Bin*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ISO8583WS__Bin[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ISO8583WS__Bin);
		for (int i = 0; i < n; i++)
			((ISO8583WS__Bin*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ISO8583WS__Bin*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ISO8583WS__Bin(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ISO8583WS__Bin %p -> %p\n", q, p));
	*(ISO8583WS__Bin*)p = *(ISO8583WS__Bin*)q;
}

void ISO8583WS__ArrayOfBin::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerToISO8583WS__Bin(soap, &this->ISO8583WS__ArrayOfBin::Bin);
	/* transient soap skipped */
}

void ISO8583WS__ArrayOfBin::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerToISO8583WS__Bin(soap, &this->ISO8583WS__ArrayOfBin::Bin);
	/* transient soap skipped */
}

int ISO8583WS__ArrayOfBin::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ISO8583WS__ArrayOfBin);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ISO8583WS__ArrayOfBin::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ISO8583WS__ArrayOfBin(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ISO8583WS__ArrayOfBin(struct soap *soap, const char *tag, int id, const ISO8583WS__ArrayOfBin *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ISO8583WS__ArrayOfBin), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerToISO8583WS__Bin(soap, "ISO8583WS:Bin", -1, &(a->ISO8583WS__ArrayOfBin::Bin), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ISO8583WS__ArrayOfBin::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ISO8583WS__ArrayOfBin(soap, this, tag, type);
}

SOAP_FMAC3 ISO8583WS__ArrayOfBin * SOAP_FMAC4 soap_get_ISO8583WS__ArrayOfBin(struct soap *soap, ISO8583WS__ArrayOfBin *p, const char *tag, const char *type)
{
	if ((p = soap_in_ISO8583WS__ArrayOfBin(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ISO8583WS__ArrayOfBin::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ISO8583WS__ArrayOfBin(soap, tag, this, type);
}

SOAP_FMAC3 ISO8583WS__ArrayOfBin * SOAP_FMAC4 soap_in_ISO8583WS__ArrayOfBin(struct soap *soap, const char *tag, ISO8583WS__ArrayOfBin *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ISO8583WS__ArrayOfBin *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ISO8583WS__ArrayOfBin, sizeof(ISO8583WS__ArrayOfBin), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ISO8583WS__ArrayOfBin)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ISO8583WS__ArrayOfBin *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerToISO8583WS__Bin(soap, "ISO8583WS:Bin", &(a->ISO8583WS__ArrayOfBin::Bin), "ISO8583WS:Bin"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ISO8583WS__ArrayOfBin *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ISO8583WS__ArrayOfBin, 0, sizeof(ISO8583WS__ArrayOfBin), 0, soap_copy_ISO8583WS__ArrayOfBin);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ISO8583WS__ArrayOfBin * SOAP_FMAC6 soap_new_ISO8583WS__ArrayOfBin(struct soap *soap, int n)
{	return soap_instantiate_ISO8583WS__ArrayOfBin(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ISO8583WS__ArrayOfBin(struct soap *soap, ISO8583WS__ArrayOfBin *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ISO8583WS__ArrayOfBin * SOAP_FMAC4 soap_instantiate_ISO8583WS__ArrayOfBin(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ISO8583WS__ArrayOfBin(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ISO8583WS__ArrayOfBin, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ISO8583WS__ArrayOfBin;
		if (size)
			*size = sizeof(ISO8583WS__ArrayOfBin);
		((ISO8583WS__ArrayOfBin*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ISO8583WS__ArrayOfBin[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ISO8583WS__ArrayOfBin);
		for (int i = 0; i < n; i++)
			((ISO8583WS__ArrayOfBin*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ISO8583WS__ArrayOfBin*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ISO8583WS__ArrayOfBin(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ISO8583WS__ArrayOfBin %p -> %p\n", q, p));
	*(ISO8583WS__ArrayOfBin*)p = *(ISO8583WS__ArrayOfBin*)q;
}

void ISO8583WS__Num::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ISO8583WS__Num::ID);
	this->ISO8583WS__Num::Value = NULL;
	/* transient soap skipped */
}

void ISO8583WS__Num::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ISO8583WS__Num::Value);
	/* transient soap skipped */
}

int ISO8583WS__Num::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ISO8583WS__Num);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ISO8583WS__Num::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ISO8583WS__Num(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ISO8583WS__Num(struct soap *soap, const char *tag, int id, const ISO8583WS__Num *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ISO8583WS__Num), type))
		return soap->error;
	if (soap_out_int(soap, "ISO8583WS:ID", -1, &(a->ISO8583WS__Num::ID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ISO8583WS:Value", -1, &(a->ISO8583WS__Num::Value), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ISO8583WS__Num::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ISO8583WS__Num(soap, this, tag, type);
}

SOAP_FMAC3 ISO8583WS__Num * SOAP_FMAC4 soap_get_ISO8583WS__Num(struct soap *soap, ISO8583WS__Num *p, const char *tag, const char *type)
{
	if ((p = soap_in_ISO8583WS__Num(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ISO8583WS__Num::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ISO8583WS__Num(soap, tag, this, type);
}

SOAP_FMAC3 ISO8583WS__Num * SOAP_FMAC4 soap_in_ISO8583WS__Num(struct soap *soap, const char *tag, ISO8583WS__Num *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ISO8583WS__Num *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ISO8583WS__Num, sizeof(ISO8583WS__Num), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ISO8583WS__Num)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ISO8583WS__Num *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_ID1 = 1, soap_flag_Value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ISO8583WS:ID", &(a->ISO8583WS__Num::ID), "xsd:int"))
				{	soap_flag_ID1--;
					continue;
				}
			if (soap_flag_Value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ISO8583WS:Value", &(a->ISO8583WS__Num::Value), "xsd:string"))
				{	soap_flag_Value1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ISO8583WS__Num *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ISO8583WS__Num, 0, sizeof(ISO8583WS__Num), 0, soap_copy_ISO8583WS__Num);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ISO8583WS__Num * SOAP_FMAC6 soap_new_ISO8583WS__Num(struct soap *soap, int n)
{	return soap_instantiate_ISO8583WS__Num(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ISO8583WS__Num(struct soap *soap, ISO8583WS__Num *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ISO8583WS__Num * SOAP_FMAC4 soap_instantiate_ISO8583WS__Num(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ISO8583WS__Num(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ISO8583WS__Num, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ISO8583WS__Num;
		if (size)
			*size = sizeof(ISO8583WS__Num);
		((ISO8583WS__Num*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ISO8583WS__Num[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ISO8583WS__Num);
		for (int i = 0; i < n; i++)
			((ISO8583WS__Num*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ISO8583WS__Num*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ISO8583WS__Num(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ISO8583WS__Num %p -> %p\n", q, p));
	*(ISO8583WS__Num*)p = *(ISO8583WS__Num*)q;
}

void ISO8583WS__ArrayOfNum::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerToISO8583WS__Num(soap, &this->ISO8583WS__ArrayOfNum::Num);
	/* transient soap skipped */
}

void ISO8583WS__ArrayOfNum::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerToISO8583WS__Num(soap, &this->ISO8583WS__ArrayOfNum::Num);
	/* transient soap skipped */
}

int ISO8583WS__ArrayOfNum::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ISO8583WS__ArrayOfNum);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ISO8583WS__ArrayOfNum::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ISO8583WS__ArrayOfNum(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ISO8583WS__ArrayOfNum(struct soap *soap, const char *tag, int id, const ISO8583WS__ArrayOfNum *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ISO8583WS__ArrayOfNum), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerToISO8583WS__Num(soap, "ISO8583WS:Num", -1, &(a->ISO8583WS__ArrayOfNum::Num), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ISO8583WS__ArrayOfNum::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ISO8583WS__ArrayOfNum(soap, this, tag, type);
}

SOAP_FMAC3 ISO8583WS__ArrayOfNum * SOAP_FMAC4 soap_get_ISO8583WS__ArrayOfNum(struct soap *soap, ISO8583WS__ArrayOfNum *p, const char *tag, const char *type)
{
	if ((p = soap_in_ISO8583WS__ArrayOfNum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ISO8583WS__ArrayOfNum::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ISO8583WS__ArrayOfNum(soap, tag, this, type);
}

SOAP_FMAC3 ISO8583WS__ArrayOfNum * SOAP_FMAC4 soap_in_ISO8583WS__ArrayOfNum(struct soap *soap, const char *tag, ISO8583WS__ArrayOfNum *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ISO8583WS__ArrayOfNum *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ISO8583WS__ArrayOfNum, sizeof(ISO8583WS__ArrayOfNum), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ISO8583WS__ArrayOfNum)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ISO8583WS__ArrayOfNum *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerToISO8583WS__Num(soap, "ISO8583WS:Num", &(a->ISO8583WS__ArrayOfNum::Num), "ISO8583WS:Num"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ISO8583WS__ArrayOfNum *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ISO8583WS__ArrayOfNum, 0, sizeof(ISO8583WS__ArrayOfNum), 0, soap_copy_ISO8583WS__ArrayOfNum);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ISO8583WS__ArrayOfNum * SOAP_FMAC6 soap_new_ISO8583WS__ArrayOfNum(struct soap *soap, int n)
{	return soap_instantiate_ISO8583WS__ArrayOfNum(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ISO8583WS__ArrayOfNum(struct soap *soap, ISO8583WS__ArrayOfNum *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ISO8583WS__ArrayOfNum * SOAP_FMAC4 soap_instantiate_ISO8583WS__ArrayOfNum(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ISO8583WS__ArrayOfNum(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ISO8583WS__ArrayOfNum, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ISO8583WS__ArrayOfNum;
		if (size)
			*size = sizeof(ISO8583WS__ArrayOfNum);
		((ISO8583WS__ArrayOfNum*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ISO8583WS__ArrayOfNum[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ISO8583WS__ArrayOfNum);
		for (int i = 0; i < n; i++)
			((ISO8583WS__ArrayOfNum*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ISO8583WS__ArrayOfNum*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ISO8583WS__ArrayOfNum(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ISO8583WS__ArrayOfNum %p -> %p\n", q, p));
	*(ISO8583WS__ArrayOfNum*)p = *(ISO8583WS__ArrayOfNum*)q;
}

void ISO8583WS__AlNum::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ISO8583WS__AlNum::ID);
	this->ISO8583WS__AlNum::Value = NULL;
	/* transient soap skipped */
}

void ISO8583WS__AlNum::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ISO8583WS__AlNum::Value);
	/* transient soap skipped */
}

int ISO8583WS__AlNum::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ISO8583WS__AlNum);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ISO8583WS__AlNum::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ISO8583WS__AlNum(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ISO8583WS__AlNum(struct soap *soap, const char *tag, int id, const ISO8583WS__AlNum *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ISO8583WS__AlNum), type))
		return soap->error;
	if (soap_out_int(soap, "ISO8583WS:ID", -1, &(a->ISO8583WS__AlNum::ID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ISO8583WS:Value", -1, &(a->ISO8583WS__AlNum::Value), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ISO8583WS__AlNum::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ISO8583WS__AlNum(soap, this, tag, type);
}

SOAP_FMAC3 ISO8583WS__AlNum * SOAP_FMAC4 soap_get_ISO8583WS__AlNum(struct soap *soap, ISO8583WS__AlNum *p, const char *tag, const char *type)
{
	if ((p = soap_in_ISO8583WS__AlNum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ISO8583WS__AlNum::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ISO8583WS__AlNum(soap, tag, this, type);
}

SOAP_FMAC3 ISO8583WS__AlNum * SOAP_FMAC4 soap_in_ISO8583WS__AlNum(struct soap *soap, const char *tag, ISO8583WS__AlNum *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ISO8583WS__AlNum *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ISO8583WS__AlNum, sizeof(ISO8583WS__AlNum), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ISO8583WS__AlNum)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ISO8583WS__AlNum *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_ID1 = 1, soap_flag_Value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ISO8583WS:ID", &(a->ISO8583WS__AlNum::ID), "xsd:int"))
				{	soap_flag_ID1--;
					continue;
				}
			if (soap_flag_Value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ISO8583WS:Value", &(a->ISO8583WS__AlNum::Value), "xsd:string"))
				{	soap_flag_Value1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ISO8583WS__AlNum *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ISO8583WS__AlNum, 0, sizeof(ISO8583WS__AlNum), 0, soap_copy_ISO8583WS__AlNum);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ISO8583WS__AlNum * SOAP_FMAC6 soap_new_ISO8583WS__AlNum(struct soap *soap, int n)
{	return soap_instantiate_ISO8583WS__AlNum(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ISO8583WS__AlNum(struct soap *soap, ISO8583WS__AlNum *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ISO8583WS__AlNum * SOAP_FMAC4 soap_instantiate_ISO8583WS__AlNum(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ISO8583WS__AlNum(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ISO8583WS__AlNum, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ISO8583WS__AlNum;
		if (size)
			*size = sizeof(ISO8583WS__AlNum);
		((ISO8583WS__AlNum*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ISO8583WS__AlNum[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ISO8583WS__AlNum);
		for (int i = 0; i < n; i++)
			((ISO8583WS__AlNum*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ISO8583WS__AlNum*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ISO8583WS__AlNum(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ISO8583WS__AlNum %p -> %p\n", q, p));
	*(ISO8583WS__AlNum*)p = *(ISO8583WS__AlNum*)q;
}

void ISO8583WS__ArrayOfAlNum::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerToISO8583WS__AlNum(soap, &this->ISO8583WS__ArrayOfAlNum::AlNum);
	/* transient soap skipped */
}

void ISO8583WS__ArrayOfAlNum::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerToISO8583WS__AlNum(soap, &this->ISO8583WS__ArrayOfAlNum::AlNum);
	/* transient soap skipped */
}

int ISO8583WS__ArrayOfAlNum::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ISO8583WS__ArrayOfAlNum);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ISO8583WS__ArrayOfAlNum::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ISO8583WS__ArrayOfAlNum(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ISO8583WS__ArrayOfAlNum(struct soap *soap, const char *tag, int id, const ISO8583WS__ArrayOfAlNum *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ISO8583WS__ArrayOfAlNum), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerToISO8583WS__AlNum(soap, "ISO8583WS:AlNum", -1, &(a->ISO8583WS__ArrayOfAlNum::AlNum), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ISO8583WS__ArrayOfAlNum::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ISO8583WS__ArrayOfAlNum(soap, this, tag, type);
}

SOAP_FMAC3 ISO8583WS__ArrayOfAlNum * SOAP_FMAC4 soap_get_ISO8583WS__ArrayOfAlNum(struct soap *soap, ISO8583WS__ArrayOfAlNum *p, const char *tag, const char *type)
{
	if ((p = soap_in_ISO8583WS__ArrayOfAlNum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ISO8583WS__ArrayOfAlNum::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ISO8583WS__ArrayOfAlNum(soap, tag, this, type);
}

SOAP_FMAC3 ISO8583WS__ArrayOfAlNum * SOAP_FMAC4 soap_in_ISO8583WS__ArrayOfAlNum(struct soap *soap, const char *tag, ISO8583WS__ArrayOfAlNum *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ISO8583WS__ArrayOfAlNum *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ISO8583WS__ArrayOfAlNum, sizeof(ISO8583WS__ArrayOfAlNum), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ISO8583WS__ArrayOfAlNum)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ISO8583WS__ArrayOfAlNum *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerToISO8583WS__AlNum(soap, "ISO8583WS:AlNum", &(a->ISO8583WS__ArrayOfAlNum::AlNum), "ISO8583WS:AlNum"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ISO8583WS__ArrayOfAlNum *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ISO8583WS__ArrayOfAlNum, 0, sizeof(ISO8583WS__ArrayOfAlNum), 0, soap_copy_ISO8583WS__ArrayOfAlNum);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ISO8583WS__ArrayOfAlNum * SOAP_FMAC6 soap_new_ISO8583WS__ArrayOfAlNum(struct soap *soap, int n)
{	return soap_instantiate_ISO8583WS__ArrayOfAlNum(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ISO8583WS__ArrayOfAlNum(struct soap *soap, ISO8583WS__ArrayOfAlNum *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ISO8583WS__ArrayOfAlNum * SOAP_FMAC4 soap_instantiate_ISO8583WS__ArrayOfAlNum(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ISO8583WS__ArrayOfAlNum(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ISO8583WS__ArrayOfAlNum, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ISO8583WS__ArrayOfAlNum;
		if (size)
			*size = sizeof(ISO8583WS__ArrayOfAlNum);
		((ISO8583WS__ArrayOfAlNum*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ISO8583WS__ArrayOfAlNum[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ISO8583WS__ArrayOfAlNum);
		for (int i = 0; i < n; i++)
			((ISO8583WS__ArrayOfAlNum*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ISO8583WS__ArrayOfAlNum*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ISO8583WS__ArrayOfAlNum(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ISO8583WS__ArrayOfAlNum %p -> %p\n", q, p));
	*(ISO8583WS__ArrayOfAlNum*)p = *(ISO8583WS__ArrayOfAlNum*)q;
}

void ISO8583WS__CISO8583Msg::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ISO8583WS__CISO8583Msg::MTI);
	soap_default_ISO8583WS__TValidationError(soap, &this->ISO8583WS__CISO8583Msg::Error);
	this->ISO8583WS__CISO8583Msg::AlphaNumericElements = NULL;
	this->ISO8583WS__CISO8583Msg::NumericElements = NULL;
	this->ISO8583WS__CISO8583Msg::BinaryElements = NULL;
	this->ISO8583WS__CISO8583Msg::ISO8583Fields = NULL;
	/* transient soap skipped */
}

void ISO8583WS__CISO8583Msg::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToISO8583WS__ArrayOfAlNum(soap, &this->ISO8583WS__CISO8583Msg::AlphaNumericElements);
	soap_serialize_PointerToISO8583WS__ArrayOfNum(soap, &this->ISO8583WS__CISO8583Msg::NumericElements);
	soap_serialize_PointerToISO8583WS__ArrayOfBin(soap, &this->ISO8583WS__CISO8583Msg::BinaryElements);
	soap_serialize_PointerToISO8583WS__ArrayOfISO8583Field(soap, &this->ISO8583WS__CISO8583Msg::ISO8583Fields);
	/* transient soap skipped */
}

int ISO8583WS__CISO8583Msg::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ISO8583WS__CISO8583Msg);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ISO8583WS__CISO8583Msg::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ISO8583WS__CISO8583Msg(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ISO8583WS__CISO8583Msg(struct soap *soap, const char *tag, int id, const ISO8583WS__CISO8583Msg *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ISO8583WS__CISO8583Msg), type))
		return soap->error;
	if (soap_out_int(soap, "ISO8583WS:MTI", -1, &(a->ISO8583WS__CISO8583Msg::MTI), ""))
		return soap->error;
	if (soap_out_ISO8583WS__TValidationError(soap, "ISO8583WS:Error", -1, &(a->ISO8583WS__CISO8583Msg::Error), ""))
		return soap->error;
	if (soap_out_PointerToISO8583WS__ArrayOfAlNum(soap, "ISO8583WS:AlphaNumericElements", -1, &(a->ISO8583WS__CISO8583Msg::AlphaNumericElements), ""))
		return soap->error;
	if (soap_out_PointerToISO8583WS__ArrayOfNum(soap, "ISO8583WS:NumericElements", -1, &(a->ISO8583WS__CISO8583Msg::NumericElements), ""))
		return soap->error;
	if (soap_out_PointerToISO8583WS__ArrayOfBin(soap, "ISO8583WS:BinaryElements", -1, &(a->ISO8583WS__CISO8583Msg::BinaryElements), ""))
		return soap->error;
	if (soap_out_PointerToISO8583WS__ArrayOfISO8583Field(soap, "ISO8583WS:ISO8583Fields", -1, &(a->ISO8583WS__CISO8583Msg::ISO8583Fields), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ISO8583WS__CISO8583Msg::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ISO8583WS__CISO8583Msg(soap, this, tag, type);
}

SOAP_FMAC3 ISO8583WS__CISO8583Msg * SOAP_FMAC4 soap_get_ISO8583WS__CISO8583Msg(struct soap *soap, ISO8583WS__CISO8583Msg *p, const char *tag, const char *type)
{
	if ((p = soap_in_ISO8583WS__CISO8583Msg(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ISO8583WS__CISO8583Msg::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ISO8583WS__CISO8583Msg(soap, tag, this, type);
}

SOAP_FMAC3 ISO8583WS__CISO8583Msg * SOAP_FMAC4 soap_in_ISO8583WS__CISO8583Msg(struct soap *soap, const char *tag, ISO8583WS__CISO8583Msg *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ISO8583WS__CISO8583Msg *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ISO8583WS__CISO8583Msg, sizeof(ISO8583WS__CISO8583Msg), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ISO8583WS__CISO8583Msg)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ISO8583WS__CISO8583Msg *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_MTI1 = 1, soap_flag_Error1 = 1, soap_flag_AlphaNumericElements1 = 1, soap_flag_NumericElements1 = 1, soap_flag_BinaryElements1 = 1, soap_flag_ISO8583Fields1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MTI1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ISO8583WS:MTI", &(a->ISO8583WS__CISO8583Msg::MTI), "xsd:int"))
				{	soap_flag_MTI1--;
					continue;
				}
			if (soap_flag_Error1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ISO8583WS__TValidationError(soap, "ISO8583WS:Error", &(a->ISO8583WS__CISO8583Msg::Error), "ISO8583WS:TValidationError"))
				{	soap_flag_Error1--;
					continue;
				}
			if (soap_flag_AlphaNumericElements1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToISO8583WS__ArrayOfAlNum(soap, "ISO8583WS:AlphaNumericElements", &(a->ISO8583WS__CISO8583Msg::AlphaNumericElements), "ISO8583WS:ArrayOfAlNum"))
				{	soap_flag_AlphaNumericElements1--;
					continue;
				}
			if (soap_flag_NumericElements1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToISO8583WS__ArrayOfNum(soap, "ISO8583WS:NumericElements", &(a->ISO8583WS__CISO8583Msg::NumericElements), "ISO8583WS:ArrayOfNum"))
				{	soap_flag_NumericElements1--;
					continue;
				}
			if (soap_flag_BinaryElements1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToISO8583WS__ArrayOfBin(soap, "ISO8583WS:BinaryElements", &(a->ISO8583WS__CISO8583Msg::BinaryElements), "ISO8583WS:ArrayOfBin"))
				{	soap_flag_BinaryElements1--;
					continue;
				}
			if (soap_flag_ISO8583Fields1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToISO8583WS__ArrayOfISO8583Field(soap, "ISO8583WS:ISO8583Fields", &(a->ISO8583WS__CISO8583Msg::ISO8583Fields), "ISO8583WS:ArrayOfISO8583Field"))
				{	soap_flag_ISO8583Fields1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ISO8583WS__CISO8583Msg *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ISO8583WS__CISO8583Msg, 0, sizeof(ISO8583WS__CISO8583Msg), 0, soap_copy_ISO8583WS__CISO8583Msg);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_MTI1 > 0 || soap_flag_Error1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ISO8583WS__CISO8583Msg * SOAP_FMAC6 soap_new_ISO8583WS__CISO8583Msg(struct soap *soap, int n)
{	return soap_instantiate_ISO8583WS__CISO8583Msg(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ISO8583WS__CISO8583Msg(struct soap *soap, ISO8583WS__CISO8583Msg *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ISO8583WS__CISO8583Msg * SOAP_FMAC4 soap_instantiate_ISO8583WS__CISO8583Msg(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ISO8583WS__CISO8583Msg(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ISO8583WS__CISO8583Msg, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ISO8583WS__CISO8583Msg;
		if (size)
			*size = sizeof(ISO8583WS__CISO8583Msg);
		((ISO8583WS__CISO8583Msg*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ISO8583WS__CISO8583Msg[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ISO8583WS__CISO8583Msg);
		for (int i = 0; i < n; i++)
			((ISO8583WS__CISO8583Msg*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ISO8583WS__CISO8583Msg*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ISO8583WS__CISO8583Msg(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ISO8583WS__CISO8583Msg %p -> %p\n", q, p));
	*(ISO8583WS__CISO8583Msg*)p = *(ISO8583WS__CISO8583Msg*)q;
}

void ISO8583WS__ArrayOfCISO8583Msg::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerToISO8583WS__CISO8583Msg(soap, &this->ISO8583WS__ArrayOfCISO8583Msg::CISO8583Msg);
	/* transient soap skipped */
}

void ISO8583WS__ArrayOfCISO8583Msg::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerToISO8583WS__CISO8583Msg(soap, &this->ISO8583WS__ArrayOfCISO8583Msg::CISO8583Msg);
	/* transient soap skipped */
}

int ISO8583WS__ArrayOfCISO8583Msg::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ISO8583WS__ArrayOfCISO8583Msg);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ISO8583WS__ArrayOfCISO8583Msg::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ISO8583WS__ArrayOfCISO8583Msg(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ISO8583WS__ArrayOfCISO8583Msg(struct soap *soap, const char *tag, int id, const ISO8583WS__ArrayOfCISO8583Msg *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ISO8583WS__ArrayOfCISO8583Msg), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerToISO8583WS__CISO8583Msg(soap, "ISO8583WS:CISO8583Msg", -1, &(a->ISO8583WS__ArrayOfCISO8583Msg::CISO8583Msg), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ISO8583WS__ArrayOfCISO8583Msg::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ISO8583WS__ArrayOfCISO8583Msg(soap, this, tag, type);
}

SOAP_FMAC3 ISO8583WS__ArrayOfCISO8583Msg * SOAP_FMAC4 soap_get_ISO8583WS__ArrayOfCISO8583Msg(struct soap *soap, ISO8583WS__ArrayOfCISO8583Msg *p, const char *tag, const char *type)
{
	if ((p = soap_in_ISO8583WS__ArrayOfCISO8583Msg(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ISO8583WS__ArrayOfCISO8583Msg::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ISO8583WS__ArrayOfCISO8583Msg(soap, tag, this, type);
}

SOAP_FMAC3 ISO8583WS__ArrayOfCISO8583Msg * SOAP_FMAC4 soap_in_ISO8583WS__ArrayOfCISO8583Msg(struct soap *soap, const char *tag, ISO8583WS__ArrayOfCISO8583Msg *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ISO8583WS__ArrayOfCISO8583Msg *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ISO8583WS__ArrayOfCISO8583Msg, sizeof(ISO8583WS__ArrayOfCISO8583Msg), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ISO8583WS__ArrayOfCISO8583Msg)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ISO8583WS__ArrayOfCISO8583Msg *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerToISO8583WS__CISO8583Msg(soap, "ISO8583WS:CISO8583Msg", &(a->ISO8583WS__ArrayOfCISO8583Msg::CISO8583Msg), "ISO8583WS:CISO8583Msg"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ISO8583WS__ArrayOfCISO8583Msg *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ISO8583WS__ArrayOfCISO8583Msg, 0, sizeof(ISO8583WS__ArrayOfCISO8583Msg), 0, soap_copy_ISO8583WS__ArrayOfCISO8583Msg);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ISO8583WS__ArrayOfCISO8583Msg * SOAP_FMAC6 soap_new_ISO8583WS__ArrayOfCISO8583Msg(struct soap *soap, int n)
{	return soap_instantiate_ISO8583WS__ArrayOfCISO8583Msg(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ISO8583WS__ArrayOfCISO8583Msg(struct soap *soap, ISO8583WS__ArrayOfCISO8583Msg *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ISO8583WS__ArrayOfCISO8583Msg * SOAP_FMAC4 soap_instantiate_ISO8583WS__ArrayOfCISO8583Msg(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ISO8583WS__ArrayOfCISO8583Msg(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ISO8583WS__ArrayOfCISO8583Msg, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ISO8583WS__ArrayOfCISO8583Msg;
		if (size)
			*size = sizeof(ISO8583WS__ArrayOfCISO8583Msg);
		((ISO8583WS__ArrayOfCISO8583Msg*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ISO8583WS__ArrayOfCISO8583Msg[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ISO8583WS__ArrayOfCISO8583Msg);
		for (int i = 0; i < n; i++)
			((ISO8583WS__ArrayOfCISO8583Msg*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ISO8583WS__ArrayOfCISO8583Msg*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ISO8583WS__ArrayOfCISO8583Msg(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ISO8583WS__ArrayOfCISO8583Msg %p -> %p\n", q, p));
	*(ISO8583WS__ArrayOfCISO8583Msg*)p = *(ISO8583WS__ArrayOfCISO8583Msg*)q;
}

void xsd__hexBinary::soap_default(struct soap *soap)
{
	this->__size = 0;
	this->__ptr = NULL;
}

void xsd__hexBinary::soap_serialize(struct soap *soap) const
{
	if (this->__ptr)
		soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_xsd__hexBinary);
}

int xsd__hexBinary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_xsd__hexBinary);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__hexBinary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__hexBinary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__hexBinary(struct soap *soap, const char *tag, int id, const xsd__hexBinary *a, const char *type)
{
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_xsd__hexBinary);
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_puthex(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *xsd__hexBinary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__hexBinary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_get_xsd__hexBinary(struct soap *soap, xsd__hexBinary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__hexBinary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *xsd__hexBinary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__hexBinary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_in_xsd__hexBinary(struct soap *soap, const char *tag, xsd__hexBinary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":hexBinary"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__hexBinary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__hexBinary, sizeof(xsd__hexBinary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_gethex(soap, &a->__size);
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (xsd__hexBinary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__hexBinary, 0, sizeof(xsd__hexBinary), 0, soap_copy_xsd__hexBinary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 xsd__hexBinary * SOAP_FMAC6 soap_new_xsd__hexBinary(struct soap *soap, int n)
{	return soap_instantiate_xsd__hexBinary(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__hexBinary(struct soap *soap, xsd__hexBinary *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_instantiate_xsd__hexBinary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__hexBinary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__hexBinary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new xsd__hexBinary;
		if (size)
			*size = sizeof(xsd__hexBinary);
	}
	else
	{	cp->ptr = (void*)new xsd__hexBinary[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__hexBinary);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__hexBinary*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__hexBinary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__hexBinary %p -> %p\n", q, p));
	*(xsd__hexBinary*)p = *(xsd__hexBinary*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	short soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ISO8583WS12__ISO8583Request(struct soap *soap, struct __ISO8583WS12__ISO8583Request *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ISO8583WS__ISO8583Request = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ISO8583WS12__ISO8583Request(struct soap *soap, const struct __ISO8583WS12__ISO8583Request *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ISO8583WS__ISO8583Request(soap, &a->ISO8583WS__ISO8583Request);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ISO8583WS12__ISO8583Request(struct soap *soap, const struct __ISO8583WS12__ISO8583Request *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ISO8583WS12__ISO8583Request(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ISO8583WS12__ISO8583Request(struct soap *soap, const char *tag, int id, const struct __ISO8583WS12__ISO8583Request *a, const char *type)
{
	if (soap_out_PointerTo_ISO8583WS__ISO8583Request(soap, "ISO8583WS:ISO8583Request", -1, &a->ISO8583WS__ISO8583Request, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ISO8583WS12__ISO8583Request * SOAP_FMAC4 soap_get___ISO8583WS12__ISO8583Request(struct soap *soap, struct __ISO8583WS12__ISO8583Request *p, const char *tag, const char *type)
{
	if ((p = soap_in___ISO8583WS12__ISO8583Request(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ISO8583WS12__ISO8583Request * SOAP_FMAC4 soap_in___ISO8583WS12__ISO8583Request(struct soap *soap, const char *tag, struct __ISO8583WS12__ISO8583Request *a, const char *type)
{
	short soap_flag_ISO8583WS__ISO8583Request = 1;
	short soap_flag;
	a = (struct __ISO8583WS12__ISO8583Request *)soap_id_enter(soap, "", a, SOAP_TYPE___ISO8583WS12__ISO8583Request, sizeof(struct __ISO8583WS12__ISO8583Request), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ISO8583WS12__ISO8583Request(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ISO8583WS__ISO8583Request && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ISO8583WS__ISO8583Request(soap, "ISO8583WS:ISO8583Request", &a->ISO8583WS__ISO8583Request, ""))
				{	soap_flag_ISO8583WS__ISO8583Request--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ISO8583WS12__ISO8583Request * SOAP_FMAC6 soap_new___ISO8583WS12__ISO8583Request(struct soap *soap, int n)
{	return soap_instantiate___ISO8583WS12__ISO8583Request(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ISO8583WS12__ISO8583Request(struct soap *soap, struct __ISO8583WS12__ISO8583Request *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ISO8583WS12__ISO8583Request * SOAP_FMAC4 soap_instantiate___ISO8583WS12__ISO8583Request(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ISO8583WS12__ISO8583Request(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ISO8583WS12__ISO8583Request, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ISO8583WS12__ISO8583Request;
		if (size)
			*size = sizeof(struct __ISO8583WS12__ISO8583Request);
	}
	else
	{	cp->ptr = (void*)new struct __ISO8583WS12__ISO8583Request[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ISO8583WS12__ISO8583Request);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ISO8583WS12__ISO8583Request*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ISO8583WS12__ISO8583Request(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ISO8583WS12__ISO8583Request %p -> %p\n", q, p));
	*(struct __ISO8583WS12__ISO8583Request*)p = *(struct __ISO8583WS12__ISO8583Request*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ISO8583WS11__ISO8583Request(struct soap *soap, struct __ISO8583WS11__ISO8583Request *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ISO8583WS__ISO8583Request = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ISO8583WS11__ISO8583Request(struct soap *soap, const struct __ISO8583WS11__ISO8583Request *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ISO8583WS__ISO8583Request(soap, &a->ISO8583WS__ISO8583Request);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ISO8583WS11__ISO8583Request(struct soap *soap, const struct __ISO8583WS11__ISO8583Request *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ISO8583WS11__ISO8583Request(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ISO8583WS11__ISO8583Request(struct soap *soap, const char *tag, int id, const struct __ISO8583WS11__ISO8583Request *a, const char *type)
{
	if (soap_out_PointerTo_ISO8583WS__ISO8583Request(soap, "ISO8583WS:ISO8583Request", -1, &a->ISO8583WS__ISO8583Request, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ISO8583WS11__ISO8583Request * SOAP_FMAC4 soap_get___ISO8583WS11__ISO8583Request(struct soap *soap, struct __ISO8583WS11__ISO8583Request *p, const char *tag, const char *type)
{
	if ((p = soap_in___ISO8583WS11__ISO8583Request(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ISO8583WS11__ISO8583Request * SOAP_FMAC4 soap_in___ISO8583WS11__ISO8583Request(struct soap *soap, const char *tag, struct __ISO8583WS11__ISO8583Request *a, const char *type)
{
	short soap_flag_ISO8583WS__ISO8583Request = 1;
	short soap_flag;
	a = (struct __ISO8583WS11__ISO8583Request *)soap_id_enter(soap, "", a, SOAP_TYPE___ISO8583WS11__ISO8583Request, sizeof(struct __ISO8583WS11__ISO8583Request), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ISO8583WS11__ISO8583Request(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ISO8583WS__ISO8583Request && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ISO8583WS__ISO8583Request(soap, "ISO8583WS:ISO8583Request", &a->ISO8583WS__ISO8583Request, ""))
				{	soap_flag_ISO8583WS__ISO8583Request--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ISO8583WS11__ISO8583Request * SOAP_FMAC6 soap_new___ISO8583WS11__ISO8583Request(struct soap *soap, int n)
{	return soap_instantiate___ISO8583WS11__ISO8583Request(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ISO8583WS11__ISO8583Request(struct soap *soap, struct __ISO8583WS11__ISO8583Request *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ISO8583WS11__ISO8583Request * SOAP_FMAC4 soap_instantiate___ISO8583WS11__ISO8583Request(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ISO8583WS11__ISO8583Request(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ISO8583WS11__ISO8583Request, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ISO8583WS11__ISO8583Request;
		if (size)
			*size = sizeof(struct __ISO8583WS11__ISO8583Request);
	}
	else
	{	cp->ptr = (void*)new struct __ISO8583WS11__ISO8583Request[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ISO8583WS11__ISO8583Request);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ISO8583WS11__ISO8583Request*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ISO8583WS11__ISO8583Request(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ISO8583WS11__ISO8583Request %p -> %p\n", q, p));
	*(struct __ISO8583WS11__ISO8583Request*)p = *(struct __ISO8583WS11__ISO8583Request*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ISO8583WS__ISO8583RequestResponse(struct soap *soap, _ISO8583WS__ISO8583RequestResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ISO8583WS__ISO8583RequestResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ISO8583WS__ISO8583RequestResponse(struct soap *soap, _ISO8583WS__ISO8583RequestResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ISO8583WS__ISO8583RequestResponse);
	if (soap_out_PointerTo_ISO8583WS__ISO8583RequestResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ISO8583WS__ISO8583RequestResponse(struct soap *soap, const char *tag, int id, _ISO8583WS__ISO8583RequestResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ISO8583WS__ISO8583RequestResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ISO8583WS__ISO8583RequestResponse ** SOAP_FMAC4 soap_get_PointerTo_ISO8583WS__ISO8583RequestResponse(struct soap *soap, _ISO8583WS__ISO8583RequestResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ISO8583WS__ISO8583RequestResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ISO8583WS__ISO8583RequestResponse ** SOAP_FMAC4 soap_in_PointerTo_ISO8583WS__ISO8583RequestResponse(struct soap *soap, const char *tag, _ISO8583WS__ISO8583RequestResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ISO8583WS__ISO8583RequestResponse **)soap_malloc(soap, sizeof(_ISO8583WS__ISO8583RequestResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ISO8583WS__ISO8583RequestResponse *)soap_instantiate__ISO8583WS__ISO8583RequestResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ISO8583WS__ISO8583RequestResponse ** p = (_ISO8583WS__ISO8583RequestResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ISO8583WS__ISO8583RequestResponse, sizeof(_ISO8583WS__ISO8583RequestResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ISO8583WS__ISO8583Request(struct soap *soap, _ISO8583WS__ISO8583Request *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ISO8583WS__ISO8583Request))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ISO8583WS__ISO8583Request(struct soap *soap, _ISO8583WS__ISO8583Request *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ISO8583WS__ISO8583Request);
	if (soap_out_PointerTo_ISO8583WS__ISO8583Request(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ISO8583WS__ISO8583Request(struct soap *soap, const char *tag, int id, _ISO8583WS__ISO8583Request *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ISO8583WS__ISO8583Request);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ISO8583WS__ISO8583Request ** SOAP_FMAC4 soap_get_PointerTo_ISO8583WS__ISO8583Request(struct soap *soap, _ISO8583WS__ISO8583Request **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ISO8583WS__ISO8583Request(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ISO8583WS__ISO8583Request ** SOAP_FMAC4 soap_in_PointerTo_ISO8583WS__ISO8583Request(struct soap *soap, const char *tag, _ISO8583WS__ISO8583Request **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ISO8583WS__ISO8583Request **)soap_malloc(soap, sizeof(_ISO8583WS__ISO8583Request *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ISO8583WS__ISO8583Request *)soap_instantiate__ISO8583WS__ISO8583Request(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ISO8583WS__ISO8583Request ** p = (_ISO8583WS__ISO8583Request **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ISO8583WS__ISO8583Request, sizeof(_ISO8583WS__ISO8583Request), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToISO8583WS__ArrayOfCISO8583Msg(struct soap *soap, ISO8583WS__ArrayOfCISO8583Msg *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ISO8583WS__ArrayOfCISO8583Msg))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToISO8583WS__ArrayOfCISO8583Msg(struct soap *soap, ISO8583WS__ArrayOfCISO8583Msg *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToISO8583WS__ArrayOfCISO8583Msg);
	if (soap_out_PointerToISO8583WS__ArrayOfCISO8583Msg(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToISO8583WS__ArrayOfCISO8583Msg(struct soap *soap, const char *tag, int id, ISO8583WS__ArrayOfCISO8583Msg *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ISO8583WS__ArrayOfCISO8583Msg);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ISO8583WS__ArrayOfCISO8583Msg ** SOAP_FMAC4 soap_get_PointerToISO8583WS__ArrayOfCISO8583Msg(struct soap *soap, ISO8583WS__ArrayOfCISO8583Msg **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToISO8583WS__ArrayOfCISO8583Msg(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ISO8583WS__ArrayOfCISO8583Msg ** SOAP_FMAC4 soap_in_PointerToISO8583WS__ArrayOfCISO8583Msg(struct soap *soap, const char *tag, ISO8583WS__ArrayOfCISO8583Msg **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ISO8583WS__ArrayOfCISO8583Msg **)soap_malloc(soap, sizeof(ISO8583WS__ArrayOfCISO8583Msg *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ISO8583WS__ArrayOfCISO8583Msg *)soap_instantiate_ISO8583WS__ArrayOfCISO8583Msg(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ISO8583WS__ArrayOfCISO8583Msg ** p = (ISO8583WS__ArrayOfCISO8583Msg **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ISO8583WS__ArrayOfCISO8583Msg, sizeof(ISO8583WS__ArrayOfCISO8583Msg), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToISO8583WS__ISO8583Field(struct soap *soap, ISO8583WS__ISO8583Field *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ISO8583WS__ISO8583Field))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToISO8583WS__ISO8583Field(struct soap *soap, ISO8583WS__ISO8583Field *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToISO8583WS__ISO8583Field);
	if (soap_out_PointerToISO8583WS__ISO8583Field(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToISO8583WS__ISO8583Field(struct soap *soap, const char *tag, int id, ISO8583WS__ISO8583Field *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ISO8583WS__ISO8583Field);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ISO8583WS__ISO8583Field ** SOAP_FMAC4 soap_get_PointerToISO8583WS__ISO8583Field(struct soap *soap, ISO8583WS__ISO8583Field **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToISO8583WS__ISO8583Field(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ISO8583WS__ISO8583Field ** SOAP_FMAC4 soap_in_PointerToISO8583WS__ISO8583Field(struct soap *soap, const char *tag, ISO8583WS__ISO8583Field **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ISO8583WS__ISO8583Field **)soap_malloc(soap, sizeof(ISO8583WS__ISO8583Field *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ISO8583WS__ISO8583Field *)soap_instantiate_ISO8583WS__ISO8583Field(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ISO8583WS__ISO8583Field ** p = (ISO8583WS__ISO8583Field **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ISO8583WS__ISO8583Field, sizeof(ISO8583WS__ISO8583Field), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__hexBinary(struct soap *soap, xsd__hexBinary *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__hexBinary(struct soap *soap, xsd__hexBinary *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToxsd__hexBinary);
	if (soap_out_PointerToxsd__hexBinary(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__hexBinary(struct soap *soap, const char *tag, int id, xsd__hexBinary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptr, 1, type, SOAP_TYPE_xsd__hexBinary);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 xsd__hexBinary ** SOAP_FMAC4 soap_get_PointerToxsd__hexBinary(struct soap *soap, xsd__hexBinary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__hexBinary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 xsd__hexBinary ** SOAP_FMAC4 soap_in_PointerToxsd__hexBinary(struct soap *soap, const char *tag, xsd__hexBinary **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (xsd__hexBinary **)soap_malloc(soap, sizeof(xsd__hexBinary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (xsd__hexBinary *)soap_instantiate_xsd__hexBinary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	xsd__hexBinary ** p = (xsd__hexBinary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__hexBinary, sizeof(xsd__hexBinary), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToISO8583WS__Bin(struct soap *soap, ISO8583WS__Bin *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ISO8583WS__Bin))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToISO8583WS__Bin(struct soap *soap, ISO8583WS__Bin *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToISO8583WS__Bin);
	if (soap_out_PointerToISO8583WS__Bin(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToISO8583WS__Bin(struct soap *soap, const char *tag, int id, ISO8583WS__Bin *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ISO8583WS__Bin);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ISO8583WS__Bin ** SOAP_FMAC4 soap_get_PointerToISO8583WS__Bin(struct soap *soap, ISO8583WS__Bin **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToISO8583WS__Bin(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ISO8583WS__Bin ** SOAP_FMAC4 soap_in_PointerToISO8583WS__Bin(struct soap *soap, const char *tag, ISO8583WS__Bin **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ISO8583WS__Bin **)soap_malloc(soap, sizeof(ISO8583WS__Bin *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ISO8583WS__Bin *)soap_instantiate_ISO8583WS__Bin(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ISO8583WS__Bin ** p = (ISO8583WS__Bin **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ISO8583WS__Bin, sizeof(ISO8583WS__Bin), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToISO8583WS__Num(struct soap *soap, ISO8583WS__Num *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ISO8583WS__Num))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToISO8583WS__Num(struct soap *soap, ISO8583WS__Num *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToISO8583WS__Num);
	if (soap_out_PointerToISO8583WS__Num(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToISO8583WS__Num(struct soap *soap, const char *tag, int id, ISO8583WS__Num *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ISO8583WS__Num);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ISO8583WS__Num ** SOAP_FMAC4 soap_get_PointerToISO8583WS__Num(struct soap *soap, ISO8583WS__Num **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToISO8583WS__Num(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ISO8583WS__Num ** SOAP_FMAC4 soap_in_PointerToISO8583WS__Num(struct soap *soap, const char *tag, ISO8583WS__Num **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ISO8583WS__Num **)soap_malloc(soap, sizeof(ISO8583WS__Num *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ISO8583WS__Num *)soap_instantiate_ISO8583WS__Num(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ISO8583WS__Num ** p = (ISO8583WS__Num **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ISO8583WS__Num, sizeof(ISO8583WS__Num), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToISO8583WS__AlNum(struct soap *soap, ISO8583WS__AlNum *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ISO8583WS__AlNum))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToISO8583WS__AlNum(struct soap *soap, ISO8583WS__AlNum *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToISO8583WS__AlNum);
	if (soap_out_PointerToISO8583WS__AlNum(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToISO8583WS__AlNum(struct soap *soap, const char *tag, int id, ISO8583WS__AlNum *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ISO8583WS__AlNum);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ISO8583WS__AlNum ** SOAP_FMAC4 soap_get_PointerToISO8583WS__AlNum(struct soap *soap, ISO8583WS__AlNum **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToISO8583WS__AlNum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ISO8583WS__AlNum ** SOAP_FMAC4 soap_in_PointerToISO8583WS__AlNum(struct soap *soap, const char *tag, ISO8583WS__AlNum **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ISO8583WS__AlNum **)soap_malloc(soap, sizeof(ISO8583WS__AlNum *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ISO8583WS__AlNum *)soap_instantiate_ISO8583WS__AlNum(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ISO8583WS__AlNum ** p = (ISO8583WS__AlNum **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ISO8583WS__AlNum, sizeof(ISO8583WS__AlNum), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToISO8583WS__ArrayOfISO8583Field(struct soap *soap, ISO8583WS__ArrayOfISO8583Field *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ISO8583WS__ArrayOfISO8583Field))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToISO8583WS__ArrayOfISO8583Field(struct soap *soap, ISO8583WS__ArrayOfISO8583Field *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToISO8583WS__ArrayOfISO8583Field);
	if (soap_out_PointerToISO8583WS__ArrayOfISO8583Field(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToISO8583WS__ArrayOfISO8583Field(struct soap *soap, const char *tag, int id, ISO8583WS__ArrayOfISO8583Field *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ISO8583WS__ArrayOfISO8583Field);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ISO8583WS__ArrayOfISO8583Field ** SOAP_FMAC4 soap_get_PointerToISO8583WS__ArrayOfISO8583Field(struct soap *soap, ISO8583WS__ArrayOfISO8583Field **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToISO8583WS__ArrayOfISO8583Field(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ISO8583WS__ArrayOfISO8583Field ** SOAP_FMAC4 soap_in_PointerToISO8583WS__ArrayOfISO8583Field(struct soap *soap, const char *tag, ISO8583WS__ArrayOfISO8583Field **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ISO8583WS__ArrayOfISO8583Field **)soap_malloc(soap, sizeof(ISO8583WS__ArrayOfISO8583Field *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ISO8583WS__ArrayOfISO8583Field *)soap_instantiate_ISO8583WS__ArrayOfISO8583Field(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ISO8583WS__ArrayOfISO8583Field ** p = (ISO8583WS__ArrayOfISO8583Field **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ISO8583WS__ArrayOfISO8583Field, sizeof(ISO8583WS__ArrayOfISO8583Field), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToISO8583WS__ArrayOfBin(struct soap *soap, ISO8583WS__ArrayOfBin *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ISO8583WS__ArrayOfBin))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToISO8583WS__ArrayOfBin(struct soap *soap, ISO8583WS__ArrayOfBin *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToISO8583WS__ArrayOfBin);
	if (soap_out_PointerToISO8583WS__ArrayOfBin(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToISO8583WS__ArrayOfBin(struct soap *soap, const char *tag, int id, ISO8583WS__ArrayOfBin *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ISO8583WS__ArrayOfBin);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ISO8583WS__ArrayOfBin ** SOAP_FMAC4 soap_get_PointerToISO8583WS__ArrayOfBin(struct soap *soap, ISO8583WS__ArrayOfBin **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToISO8583WS__ArrayOfBin(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ISO8583WS__ArrayOfBin ** SOAP_FMAC4 soap_in_PointerToISO8583WS__ArrayOfBin(struct soap *soap, const char *tag, ISO8583WS__ArrayOfBin **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ISO8583WS__ArrayOfBin **)soap_malloc(soap, sizeof(ISO8583WS__ArrayOfBin *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ISO8583WS__ArrayOfBin *)soap_instantiate_ISO8583WS__ArrayOfBin(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ISO8583WS__ArrayOfBin ** p = (ISO8583WS__ArrayOfBin **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ISO8583WS__ArrayOfBin, sizeof(ISO8583WS__ArrayOfBin), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToISO8583WS__ArrayOfNum(struct soap *soap, ISO8583WS__ArrayOfNum *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ISO8583WS__ArrayOfNum))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToISO8583WS__ArrayOfNum(struct soap *soap, ISO8583WS__ArrayOfNum *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToISO8583WS__ArrayOfNum);
	if (soap_out_PointerToISO8583WS__ArrayOfNum(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToISO8583WS__ArrayOfNum(struct soap *soap, const char *tag, int id, ISO8583WS__ArrayOfNum *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ISO8583WS__ArrayOfNum);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ISO8583WS__ArrayOfNum ** SOAP_FMAC4 soap_get_PointerToISO8583WS__ArrayOfNum(struct soap *soap, ISO8583WS__ArrayOfNum **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToISO8583WS__ArrayOfNum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ISO8583WS__ArrayOfNum ** SOAP_FMAC4 soap_in_PointerToISO8583WS__ArrayOfNum(struct soap *soap, const char *tag, ISO8583WS__ArrayOfNum **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ISO8583WS__ArrayOfNum **)soap_malloc(soap, sizeof(ISO8583WS__ArrayOfNum *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ISO8583WS__ArrayOfNum *)soap_instantiate_ISO8583WS__ArrayOfNum(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ISO8583WS__ArrayOfNum ** p = (ISO8583WS__ArrayOfNum **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ISO8583WS__ArrayOfNum, sizeof(ISO8583WS__ArrayOfNum), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToISO8583WS__ArrayOfAlNum(struct soap *soap, ISO8583WS__ArrayOfAlNum *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ISO8583WS__ArrayOfAlNum))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToISO8583WS__ArrayOfAlNum(struct soap *soap, ISO8583WS__ArrayOfAlNum *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToISO8583WS__ArrayOfAlNum);
	if (soap_out_PointerToISO8583WS__ArrayOfAlNum(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToISO8583WS__ArrayOfAlNum(struct soap *soap, const char *tag, int id, ISO8583WS__ArrayOfAlNum *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ISO8583WS__ArrayOfAlNum);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ISO8583WS__ArrayOfAlNum ** SOAP_FMAC4 soap_get_PointerToISO8583WS__ArrayOfAlNum(struct soap *soap, ISO8583WS__ArrayOfAlNum **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToISO8583WS__ArrayOfAlNum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ISO8583WS__ArrayOfAlNum ** SOAP_FMAC4 soap_in_PointerToISO8583WS__ArrayOfAlNum(struct soap *soap, const char *tag, ISO8583WS__ArrayOfAlNum **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ISO8583WS__ArrayOfAlNum **)soap_malloc(soap, sizeof(ISO8583WS__ArrayOfAlNum *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ISO8583WS__ArrayOfAlNum *)soap_instantiate_ISO8583WS__ArrayOfAlNum(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ISO8583WS__ArrayOfAlNum ** p = (ISO8583WS__ArrayOfAlNum **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ISO8583WS__ArrayOfAlNum, sizeof(ISO8583WS__ArrayOfAlNum), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToISO8583WS__CISO8583Msg(struct soap *soap, ISO8583WS__CISO8583Msg *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ISO8583WS__CISO8583Msg))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToISO8583WS__CISO8583Msg(struct soap *soap, ISO8583WS__CISO8583Msg *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToISO8583WS__CISO8583Msg);
	if (soap_out_PointerToISO8583WS__CISO8583Msg(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToISO8583WS__CISO8583Msg(struct soap *soap, const char *tag, int id, ISO8583WS__CISO8583Msg *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ISO8583WS__CISO8583Msg);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ISO8583WS__CISO8583Msg ** SOAP_FMAC4 soap_get_PointerToISO8583WS__CISO8583Msg(struct soap *soap, ISO8583WS__CISO8583Msg **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToISO8583WS__CISO8583Msg(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ISO8583WS__CISO8583Msg ** SOAP_FMAC4 soap_in_PointerToISO8583WS__CISO8583Msg(struct soap *soap, const char *tag, ISO8583WS__CISO8583Msg **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ISO8583WS__CISO8583Msg **)soap_malloc(soap, sizeof(ISO8583WS__CISO8583Msg *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ISO8583WS__CISO8583Msg *)soap_instantiate_ISO8583WS__CISO8583Msg(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ISO8583WS__CISO8583Msg ** p = (ISO8583WS__CISO8583Msg **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ISO8583WS__CISO8583Msg, sizeof(ISO8583WS__CISO8583Msg), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToISO8583WS__ISO8583Field(struct soap *soap, std::vector<ISO8583WS__ISO8583Field * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToISO8583WS__ISO8583Field(struct soap *soap, const std::vector<ISO8583WS__ISO8583Field * >*a)
{
	for (std::vector<ISO8583WS__ISO8583Field * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerToISO8583WS__ISO8583Field(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToISO8583WS__ISO8583Field(struct soap *soap, const char *tag, int id, const std::vector<ISO8583WS__ISO8583Field * >*a, const char *type)
{
	for (std::vector<ISO8583WS__ISO8583Field * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerToISO8583WS__ISO8583Field(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ISO8583WS__ISO8583Field * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToISO8583WS__ISO8583Field(struct soap *soap, const char *tag, std::vector<ISO8583WS__ISO8583Field * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerToISO8583WS__ISO8583Field(soap, -1)))
		return NULL;
	ISO8583WS__ISO8583Field *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ISO8583WS__ISO8583Field, SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__ISO8583Field, sizeof(ISO8583WS__ISO8583Field), 1))
				break;
			if (!soap_in_PointerToISO8583WS__ISO8583Field(soap, tag, NULL, "ISO8583WS:ISO8583Field"))
				break;
		}
		else
		{
			if (!soap_in_PointerToISO8583WS__ISO8583Field(soap, tag, &n, "ISO8583WS:ISO8583Field"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (!soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<ISO8583WS__ISO8583Field * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerToISO8583WS__ISO8583Field(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerToISO8583WS__ISO8583Field(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerToISO8583WS__ISO8583Field(struct soap *soap, std::vector<ISO8583WS__ISO8583Field * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<ISO8583WS__ISO8583Field * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerToISO8583WS__ISO8583Field(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerToISO8583WS__ISO8583Field(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__ISO8583Field, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<ISO8583WS__ISO8583Field * >;
		if (size)
			*size = sizeof(std::vector<ISO8583WS__ISO8583Field * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<ISO8583WS__ISO8583Field * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ISO8583WS__ISO8583Field * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ISO8583WS__ISO8583Field * >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerToISO8583WS__ISO8583Field(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ISO8583WS__ISO8583Field * > %p -> %p\n", q, p));
	*(std::vector<ISO8583WS__ISO8583Field * >*)p = *(std::vector<ISO8583WS__ISO8583Field * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToISO8583WS__Bin(struct soap *soap, std::vector<ISO8583WS__Bin * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToISO8583WS__Bin(struct soap *soap, const std::vector<ISO8583WS__Bin * >*a)
{
	for (std::vector<ISO8583WS__Bin * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerToISO8583WS__Bin(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToISO8583WS__Bin(struct soap *soap, const char *tag, int id, const std::vector<ISO8583WS__Bin * >*a, const char *type)
{
	for (std::vector<ISO8583WS__Bin * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerToISO8583WS__Bin(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ISO8583WS__Bin * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToISO8583WS__Bin(struct soap *soap, const char *tag, std::vector<ISO8583WS__Bin * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerToISO8583WS__Bin(soap, -1)))
		return NULL;
	ISO8583WS__Bin *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ISO8583WS__Bin, SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__Bin, sizeof(ISO8583WS__Bin), 1))
				break;
			if (!soap_in_PointerToISO8583WS__Bin(soap, tag, NULL, "ISO8583WS:Bin"))
				break;
		}
		else
		{
			if (!soap_in_PointerToISO8583WS__Bin(soap, tag, &n, "ISO8583WS:Bin"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (!soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<ISO8583WS__Bin * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerToISO8583WS__Bin(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerToISO8583WS__Bin(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerToISO8583WS__Bin(struct soap *soap, std::vector<ISO8583WS__Bin * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<ISO8583WS__Bin * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerToISO8583WS__Bin(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerToISO8583WS__Bin(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__Bin, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<ISO8583WS__Bin * >;
		if (size)
			*size = sizeof(std::vector<ISO8583WS__Bin * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<ISO8583WS__Bin * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ISO8583WS__Bin * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ISO8583WS__Bin * >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerToISO8583WS__Bin(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ISO8583WS__Bin * > %p -> %p\n", q, p));
	*(std::vector<ISO8583WS__Bin * >*)p = *(std::vector<ISO8583WS__Bin * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToISO8583WS__Num(struct soap *soap, std::vector<ISO8583WS__Num * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToISO8583WS__Num(struct soap *soap, const std::vector<ISO8583WS__Num * >*a)
{
	for (std::vector<ISO8583WS__Num * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerToISO8583WS__Num(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToISO8583WS__Num(struct soap *soap, const char *tag, int id, const std::vector<ISO8583WS__Num * >*a, const char *type)
{
	for (std::vector<ISO8583WS__Num * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerToISO8583WS__Num(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ISO8583WS__Num * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToISO8583WS__Num(struct soap *soap, const char *tag, std::vector<ISO8583WS__Num * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerToISO8583WS__Num(soap, -1)))
		return NULL;
	ISO8583WS__Num *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ISO8583WS__Num, SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__Num, sizeof(ISO8583WS__Num), 1))
				break;
			if (!soap_in_PointerToISO8583WS__Num(soap, tag, NULL, "ISO8583WS:Num"))
				break;
		}
		else
		{
			if (!soap_in_PointerToISO8583WS__Num(soap, tag, &n, "ISO8583WS:Num"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (!soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<ISO8583WS__Num * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerToISO8583WS__Num(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerToISO8583WS__Num(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerToISO8583WS__Num(struct soap *soap, std::vector<ISO8583WS__Num * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<ISO8583WS__Num * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerToISO8583WS__Num(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerToISO8583WS__Num(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__Num, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<ISO8583WS__Num * >;
		if (size)
			*size = sizeof(std::vector<ISO8583WS__Num * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<ISO8583WS__Num * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ISO8583WS__Num * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ISO8583WS__Num * >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerToISO8583WS__Num(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ISO8583WS__Num * > %p -> %p\n", q, p));
	*(std::vector<ISO8583WS__Num * >*)p = *(std::vector<ISO8583WS__Num * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToISO8583WS__AlNum(struct soap *soap, std::vector<ISO8583WS__AlNum * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToISO8583WS__AlNum(struct soap *soap, const std::vector<ISO8583WS__AlNum * >*a)
{
	for (std::vector<ISO8583WS__AlNum * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerToISO8583WS__AlNum(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToISO8583WS__AlNum(struct soap *soap, const char *tag, int id, const std::vector<ISO8583WS__AlNum * >*a, const char *type)
{
	for (std::vector<ISO8583WS__AlNum * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerToISO8583WS__AlNum(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ISO8583WS__AlNum * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToISO8583WS__AlNum(struct soap *soap, const char *tag, std::vector<ISO8583WS__AlNum * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerToISO8583WS__AlNum(soap, -1)))
		return NULL;
	ISO8583WS__AlNum *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ISO8583WS__AlNum, SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__AlNum, sizeof(ISO8583WS__AlNum), 1))
				break;
			if (!soap_in_PointerToISO8583WS__AlNum(soap, tag, NULL, "ISO8583WS:AlNum"))
				break;
		}
		else
		{
			if (!soap_in_PointerToISO8583WS__AlNum(soap, tag, &n, "ISO8583WS:AlNum"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (!soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<ISO8583WS__AlNum * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerToISO8583WS__AlNum(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerToISO8583WS__AlNum(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerToISO8583WS__AlNum(struct soap *soap, std::vector<ISO8583WS__AlNum * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<ISO8583WS__AlNum * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerToISO8583WS__AlNum(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerToISO8583WS__AlNum(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__AlNum, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<ISO8583WS__AlNum * >;
		if (size)
			*size = sizeof(std::vector<ISO8583WS__AlNum * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<ISO8583WS__AlNum * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ISO8583WS__AlNum * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ISO8583WS__AlNum * >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerToISO8583WS__AlNum(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ISO8583WS__AlNum * > %p -> %p\n", q, p));
	*(std::vector<ISO8583WS__AlNum * >*)p = *(std::vector<ISO8583WS__AlNum * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToISO8583WS__CISO8583Msg(struct soap *soap, std::vector<ISO8583WS__CISO8583Msg * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToISO8583WS__CISO8583Msg(struct soap *soap, const std::vector<ISO8583WS__CISO8583Msg * >*a)
{
	for (std::vector<ISO8583WS__CISO8583Msg * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerToISO8583WS__CISO8583Msg(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToISO8583WS__CISO8583Msg(struct soap *soap, const char *tag, int id, const std::vector<ISO8583WS__CISO8583Msg * >*a, const char *type)
{
	for (std::vector<ISO8583WS__CISO8583Msg * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerToISO8583WS__CISO8583Msg(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ISO8583WS__CISO8583Msg * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToISO8583WS__CISO8583Msg(struct soap *soap, const char *tag, std::vector<ISO8583WS__CISO8583Msg * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerToISO8583WS__CISO8583Msg(soap, -1)))
		return NULL;
	ISO8583WS__CISO8583Msg *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ISO8583WS__CISO8583Msg, SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__CISO8583Msg, sizeof(ISO8583WS__CISO8583Msg), 1))
				break;
			if (!soap_in_PointerToISO8583WS__CISO8583Msg(soap, tag, NULL, "ISO8583WS:CISO8583Msg"))
				break;
		}
		else
		{
			if (!soap_in_PointerToISO8583WS__CISO8583Msg(soap, tag, &n, "ISO8583WS:CISO8583Msg"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (!soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<ISO8583WS__CISO8583Msg * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerToISO8583WS__CISO8583Msg(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerToISO8583WS__CISO8583Msg(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerToISO8583WS__CISO8583Msg(struct soap *soap, std::vector<ISO8583WS__CISO8583Msg * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<ISO8583WS__CISO8583Msg * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerToISO8583WS__CISO8583Msg(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerToISO8583WS__CISO8583Msg(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerToISO8583WS__CISO8583Msg, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<ISO8583WS__CISO8583Msg * >;
		if (size)
			*size = sizeof(std::vector<ISO8583WS__CISO8583Msg * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<ISO8583WS__CISO8583Msg * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ISO8583WS__CISO8583Msg * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ISO8583WS__CISO8583Msg * >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerToISO8583WS__CISO8583Msg(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ISO8583WS__CISO8583Msg * > %p -> %p\n", q, p));
	*(std::vector<ISO8583WS__CISO8583Msg * >*)p = *(std::vector<ISO8583WS__CISO8583Msg * >*)q;
}

/* End of gSoapISO8583WSC.cpp */
