/* gSoapMultiXTpmStub.h
   Generated by gSOAP 2.7.10 from gSoapMultiXTpmwsdl.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef gSoapMultiXTpmStub_H
#define gSoapMultiXTpmStub_H
#include <vector>
#ifndef WITH_NONAMESPACES
#define WITH_NONAMESPACES
#endif
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_MultiXTpm__MultiXLinkType
#define SOAP_TYPE_MultiXTpm__MultiXLinkType (67)
/* MultiXTpm:MultiXLinkType */
enum MultiXTpm__MultiXLinkType {MultiXTpm__MultiXLinkType__MultiXLinkTypeFirst = 0, MultiXTpm__MultiXLinkType__MultiXLinkTypeTcp = 1, MultiXTpm__MultiXLinkType__MultiXLinkTypeLast = 2};
#endif

#ifndef SOAP_TYPE_MultiXTpm__MultiXOpenMode
#define SOAP_TYPE_MultiXTpm__MultiXOpenMode (68)
/* MultiXTpm:MultiXOpenMode */
enum MultiXTpm__MultiXOpenMode {MultiXTpm__MultiXOpenMode__MultiXOpenModeFirst = 0, MultiXTpm__MultiXOpenMode__MultiXOpenModeServer = 1, MultiXTpm__MultiXOpenMode__MultiXOpenModeClient = 2, MultiXTpm__MultiXOpenMode__MultiXOpenModeAccept = 3, MultiXTpm__MultiXOpenMode__MultiXOpenModeLast = 4};
#endif

#ifndef SOAP_TYPE_MultiXTpm__SSL_USCOREAPI
#define SOAP_TYPE_MultiXTpm__SSL_USCOREAPI (69)
/* MultiXTpm:SSL_API */
enum MultiXTpm__SSL_USCOREAPI {MultiXTpm__SSL_USCOREAPI__NoSSLAPI = 0, MultiXTpm__SSL_USCOREAPI__OpenSSL = 1};
#endif

#ifndef SOAP_TYPE_MultiXTpm__ProcessControlStatus
#define SOAP_TYPE_MultiXTpm__ProcessControlStatus (70)
/* MultiXTpm:ProcessControlStatus */
enum MultiXTpm__ProcessControlStatus {MultiXTpm__ProcessControlStatus__Normal = 0, MultiXTpm__ProcessControlStatus__Shutdown = 1, MultiXTpm__ProcessControlStatus__Suspend = 2, MultiXTpm__ProcessControlStatus__Restart = 3};
#endif

/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_MultiXTpm__ConfigData
#define SOAP_TYPE_MultiXTpm__ConfigData (8)
/* MultiXTpm:ConfigData */
class SOAP_CMAC MultiXTpm__ConfigData
{
public:
	time_t LastUpdate;	/* required element of type xsd:dateTime */
	std::string *UsersPermissionsFile;	/* optional element of type xsd:string */
	class MultiXTpm__ArrayOfProcessClass *ProcessClasses;	/* optional element of type MultiXTpm:ArrayOfProcessClass */
	class MultiXTpm__ArrayOfLink *Links;	/* optional element of type MultiXTpm:ArrayOfLink */
	class MultiXTpm__ArrayOfGroup *Groups;	/* optional element of type MultiXTpm:ArrayOfGroup */
	class MultiXTpm__ArrayOfMessage *Messages;	/* optional element of type MultiXTpm:ArrayOfMessage */
	class MultiXTpm__ArrayOfUserPermission *UsersPermissions;	/* optional element of type MultiXTpm:ArrayOfUserPermission */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_MultiXTpm__ConfigData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         MultiXTpm__ConfigData() : LastUpdate(0), UsersPermissionsFile(NULL), ProcessClasses(NULL), Links(NULL), Groups(NULL), Messages(NULL), UsersPermissions(NULL), soap(NULL) { }
	virtual ~MultiXTpm__ConfigData() { }
};
#endif

#ifndef SOAP_TYPE_MultiXTpm__ArrayOfUserPermission
#define SOAP_TYPE_MultiXTpm__ArrayOfUserPermission (9)
/* MultiXTpm:ArrayOfUserPermission */
class SOAP_CMAC MultiXTpm__ArrayOfUserPermission
{
public:
	std::vector<class MultiXTpm__UserPermission * >UserPermission;	/* optional element of type MultiXTpm:UserPermission */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_MultiXTpm__ArrayOfUserPermission */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         MultiXTpm__ArrayOfUserPermission() : soap(NULL) { }
	virtual ~MultiXTpm__ArrayOfUserPermission() { }
};
#endif

#ifndef SOAP_TYPE_MultiXTpm__UserPermission
#define SOAP_TYPE_MultiXTpm__UserPermission (10)
/* MultiXTpm:UserPermission */
class SOAP_CMAC MultiXTpm__UserPermission
{
public:
	std::string *UserName;	/* optional element of type xsd:string */
	bool IsGroup;	/* required element of type xsd:boolean */
	bool GetWSDL;	/* required element of type xsd:boolean */
	bool GetConfig;	/* required element of type xsd:boolean */
	bool UpdateConfig;	/* required element of type xsd:boolean */
	bool GetSystemStatus;	/* required element of type xsd:boolean */
	bool RestartProcess;	/* required element of type xsd:boolean */
	bool RestartGroup;	/* required element of type xsd:boolean */
	bool StartProcess;	/* required element of type xsd:boolean */
	bool StartGroup;	/* required element of type xsd:boolean */
	bool ShutdownProcess;	/* required element of type xsd:boolean */
	bool ShutdownGroup;	/* required element of type xsd:boolean */
	bool SuspendGroup;	/* required element of type xsd:boolean */
	bool SuspendProcess;	/* required element of type xsd:boolean */
	bool ResumeGroup;	/* required element of type xsd:boolean */
	bool ResumeProcess;	/* required element of type xsd:boolean */
	bool RestartAll;	/* required element of type xsd:boolean */
	bool StartAll;	/* required element of type xsd:boolean */
	bool ShutdownAll;	/* required element of type xsd:boolean */
	bool SuspendAll;	/* required element of type xsd:boolean */
	bool ResumeAll;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_MultiXTpm__UserPermission */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         MultiXTpm__UserPermission() : UserName(NULL), IsGroup((bool)0), GetWSDL((bool)0), GetConfig((bool)0), UpdateConfig((bool)0), GetSystemStatus((bool)0), RestartProcess((bool)0), RestartGroup((bool)0), StartProcess((bool)0), StartGroup((bool)0), ShutdownProcess((bool)0), ShutdownGroup((bool)0), SuspendGroup((bool)0), SuspendProcess((bool)0), ResumeGroup((bool)0), ResumeProcess((bool)0), RestartAll((bool)0), StartAll((bool)0), ShutdownAll((bool)0), SuspendAll((bool)0), ResumeAll((bool)0), soap(NULL) { }
	virtual ~MultiXTpm__UserPermission() { }
};
#endif

#ifndef SOAP_TYPE_MultiXTpm__ArrayOfProcessClass
#define SOAP_TYPE_MultiXTpm__ArrayOfProcessClass (11)
/* MultiXTpm:ArrayOfProcessClass */
class SOAP_CMAC MultiXTpm__ArrayOfProcessClass
{
public:
	std::vector<class MultiXTpm__ProcessClass * >ProcessClass;	/* optional element of type MultiXTpm:ProcessClass */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_MultiXTpm__ArrayOfProcessClass */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         MultiXTpm__ArrayOfProcessClass() : soap(NULL) { }
	virtual ~MultiXTpm__ArrayOfProcessClass() { }
};
#endif

#ifndef SOAP_TYPE_MultiXTpm__ProcessClass
#define SOAP_TYPE_MultiXTpm__ProcessClass (12)
/* MultiXTpm:ProcessClass */
class SOAP_CMAC MultiXTpm__ProcessClass
{
public:
	int ID;	/* required element of type xsd:int */
	std::string *Description;	/* optional element of type xsd:string */
	std::string *PasswordToSend;	/* optional element of type xsd:string */
	std::string *ExpectedPassword;	/* optional element of type xsd:string */
	std::string *ExecCmd;	/* optional element of type xsd:string */
	std::string *ClassName;	/* optional element of type xsd:string */
	std::string *AdditionalConfigTextFile;	/* optional element of type xsd:string */
	int DebugLevel;	/* required element of type xsd:int */
	int DefaultSendTimeout;	/* required element of type xsd:int */
	std::string *ExecParams;	/* optional element of type xsd:string */
	int MaxQueueSize;	/* required element of type xsd:int */
	int MaxSessions;	/* required element of type xsd:int */
	int MaxRecoveryQueueSize;	/* required element of type xsd:int */
	bool AutoStart;	/* required element of type xsd:boolean */
	int MinInstances;	/* required element of type xsd:int */
	int MaxInstances;	/* required element of type xsd:int */
	int StartProcessDelay;	/* required element of type xsd:int */
	int InactivityTimer;	/* required element of type xsd:int */
	class MultiXTpm__ArrayOfParam *Params;	/* optional element of type MultiXTpm:ArrayOfParam */
	class MultiXTpm__ArrayOfInt *LinkIDs;	/* optional element of type MultiXTpm:ArrayOfInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_MultiXTpm__ProcessClass */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         MultiXTpm__ProcessClass() : ID(0), Description(NULL), PasswordToSend(NULL), ExpectedPassword(NULL), ExecCmd(NULL), ClassName(NULL), AdditionalConfigTextFile(NULL), DebugLevel(0), DefaultSendTimeout(0), ExecParams(NULL), MaxQueueSize(0), MaxSessions(0), MaxRecoveryQueueSize(0), AutoStart((bool)0), MinInstances(0), MaxInstances(0), StartProcessDelay(0), InactivityTimer(0), Params(NULL), LinkIDs(NULL), soap(NULL) { }
	virtual ~MultiXTpm__ProcessClass() { }
};
#endif

#ifndef SOAP_TYPE_MultiXTpm__ArrayOfParam
#define SOAP_TYPE_MultiXTpm__ArrayOfParam (13)
/* MultiXTpm:ArrayOfParam */
class SOAP_CMAC MultiXTpm__ArrayOfParam
{
public:
	std::vector<class MultiXTpm__Param * >Param;	/* optional element of type MultiXTpm:Param */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_MultiXTpm__ArrayOfParam */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         MultiXTpm__ArrayOfParam() : soap(NULL) { }
	virtual ~MultiXTpm__ArrayOfParam() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__Param_XmlParamValue
#define SOAP_TYPE__MultiXTpm__Param_XmlParamValue (89)
/* MultiXTpm:Param-XmlParamValue */
class SOAP_CMAC _MultiXTpm__Param_XmlParamValue
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
	char *__mixed;
public:
	virtual int soap_type() const { return 89; } /* = unique id SOAP_TYPE__MultiXTpm__Param_XmlParamValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__Param_XmlParamValue() : __anyAttribute(NULL), __mixed(NULL) { }
	virtual ~_MultiXTpm__Param_XmlParamValue() { }
};
#endif

#ifndef SOAP_TYPE_MultiXTpm__Param
#define SOAP_TYPE_MultiXTpm__Param (14)
/* MultiXTpm:Param */
class SOAP_CMAC MultiXTpm__Param
{
public:
	std::string *ParamName;	/* optional element of type xsd:string */
	std::string *ParamValue;	/* optional element of type xsd:string */
	_MultiXTpm__Param_XmlParamValue *XmlParamValue;	/* optional element of type MultiXTpm:Param-XmlParamValue */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_MultiXTpm__Param */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         MultiXTpm__Param() : ParamName(NULL), ParamValue(NULL), XmlParamValue(NULL), soap(NULL) { }
	virtual ~MultiXTpm__Param() { }
};
#endif

#ifndef SOAP_TYPE_MultiXTpm__ArrayOfInt
#define SOAP_TYPE_MultiXTpm__ArrayOfInt (15)
/* MultiXTpm:ArrayOfInt */
class SOAP_CMAC MultiXTpm__ArrayOfInt
{
public:
	std::vector<int >ID;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_MultiXTpm__ArrayOfInt */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         MultiXTpm__ArrayOfInt() : soap(NULL) { }
	virtual ~MultiXTpm__ArrayOfInt() { }
};
#endif

#ifndef SOAP_TYPE_MultiXTpm__ArrayOfLink
#define SOAP_TYPE_MultiXTpm__ArrayOfLink (16)
/* MultiXTpm:ArrayOfLink */
class SOAP_CMAC MultiXTpm__ArrayOfLink
{
public:
	std::vector<class MultiXTpm__Link * >Link;	/* optional element of type MultiXTpm:Link */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_MultiXTpm__ArrayOfLink */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         MultiXTpm__ArrayOfLink() : soap(NULL) { }
	virtual ~MultiXTpm__ArrayOfLink() { }
};
#endif

#ifndef SOAP_TYPE_MultiXTpm__Link
#define SOAP_TYPE_MultiXTpm__Link (17)
/* MultiXTpm:Link */
class SOAP_CMAC MultiXTpm__Link
{
public:
	int ID;	/* required element of type xsd:int */
	std::string *Description;	/* optional element of type xsd:string */
	enum MultiXTpm__MultiXLinkType LinkType;	/* required element of type MultiXTpm:MultiXLinkType */
	enum MultiXTpm__MultiXOpenMode OpenMode;	/* required element of type MultiXTpm:MultiXOpenMode */
	bool Raw;	/* required element of type xsd:boolean */
	std::string *LocalAddress;	/* optional element of type xsd:string */
	std::string *LocalPort;	/* optional element of type xsd:string */
	std::string *RemoteAddress;	/* optional element of type xsd:string */
	std::string *RemotePort;	/* optional element of type xsd:string */
	class MultiXTpm__SSLParams *SSLParams;	/* optional element of type MultiXTpm:SSLParams */
	MultiXTpm__ArrayOfParam *Params;	/* optional element of type MultiXTpm:ArrayOfParam */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_MultiXTpm__Link */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         MultiXTpm__Link() : ID(0), Description(NULL), LinkType((enum MultiXTpm__MultiXLinkType)0), OpenMode((enum MultiXTpm__MultiXOpenMode)0), Raw((bool)0), LocalAddress(NULL), LocalPort(NULL), RemoteAddress(NULL), RemotePort(NULL), SSLParams(NULL), Params(NULL), soap(NULL) { }
	virtual ~MultiXTpm__Link() { }
};
#endif

#ifndef SOAP_TYPE_MultiXTpm__SSLParams
#define SOAP_TYPE_MultiXTpm__SSLParams (18)
/* MultiXTpm:SSLParams */
class SOAP_CMAC MultiXTpm__SSLParams
{
public:
	enum MultiXTpm__SSL_USCOREAPI API;	/* required element of type MultiXTpm:SSL_API */
	bool ClientAuthenticationRequired;	/* required element of type xsd:boolean */
	bool ServerAuthenticationRequired;	/* required element of type xsd:boolean */
	bool ServerNameVerificationRequired;	/* required element of type xsd:boolean */
	std::string *TrustStoreFile;	/* optional element of type xsd:string */
	std::string *TrustStoreDirectory;	/* optional element of type xsd:string */
	std::string *CertificateFile;	/* optional element of type xsd:string */
	std::string *PrivateKeyFile;	/* optional element of type xsd:string */
	std::string *PrivateKeyPassword;	/* optional element of type xsd:string */
	std::string *PrivateKeyPasswordFile;	/* optional element of type xsd:string */
	std::string *RSAPrivateKeyFile;	/* optional element of type xsd:string */
	std::string *DHFile;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_MultiXTpm__SSLParams */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         MultiXTpm__SSLParams() : API((enum MultiXTpm__SSL_USCOREAPI)0), ClientAuthenticationRequired((bool)0), ServerAuthenticationRequired((bool)0), ServerNameVerificationRequired((bool)0), TrustStoreFile(NULL), TrustStoreDirectory(NULL), CertificateFile(NULL), PrivateKeyFile(NULL), PrivateKeyPassword(NULL), PrivateKeyPasswordFile(NULL), RSAPrivateKeyFile(NULL), DHFile(NULL), soap(NULL) { }
	virtual ~MultiXTpm__SSLParams() { }
};
#endif

#ifndef SOAP_TYPE_MultiXTpm__ArrayOfGroup
#define SOAP_TYPE_MultiXTpm__ArrayOfGroup (19)
/* MultiXTpm:ArrayOfGroup */
class SOAP_CMAC MultiXTpm__ArrayOfGroup
{
public:
	std::vector<class MultiXTpm__Group * >Group;	/* optional element of type MultiXTpm:Group */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_MultiXTpm__ArrayOfGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         MultiXTpm__ArrayOfGroup() : soap(NULL) { }
	virtual ~MultiXTpm__ArrayOfGroup() { }
};
#endif

#ifndef SOAP_TYPE_MultiXTpm__Group
#define SOAP_TYPE_MultiXTpm__Group (20)
/* MultiXTpm:Group */
class SOAP_CMAC MultiXTpm__Group
{
public:
	int ID;	/* required element of type xsd:int */
	std::string *Description;	/* optional element of type xsd:string */
	MultiXTpm__ArrayOfInt *ProcessClassIDs;	/* optional element of type MultiXTpm:ArrayOfInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_MultiXTpm__Group */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         MultiXTpm__Group() : ID(0), Description(NULL), ProcessClassIDs(NULL), soap(NULL) { }
	virtual ~MultiXTpm__Group() { }
};
#endif

#ifndef SOAP_TYPE_MultiXTpm__ArrayOfMessage
#define SOAP_TYPE_MultiXTpm__ArrayOfMessage (21)
/* MultiXTpm:ArrayOfMessage */
class SOAP_CMAC MultiXTpm__ArrayOfMessage
{
public:
	std::vector<class MultiXTpm__Message * >Message;	/* optional element of type MultiXTpm:Message */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_MultiXTpm__ArrayOfMessage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         MultiXTpm__ArrayOfMessage() : soap(NULL) { }
	virtual ~MultiXTpm__ArrayOfMessage() { }
};
#endif

#ifndef SOAP_TYPE_MultiXTpm__Message
#define SOAP_TYPE_MultiXTpm__Message (22)
/* MultiXTpm:Message */
class SOAP_CMAC MultiXTpm__Message
{
public:
	int ID;	/* required element of type xsd:int */
	std::string *Description;	/* optional element of type xsd:string */
	bool Stateful;	/* required element of type xsd:boolean */
	bool DbProtected;	/* required element of type xsd:boolean */
	int Timeout;	/* required element of type xsd:int */
	int Priority;	/* required element of type xsd:int */
	std::string *WSURL;	/* optional element of type xsd:string */
	std::string *WSSoapAction;	/* optional element of type xsd:string */
	std::string *WSDllFile;	/* optional element of type xsd:string */
	std::string *WSDllFunction;	/* optional element of type xsd:string */
	class MultiXTpm__ArrayOfGroupForwardFlags *ForwardFlags;	/* optional element of type MultiXTpm:ArrayOfGroupForwardFlags */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_MultiXTpm__Message */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         MultiXTpm__Message() : ID(0), Description(NULL), Stateful((bool)0), DbProtected((bool)0), Timeout(0), Priority(0), WSURL(NULL), WSSoapAction(NULL), WSDllFile(NULL), WSDllFunction(NULL), ForwardFlags(NULL), soap(NULL) { }
	virtual ~MultiXTpm__Message() { }
};
#endif

#ifndef SOAP_TYPE_MultiXTpm__ArrayOfGroupForwardFlags
#define SOAP_TYPE_MultiXTpm__ArrayOfGroupForwardFlags (23)
/* MultiXTpm:ArrayOfGroupForwardFlags */
class SOAP_CMAC MultiXTpm__ArrayOfGroupForwardFlags
{
public:
	std::vector<class MultiXTpm__GroupForwardFlags * >Flags;	/* optional element of type MultiXTpm:GroupForwardFlags */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_MultiXTpm__ArrayOfGroupForwardFlags */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         MultiXTpm__ArrayOfGroupForwardFlags() : soap(NULL) { }
	virtual ~MultiXTpm__ArrayOfGroupForwardFlags() { }
};
#endif

#ifndef SOAP_TYPE_MultiXTpm__GroupForwardFlags
#define SOAP_TYPE_MultiXTpm__GroupForwardFlags (24)
/* MultiXTpm:GroupForwardFlags */
class SOAP_CMAC MultiXTpm__GroupForwardFlags
{
public:
	int GroupID;	/* required element of type xsd:int */
	bool ResponseRequired;	/* required element of type xsd:boolean */
	bool IgnoreResponse;	/* required element of type xsd:boolean */
	bool ForwardToAll;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_MultiXTpm__GroupForwardFlags */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         MultiXTpm__GroupForwardFlags() : GroupID(0), ResponseRequired((bool)0), IgnoreResponse((bool)0), ForwardToAll((bool)0), soap(NULL) { }
	virtual ~MultiXTpm__GroupForwardFlags() { }
};
#endif

#ifndef SOAP_TYPE_MultiXTpm__SystemStatus
#define SOAP_TYPE_MultiXTpm__SystemStatus (25)
/* MultiXTpm:SystemStatus */
class SOAP_CMAC MultiXTpm__SystemStatus
{
public:
	std::string *TpmMultiXVersion;	/* optional element of type xsd:string */
	std::string *TpmVersion;	/* optional element of type xsd:string */
	std::string *TpmHostName;	/* optional element of type xsd:string */
	std::string *TpmHostIP;	/* optional element of type xsd:string */
	int SessionsCount;	/* required element of type xsd:int */
	class MultiXTpm__ArrayOfGroupStatus *GroupsStatus;	/* optional element of type MultiXTpm:ArrayOfGroupStatus */
	class MultiXTpm__ArrayOfProcessStatus *ProcessesStatus;	/* optional element of type MultiXTpm:ArrayOfProcessStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE_MultiXTpm__SystemStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         MultiXTpm__SystemStatus() : TpmMultiXVersion(NULL), TpmVersion(NULL), TpmHostName(NULL), TpmHostIP(NULL), SessionsCount(0), GroupsStatus(NULL), ProcessesStatus(NULL), soap(NULL) { }
	virtual ~MultiXTpm__SystemStatus() { }
};
#endif

#ifndef SOAP_TYPE_MultiXTpm__ArrayOfGroupStatus
#define SOAP_TYPE_MultiXTpm__ArrayOfGroupStatus (26)
/* MultiXTpm:ArrayOfGroupStatus */
class SOAP_CMAC MultiXTpm__ArrayOfGroupStatus
{
public:
	std::vector<class MultiXTpm__GroupStatus * >GroupStatus;	/* optional element of type MultiXTpm:GroupStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE_MultiXTpm__ArrayOfGroupStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         MultiXTpm__ArrayOfGroupStatus() : soap(NULL) { }
	virtual ~MultiXTpm__ArrayOfGroupStatus() { }
};
#endif

#ifndef SOAP_TYPE_MultiXTpm__GroupStatus
#define SOAP_TYPE_MultiXTpm__GroupStatus (27)
/* MultiXTpm:GroupStatus */
class SOAP_CMAC MultiXTpm__GroupStatus
{
public:
	int ID;	/* required element of type xsd:int */
	int SessionsCount;	/* required element of type xsd:int */
	int OutQueueSize;	/* required element of type xsd:int */
	int QueuedItemsSize;	/* required element of type xsd:int */
	int MaxProcessQueueEntries;	/* required element of type xsd:int */
	MultiXTpm__ArrayOfInt *ProcessIDs;	/* optional element of type MultiXTpm:ArrayOfInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE_MultiXTpm__GroupStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         MultiXTpm__GroupStatus() : ID(0), SessionsCount(0), OutQueueSize(0), QueuedItemsSize(0), MaxProcessQueueEntries(0), ProcessIDs(NULL), soap(NULL) { }
	virtual ~MultiXTpm__GroupStatus() { }
};
#endif

#ifndef SOAP_TYPE_MultiXTpm__ArrayOfProcessStatus
#define SOAP_TYPE_MultiXTpm__ArrayOfProcessStatus (28)
/* MultiXTpm:ArrayOfProcessStatus */
class SOAP_CMAC MultiXTpm__ArrayOfProcessStatus
{
public:
	std::vector<class MultiXTpm__ProcessStatus * >ProcessStatus;	/* optional element of type MultiXTpm:ProcessStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE_MultiXTpm__ArrayOfProcessStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         MultiXTpm__ArrayOfProcessStatus() : soap(NULL) { }
	virtual ~MultiXTpm__ArrayOfProcessStatus() { }
};
#endif

#ifndef SOAP_TYPE_MultiXTpm__ProcessStatus
#define SOAP_TYPE_MultiXTpm__ProcessStatus (29)
/* MultiXTpm:ProcessStatus */
class SOAP_CMAC MultiXTpm__ProcessStatus
{
public:
	int ID;	/* required element of type xsd:int */
	std::string *MultiXVersion;	/* optional element of type xsd:string */
	std::string *AppVersion;	/* optional element of type xsd:string */
	int ProcessClassID;	/* required element of type xsd:int */
	bool IsReady;	/* required element of type xsd:boolean */
	enum MultiXTpm__ProcessControlStatus ControlStatus;	/* required element of type MultiXTpm:ProcessControlStatus */
	int SessionsCount;	/* required element of type xsd:int */
	int OutQueueSize;	/* required element of type xsd:int */
	time_t LastMsgTime;	/* required element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE_MultiXTpm__ProcessStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         MultiXTpm__ProcessStatus() : ID(0), MultiXVersion(NULL), AppVersion(NULL), ProcessClassID(0), IsReady((bool)0), ControlStatus((enum MultiXTpm__ProcessControlStatus)0), SessionsCount(0), OutQueueSize(0), LastMsgTime(0), soap(NULL) { }
	virtual ~MultiXTpm__ProcessStatus() { }
};
#endif

#ifndef SOAP_TYPE_MultiXTpm__ArrayOfInt1
#define SOAP_TYPE_MultiXTpm__ArrayOfInt1 (30)
/* MultiXTpm:ArrayOfInt1 */
class SOAP_CMAC MultiXTpm__ArrayOfInt1
{
public:
	std::vector<int >int_;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE_MultiXTpm__ArrayOfInt1 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         MultiXTpm__ArrayOfInt1() : soap(NULL) { }
	virtual ~MultiXTpm__ArrayOfInt1() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__GetConfig
#define SOAP_TYPE__MultiXTpm__GetConfig (31)
/* MultiXTpm:GetConfig */
class SOAP_CMAC _MultiXTpm__GetConfig
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE__MultiXTpm__GetConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__GetConfig() : soap(NULL) { }
	virtual ~_MultiXTpm__GetConfig() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__GetConfigResponse
#define SOAP_TYPE__MultiXTpm__GetConfigResponse (32)
/* MultiXTpm:GetConfigResponse */
class SOAP_CMAC _MultiXTpm__GetConfigResponse
{
public:
	MultiXTpm__ConfigData *GetConfigResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type MultiXTpm:ConfigData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE__MultiXTpm__GetConfigResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__GetConfigResponse() : GetConfigResult(NULL), soap(NULL) { }
	virtual ~_MultiXTpm__GetConfigResponse() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__UpdateConfig
#define SOAP_TYPE__MultiXTpm__UpdateConfig (33)
/* MultiXTpm:UpdateConfig */
class SOAP_CMAC _MultiXTpm__UpdateConfig
{
public:
	MultiXTpm__ConfigData *Config;	/* optional element of type MultiXTpm:ConfigData */
	bool SaveToDisk;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE__MultiXTpm__UpdateConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__UpdateConfig() : Config(NULL), SaveToDisk((bool)0), soap(NULL) { }
	virtual ~_MultiXTpm__UpdateConfig() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__UpdateConfigResponse
#define SOAP_TYPE__MultiXTpm__UpdateConfigResponse (34)
/* MultiXTpm:UpdateConfigResponse */
class SOAP_CMAC _MultiXTpm__UpdateConfigResponse
{
public:
	bool UpdateConfigResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	MultiXTpm__ConfigData *Config;	/* optional element of type MultiXTpm:ConfigData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE__MultiXTpm__UpdateConfigResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__UpdateConfigResponse() : UpdateConfigResult((bool)0), Config(NULL), soap(NULL) { }
	virtual ~_MultiXTpm__UpdateConfigResponse() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__GetSystemStatus
#define SOAP_TYPE__MultiXTpm__GetSystemStatus (35)
/* MultiXTpm:GetSystemStatus */
class SOAP_CMAC _MultiXTpm__GetSystemStatus
{
public:
	time_t LastConfigTime;	/* required element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE__MultiXTpm__GetSystemStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__GetSystemStatus() : LastConfigTime(0), soap(NULL) { }
	virtual ~_MultiXTpm__GetSystemStatus() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__GetSystemStatusResponse
#define SOAP_TYPE__MultiXTpm__GetSystemStatusResponse (36)
/* MultiXTpm:GetSystemStatusResponse */
class SOAP_CMAC _MultiXTpm__GetSystemStatusResponse
{
public:
	MultiXTpm__SystemStatus *GetSystemStatusResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type MultiXTpm:SystemStatus */
	MultiXTpm__ConfigData *Config;	/* optional element of type MultiXTpm:ConfigData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE__MultiXTpm__GetSystemStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__GetSystemStatusResponse() : GetSystemStatusResult(NULL), Config(NULL), soap(NULL) { }
	virtual ~_MultiXTpm__GetSystemStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__RestartProcess
#define SOAP_TYPE__MultiXTpm__RestartProcess (37)
/* MultiXTpm:RestartProcess */
class SOAP_CMAC _MultiXTpm__RestartProcess
{
public:
	MultiXTpm__ArrayOfInt1 *ProcessID;	/* optional element of type MultiXTpm:ArrayOfInt1 */
	bool bForce;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE__MultiXTpm__RestartProcess */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__RestartProcess() : ProcessID(NULL), bForce((bool)0), soap(NULL) { }
	virtual ~_MultiXTpm__RestartProcess() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__RestartProcessResponse
#define SOAP_TYPE__MultiXTpm__RestartProcessResponse (38)
/* MultiXTpm:RestartProcessResponse */
class SOAP_CMAC _MultiXTpm__RestartProcessResponse
{
public:
	bool RestartProcessResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE__MultiXTpm__RestartProcessResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__RestartProcessResponse() : RestartProcessResult((bool)0), soap(NULL) { }
	virtual ~_MultiXTpm__RestartProcessResponse() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__RestartGroup
#define SOAP_TYPE__MultiXTpm__RestartGroup (39)
/* MultiXTpm:RestartGroup */
class SOAP_CMAC _MultiXTpm__RestartGroup
{
public:
	MultiXTpm__ArrayOfInt1 *GroupID;	/* optional element of type MultiXTpm:ArrayOfInt1 */
	bool bForce;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE__MultiXTpm__RestartGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__RestartGroup() : GroupID(NULL), bForce((bool)0), soap(NULL) { }
	virtual ~_MultiXTpm__RestartGroup() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__RestartGroupResponse
#define SOAP_TYPE__MultiXTpm__RestartGroupResponse (40)
/* MultiXTpm:RestartGroupResponse */
class SOAP_CMAC _MultiXTpm__RestartGroupResponse
{
public:
	bool RestartGroupResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE__MultiXTpm__RestartGroupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__RestartGroupResponse() : RestartGroupResult((bool)0), soap(NULL) { }
	virtual ~_MultiXTpm__RestartGroupResponse() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__StartProcess
#define SOAP_TYPE__MultiXTpm__StartProcess (41)
/* MultiXTpm:StartProcess */
class SOAP_CMAC _MultiXTpm__StartProcess
{
public:
	MultiXTpm__ArrayOfInt1 *ProcessID;	/* optional element of type MultiXTpm:ArrayOfInt1 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE__MultiXTpm__StartProcess */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__StartProcess() : ProcessID(NULL), soap(NULL) { }
	virtual ~_MultiXTpm__StartProcess() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__StartProcessResponse
#define SOAP_TYPE__MultiXTpm__StartProcessResponse (42)
/* MultiXTpm:StartProcessResponse */
class SOAP_CMAC _MultiXTpm__StartProcessResponse
{
public:
	bool StartProcessResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE__MultiXTpm__StartProcessResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__StartProcessResponse() : StartProcessResult((bool)0), soap(NULL) { }
	virtual ~_MultiXTpm__StartProcessResponse() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__StartGroup
#define SOAP_TYPE__MultiXTpm__StartGroup (43)
/* MultiXTpm:StartGroup */
class SOAP_CMAC _MultiXTpm__StartGroup
{
public:
	MultiXTpm__ArrayOfInt1 *GroupID;	/* optional element of type MultiXTpm:ArrayOfInt1 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE__MultiXTpm__StartGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__StartGroup() : GroupID(NULL), soap(NULL) { }
	virtual ~_MultiXTpm__StartGroup() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__StartGroupResponse
#define SOAP_TYPE__MultiXTpm__StartGroupResponse (44)
/* MultiXTpm:StartGroupResponse */
class SOAP_CMAC _MultiXTpm__StartGroupResponse
{
public:
	bool StartGroupResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE__MultiXTpm__StartGroupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__StartGroupResponse() : StartGroupResult((bool)0), soap(NULL) { }
	virtual ~_MultiXTpm__StartGroupResponse() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__ShutdownProcess
#define SOAP_TYPE__MultiXTpm__ShutdownProcess (45)
/* MultiXTpm:ShutdownProcess */
class SOAP_CMAC _MultiXTpm__ShutdownProcess
{
public:
	MultiXTpm__ArrayOfInt1 *ProcessID;	/* optional element of type MultiXTpm:ArrayOfInt1 */
	bool bForce;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE__MultiXTpm__ShutdownProcess */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__ShutdownProcess() : ProcessID(NULL), bForce((bool)0), soap(NULL) { }
	virtual ~_MultiXTpm__ShutdownProcess() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__ShutdownProcessResponse
#define SOAP_TYPE__MultiXTpm__ShutdownProcessResponse (46)
/* MultiXTpm:ShutdownProcessResponse */
class SOAP_CMAC _MultiXTpm__ShutdownProcessResponse
{
public:
	bool ShutdownProcessResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE__MultiXTpm__ShutdownProcessResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__ShutdownProcessResponse() : ShutdownProcessResult((bool)0), soap(NULL) { }
	virtual ~_MultiXTpm__ShutdownProcessResponse() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__ShutdownGroup
#define SOAP_TYPE__MultiXTpm__ShutdownGroup (47)
/* MultiXTpm:ShutdownGroup */
class SOAP_CMAC _MultiXTpm__ShutdownGroup
{
public:
	MultiXTpm__ArrayOfInt1 *GroupID;	/* optional element of type MultiXTpm:ArrayOfInt1 */
	bool bForce;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE__MultiXTpm__ShutdownGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__ShutdownGroup() : GroupID(NULL), bForce((bool)0), soap(NULL) { }
	virtual ~_MultiXTpm__ShutdownGroup() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__ShutdownGroupResponse
#define SOAP_TYPE__MultiXTpm__ShutdownGroupResponse (48)
/* MultiXTpm:ShutdownGroupResponse */
class SOAP_CMAC _MultiXTpm__ShutdownGroupResponse
{
public:
	bool ShutdownGroupResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 48; } /* = unique id SOAP_TYPE__MultiXTpm__ShutdownGroupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__ShutdownGroupResponse() : ShutdownGroupResult((bool)0), soap(NULL) { }
	virtual ~_MultiXTpm__ShutdownGroupResponse() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__SuspendGroup
#define SOAP_TYPE__MultiXTpm__SuspendGroup (49)
/* MultiXTpm:SuspendGroup */
class SOAP_CMAC _MultiXTpm__SuspendGroup
{
public:
	MultiXTpm__ArrayOfInt1 *GroupID;	/* optional element of type MultiXTpm:ArrayOfInt1 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE__MultiXTpm__SuspendGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__SuspendGroup() : GroupID(NULL), soap(NULL) { }
	virtual ~_MultiXTpm__SuspendGroup() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__SuspendGroupResponse
#define SOAP_TYPE__MultiXTpm__SuspendGroupResponse (50)
/* MultiXTpm:SuspendGroupResponse */
class SOAP_CMAC _MultiXTpm__SuspendGroupResponse
{
public:
	bool SuspendGroupResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 50; } /* = unique id SOAP_TYPE__MultiXTpm__SuspendGroupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__SuspendGroupResponse() : SuspendGroupResult((bool)0), soap(NULL) { }
	virtual ~_MultiXTpm__SuspendGroupResponse() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__SuspendProcess
#define SOAP_TYPE__MultiXTpm__SuspendProcess (51)
/* MultiXTpm:SuspendProcess */
class SOAP_CMAC _MultiXTpm__SuspendProcess
{
public:
	MultiXTpm__ArrayOfInt1 *ProcessID;	/* optional element of type MultiXTpm:ArrayOfInt1 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE__MultiXTpm__SuspendProcess */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__SuspendProcess() : ProcessID(NULL), soap(NULL) { }
	virtual ~_MultiXTpm__SuspendProcess() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__SuspendProcessResponse
#define SOAP_TYPE__MultiXTpm__SuspendProcessResponse (52)
/* MultiXTpm:SuspendProcessResponse */
class SOAP_CMAC _MultiXTpm__SuspendProcessResponse
{
public:
	bool SuspendProcessResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE__MultiXTpm__SuspendProcessResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__SuspendProcessResponse() : SuspendProcessResult((bool)0), soap(NULL) { }
	virtual ~_MultiXTpm__SuspendProcessResponse() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__ResumeGroup
#define SOAP_TYPE__MultiXTpm__ResumeGroup (53)
/* MultiXTpm:ResumeGroup */
class SOAP_CMAC _MultiXTpm__ResumeGroup
{
public:
	MultiXTpm__ArrayOfInt1 *GroupID;	/* optional element of type MultiXTpm:ArrayOfInt1 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE__MultiXTpm__ResumeGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__ResumeGroup() : GroupID(NULL), soap(NULL) { }
	virtual ~_MultiXTpm__ResumeGroup() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__ResumeGroupResponse
#define SOAP_TYPE__MultiXTpm__ResumeGroupResponse (54)
/* MultiXTpm:ResumeGroupResponse */
class SOAP_CMAC _MultiXTpm__ResumeGroupResponse
{
public:
	bool ResumeGroupResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 54; } /* = unique id SOAP_TYPE__MultiXTpm__ResumeGroupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__ResumeGroupResponse() : ResumeGroupResult((bool)0), soap(NULL) { }
	virtual ~_MultiXTpm__ResumeGroupResponse() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__ResumeProcess
#define SOAP_TYPE__MultiXTpm__ResumeProcess (55)
/* MultiXTpm:ResumeProcess */
class SOAP_CMAC _MultiXTpm__ResumeProcess
{
public:
	MultiXTpm__ArrayOfInt1 *ProcessID;	/* optional element of type MultiXTpm:ArrayOfInt1 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 55; } /* = unique id SOAP_TYPE__MultiXTpm__ResumeProcess */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__ResumeProcess() : ProcessID(NULL), soap(NULL) { }
	virtual ~_MultiXTpm__ResumeProcess() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__ResumeProcessResponse
#define SOAP_TYPE__MultiXTpm__ResumeProcessResponse (56)
/* MultiXTpm:ResumeProcessResponse */
class SOAP_CMAC _MultiXTpm__ResumeProcessResponse
{
public:
	bool ResumeProcessResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 56; } /* = unique id SOAP_TYPE__MultiXTpm__ResumeProcessResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__ResumeProcessResponse() : ResumeProcessResult((bool)0), soap(NULL) { }
	virtual ~_MultiXTpm__ResumeProcessResponse() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__RestartAll
#define SOAP_TYPE__MultiXTpm__RestartAll (57)
/* MultiXTpm:RestartAll */
class SOAP_CMAC _MultiXTpm__RestartAll
{
public:
	bool bForce;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 57; } /* = unique id SOAP_TYPE__MultiXTpm__RestartAll */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__RestartAll() : bForce((bool)0), soap(NULL) { }
	virtual ~_MultiXTpm__RestartAll() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__RestartAllResponse
#define SOAP_TYPE__MultiXTpm__RestartAllResponse (58)
/* MultiXTpm:RestartAllResponse */
class SOAP_CMAC _MultiXTpm__RestartAllResponse
{
public:
	bool RestartAllResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 58; } /* = unique id SOAP_TYPE__MultiXTpm__RestartAllResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__RestartAllResponse() : RestartAllResult((bool)0), soap(NULL) { }
	virtual ~_MultiXTpm__RestartAllResponse() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__StartAll
#define SOAP_TYPE__MultiXTpm__StartAll (59)
/* MultiXTpm:StartAll */
class SOAP_CMAC _MultiXTpm__StartAll
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 59; } /* = unique id SOAP_TYPE__MultiXTpm__StartAll */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__StartAll() : soap(NULL) { }
	virtual ~_MultiXTpm__StartAll() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__StartAllResponse
#define SOAP_TYPE__MultiXTpm__StartAllResponse (60)
/* MultiXTpm:StartAllResponse */
class SOAP_CMAC _MultiXTpm__StartAllResponse
{
public:
	bool StartAllResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 60; } /* = unique id SOAP_TYPE__MultiXTpm__StartAllResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__StartAllResponse() : StartAllResult((bool)0), soap(NULL) { }
	virtual ~_MultiXTpm__StartAllResponse() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__ShutdownAll
#define SOAP_TYPE__MultiXTpm__ShutdownAll (61)
/* MultiXTpm:ShutdownAll */
class SOAP_CMAC _MultiXTpm__ShutdownAll
{
public:
	bool bForce;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 61; } /* = unique id SOAP_TYPE__MultiXTpm__ShutdownAll */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__ShutdownAll() : bForce((bool)0), soap(NULL) { }
	virtual ~_MultiXTpm__ShutdownAll() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__ShutdownAllResponse
#define SOAP_TYPE__MultiXTpm__ShutdownAllResponse (62)
/* MultiXTpm:ShutdownAllResponse */
class SOAP_CMAC _MultiXTpm__ShutdownAllResponse
{
public:
	bool ShutdownAllResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 62; } /* = unique id SOAP_TYPE__MultiXTpm__ShutdownAllResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__ShutdownAllResponse() : ShutdownAllResult((bool)0), soap(NULL) { }
	virtual ~_MultiXTpm__ShutdownAllResponse() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__SuspendAll
#define SOAP_TYPE__MultiXTpm__SuspendAll (63)
/* MultiXTpm:SuspendAll */
class SOAP_CMAC _MultiXTpm__SuspendAll
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 63; } /* = unique id SOAP_TYPE__MultiXTpm__SuspendAll */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__SuspendAll() : soap(NULL) { }
	virtual ~_MultiXTpm__SuspendAll() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__SuspendAllResponse
#define SOAP_TYPE__MultiXTpm__SuspendAllResponse (64)
/* MultiXTpm:SuspendAllResponse */
class SOAP_CMAC _MultiXTpm__SuspendAllResponse
{
public:
	bool SuspendAllResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 64; } /* = unique id SOAP_TYPE__MultiXTpm__SuspendAllResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__SuspendAllResponse() : SuspendAllResult((bool)0), soap(NULL) { }
	virtual ~_MultiXTpm__SuspendAllResponse() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__ResumeAll
#define SOAP_TYPE__MultiXTpm__ResumeAll (65)
/* MultiXTpm:ResumeAll */
class SOAP_CMAC _MultiXTpm__ResumeAll
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 65; } /* = unique id SOAP_TYPE__MultiXTpm__ResumeAll */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__ResumeAll() : soap(NULL) { }
	virtual ~_MultiXTpm__ResumeAll() { }
};
#endif

#ifndef SOAP_TYPE__MultiXTpm__ResumeAllResponse
#define SOAP_TYPE__MultiXTpm__ResumeAllResponse (66)
/* MultiXTpm:ResumeAllResponse */
class SOAP_CMAC _MultiXTpm__ResumeAllResponse
{
public:
	bool ResumeAllResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 66; } /* = unique id SOAP_TYPE__MultiXTpm__ResumeAllResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _MultiXTpm__ResumeAllResponse() : ResumeAllResult((bool)0), soap(NULL) { }
	virtual ~_MultiXTpm__ResumeAllResponse() { }
};
#endif

#ifndef SOAP_TYPE___MultiXTpm11__GetConfig
#define SOAP_TYPE___MultiXTpm11__GetConfig (115)
/* Operation wrapper: */
struct __MultiXTpm11__GetConfig
{
public:
	_MultiXTpm__GetConfig *MultiXTpm__GetConfig;	/* optional element of type MultiXTpm:GetConfig */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm11__UpdateConfig
#define SOAP_TYPE___MultiXTpm11__UpdateConfig (119)
/* Operation wrapper: */
struct __MultiXTpm11__UpdateConfig
{
public:
	_MultiXTpm__UpdateConfig *MultiXTpm__UpdateConfig;	/* optional element of type MultiXTpm:UpdateConfig */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm11__GetSystemStatus
#define SOAP_TYPE___MultiXTpm11__GetSystemStatus (123)
/* Operation wrapper: */
struct __MultiXTpm11__GetSystemStatus
{
public:
	_MultiXTpm__GetSystemStatus *MultiXTpm__GetSystemStatus;	/* optional element of type MultiXTpm:GetSystemStatus */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm11__RestartProcess
#define SOAP_TYPE___MultiXTpm11__RestartProcess (127)
/* Operation wrapper: */
struct __MultiXTpm11__RestartProcess
{
public:
	_MultiXTpm__RestartProcess *MultiXTpm__RestartProcess;	/* optional element of type MultiXTpm:RestartProcess */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm11__RestartGroup
#define SOAP_TYPE___MultiXTpm11__RestartGroup (131)
/* Operation wrapper: */
struct __MultiXTpm11__RestartGroup
{
public:
	_MultiXTpm__RestartGroup *MultiXTpm__RestartGroup;	/* optional element of type MultiXTpm:RestartGroup */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm11__StartProcess
#define SOAP_TYPE___MultiXTpm11__StartProcess (135)
/* Operation wrapper: */
struct __MultiXTpm11__StartProcess
{
public:
	_MultiXTpm__StartProcess *MultiXTpm__StartProcess;	/* optional element of type MultiXTpm:StartProcess */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm11__StartGroup
#define SOAP_TYPE___MultiXTpm11__StartGroup (139)
/* Operation wrapper: */
struct __MultiXTpm11__StartGroup
{
public:
	_MultiXTpm__StartGroup *MultiXTpm__StartGroup;	/* optional element of type MultiXTpm:StartGroup */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm11__ShutdownProcess
#define SOAP_TYPE___MultiXTpm11__ShutdownProcess (143)
/* Operation wrapper: */
struct __MultiXTpm11__ShutdownProcess
{
public:
	_MultiXTpm__ShutdownProcess *MultiXTpm__ShutdownProcess;	/* optional element of type MultiXTpm:ShutdownProcess */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm11__ShutdownGroup
#define SOAP_TYPE___MultiXTpm11__ShutdownGroup (147)
/* Operation wrapper: */
struct __MultiXTpm11__ShutdownGroup
{
public:
	_MultiXTpm__ShutdownGroup *MultiXTpm__ShutdownGroup;	/* optional element of type MultiXTpm:ShutdownGroup */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm11__SuspendGroup
#define SOAP_TYPE___MultiXTpm11__SuspendGroup (151)
/* Operation wrapper: */
struct __MultiXTpm11__SuspendGroup
{
public:
	_MultiXTpm__SuspendGroup *MultiXTpm__SuspendGroup;	/* optional element of type MultiXTpm:SuspendGroup */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm11__SuspendProcess
#define SOAP_TYPE___MultiXTpm11__SuspendProcess (155)
/* Operation wrapper: */
struct __MultiXTpm11__SuspendProcess
{
public:
	_MultiXTpm__SuspendProcess *MultiXTpm__SuspendProcess;	/* optional element of type MultiXTpm:SuspendProcess */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm11__ResumeGroup
#define SOAP_TYPE___MultiXTpm11__ResumeGroup (159)
/* Operation wrapper: */
struct __MultiXTpm11__ResumeGroup
{
public:
	_MultiXTpm__ResumeGroup *MultiXTpm__ResumeGroup;	/* optional element of type MultiXTpm:ResumeGroup */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm11__ResumeProcess
#define SOAP_TYPE___MultiXTpm11__ResumeProcess (163)
/* Operation wrapper: */
struct __MultiXTpm11__ResumeProcess
{
public:
	_MultiXTpm__ResumeProcess *MultiXTpm__ResumeProcess;	/* optional element of type MultiXTpm:ResumeProcess */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm11__RestartAll
#define SOAP_TYPE___MultiXTpm11__RestartAll (167)
/* Operation wrapper: */
struct __MultiXTpm11__RestartAll
{
public:
	_MultiXTpm__RestartAll *MultiXTpm__RestartAll;	/* optional element of type MultiXTpm:RestartAll */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm11__StartAll
#define SOAP_TYPE___MultiXTpm11__StartAll (171)
/* Operation wrapper: */
struct __MultiXTpm11__StartAll
{
public:
	_MultiXTpm__StartAll *MultiXTpm__StartAll;	/* optional element of type MultiXTpm:StartAll */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm11__ShutdownAll
#define SOAP_TYPE___MultiXTpm11__ShutdownAll (175)
/* Operation wrapper: */
struct __MultiXTpm11__ShutdownAll
{
public:
	_MultiXTpm__ShutdownAll *MultiXTpm__ShutdownAll;	/* optional element of type MultiXTpm:ShutdownAll */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm11__SuspendAll
#define SOAP_TYPE___MultiXTpm11__SuspendAll (179)
/* Operation wrapper: */
struct __MultiXTpm11__SuspendAll
{
public:
	_MultiXTpm__SuspendAll *MultiXTpm__SuspendAll;	/* optional element of type MultiXTpm:SuspendAll */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm11__ResumeAll
#define SOAP_TYPE___MultiXTpm11__ResumeAll (183)
/* Operation wrapper: */
struct __MultiXTpm11__ResumeAll
{
public:
	_MultiXTpm__ResumeAll *MultiXTpm__ResumeAll;	/* optional element of type MultiXTpm:ResumeAll */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm12__GetConfig
#define SOAP_TYPE___MultiXTpm12__GetConfig (185)
/* Operation wrapper: */
struct __MultiXTpm12__GetConfig
{
public:
	_MultiXTpm__GetConfig *MultiXTpm__GetConfig;	/* optional element of type MultiXTpm:GetConfig */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm12__UpdateConfig
#define SOAP_TYPE___MultiXTpm12__UpdateConfig (187)
/* Operation wrapper: */
struct __MultiXTpm12__UpdateConfig
{
public:
	_MultiXTpm__UpdateConfig *MultiXTpm__UpdateConfig;	/* optional element of type MultiXTpm:UpdateConfig */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm12__GetSystemStatus
#define SOAP_TYPE___MultiXTpm12__GetSystemStatus (189)
/* Operation wrapper: */
struct __MultiXTpm12__GetSystemStatus
{
public:
	_MultiXTpm__GetSystemStatus *MultiXTpm__GetSystemStatus;	/* optional element of type MultiXTpm:GetSystemStatus */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm12__RestartProcess
#define SOAP_TYPE___MultiXTpm12__RestartProcess (191)
/* Operation wrapper: */
struct __MultiXTpm12__RestartProcess
{
public:
	_MultiXTpm__RestartProcess *MultiXTpm__RestartProcess;	/* optional element of type MultiXTpm:RestartProcess */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm12__RestartGroup
#define SOAP_TYPE___MultiXTpm12__RestartGroup (193)
/* Operation wrapper: */
struct __MultiXTpm12__RestartGroup
{
public:
	_MultiXTpm__RestartGroup *MultiXTpm__RestartGroup;	/* optional element of type MultiXTpm:RestartGroup */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm12__StartProcess
#define SOAP_TYPE___MultiXTpm12__StartProcess (195)
/* Operation wrapper: */
struct __MultiXTpm12__StartProcess
{
public:
	_MultiXTpm__StartProcess *MultiXTpm__StartProcess;	/* optional element of type MultiXTpm:StartProcess */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm12__StartGroup
#define SOAP_TYPE___MultiXTpm12__StartGroup (197)
/* Operation wrapper: */
struct __MultiXTpm12__StartGroup
{
public:
	_MultiXTpm__StartGroup *MultiXTpm__StartGroup;	/* optional element of type MultiXTpm:StartGroup */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm12__ShutdownProcess
#define SOAP_TYPE___MultiXTpm12__ShutdownProcess (199)
/* Operation wrapper: */
struct __MultiXTpm12__ShutdownProcess
{
public:
	_MultiXTpm__ShutdownProcess *MultiXTpm__ShutdownProcess;	/* optional element of type MultiXTpm:ShutdownProcess */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm12__ShutdownGroup
#define SOAP_TYPE___MultiXTpm12__ShutdownGroup (201)
/* Operation wrapper: */
struct __MultiXTpm12__ShutdownGroup
{
public:
	_MultiXTpm__ShutdownGroup *MultiXTpm__ShutdownGroup;	/* optional element of type MultiXTpm:ShutdownGroup */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm12__SuspendGroup
#define SOAP_TYPE___MultiXTpm12__SuspendGroup (203)
/* Operation wrapper: */
struct __MultiXTpm12__SuspendGroup
{
public:
	_MultiXTpm__SuspendGroup *MultiXTpm__SuspendGroup;	/* optional element of type MultiXTpm:SuspendGroup */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm12__SuspendProcess
#define SOAP_TYPE___MultiXTpm12__SuspendProcess (205)
/* Operation wrapper: */
struct __MultiXTpm12__SuspendProcess
{
public:
	_MultiXTpm__SuspendProcess *MultiXTpm__SuspendProcess;	/* optional element of type MultiXTpm:SuspendProcess */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm12__ResumeGroup
#define SOAP_TYPE___MultiXTpm12__ResumeGroup (207)
/* Operation wrapper: */
struct __MultiXTpm12__ResumeGroup
{
public:
	_MultiXTpm__ResumeGroup *MultiXTpm__ResumeGroup;	/* optional element of type MultiXTpm:ResumeGroup */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm12__ResumeProcess
#define SOAP_TYPE___MultiXTpm12__ResumeProcess (209)
/* Operation wrapper: */
struct __MultiXTpm12__ResumeProcess
{
public:
	_MultiXTpm__ResumeProcess *MultiXTpm__ResumeProcess;	/* optional element of type MultiXTpm:ResumeProcess */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm12__RestartAll
#define SOAP_TYPE___MultiXTpm12__RestartAll (211)
/* Operation wrapper: */
struct __MultiXTpm12__RestartAll
{
public:
	_MultiXTpm__RestartAll *MultiXTpm__RestartAll;	/* optional element of type MultiXTpm:RestartAll */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm12__StartAll
#define SOAP_TYPE___MultiXTpm12__StartAll (213)
/* Operation wrapper: */
struct __MultiXTpm12__StartAll
{
public:
	_MultiXTpm__StartAll *MultiXTpm__StartAll;	/* optional element of type MultiXTpm:StartAll */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm12__ShutdownAll
#define SOAP_TYPE___MultiXTpm12__ShutdownAll (215)
/* Operation wrapper: */
struct __MultiXTpm12__ShutdownAll
{
public:
	_MultiXTpm__ShutdownAll *MultiXTpm__ShutdownAll;	/* optional element of type MultiXTpm:ShutdownAll */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm12__SuspendAll
#define SOAP_TYPE___MultiXTpm12__SuspendAll (217)
/* Operation wrapper: */
struct __MultiXTpm12__SuspendAll
{
public:
	_MultiXTpm__SuspendAll *MultiXTpm__SuspendAll;	/* optional element of type MultiXTpm:SuspendAll */
};
#endif

#ifndef SOAP_TYPE___MultiXTpm12__ResumeAll
#define SOAP_TYPE___MultiXTpm12__ResumeAll (219)
/* Operation wrapper: */
struct __MultiXTpm12__ResumeAll
{
public:
	_MultiXTpm__ResumeAll *MultiXTpm__ResumeAll;	/* optional element of type MultiXTpm:ResumeAll */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (220)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (221)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (223)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (226)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (227)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operations                                                         *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm11__GetConfig(struct soap*, _MultiXTpm__GetConfig *MultiXTpm__GetConfig, _MultiXTpm__GetConfigResponse *MultiXTpm__GetConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm11__UpdateConfig(struct soap*, _MultiXTpm__UpdateConfig *MultiXTpm__UpdateConfig, _MultiXTpm__UpdateConfigResponse *MultiXTpm__UpdateConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm11__GetSystemStatus(struct soap*, _MultiXTpm__GetSystemStatus *MultiXTpm__GetSystemStatus, _MultiXTpm__GetSystemStatusResponse *MultiXTpm__GetSystemStatusResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm11__RestartProcess(struct soap*, _MultiXTpm__RestartProcess *MultiXTpm__RestartProcess, _MultiXTpm__RestartProcessResponse *MultiXTpm__RestartProcessResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm11__RestartGroup(struct soap*, _MultiXTpm__RestartGroup *MultiXTpm__RestartGroup, _MultiXTpm__RestartGroupResponse *MultiXTpm__RestartGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm11__StartProcess(struct soap*, _MultiXTpm__StartProcess *MultiXTpm__StartProcess, _MultiXTpm__StartProcessResponse *MultiXTpm__StartProcessResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm11__StartGroup(struct soap*, _MultiXTpm__StartGroup *MultiXTpm__StartGroup, _MultiXTpm__StartGroupResponse *MultiXTpm__StartGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm11__ShutdownProcess(struct soap*, _MultiXTpm__ShutdownProcess *MultiXTpm__ShutdownProcess, _MultiXTpm__ShutdownProcessResponse *MultiXTpm__ShutdownProcessResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm11__ShutdownGroup(struct soap*, _MultiXTpm__ShutdownGroup *MultiXTpm__ShutdownGroup, _MultiXTpm__ShutdownGroupResponse *MultiXTpm__ShutdownGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm11__SuspendGroup(struct soap*, _MultiXTpm__SuspendGroup *MultiXTpm__SuspendGroup, _MultiXTpm__SuspendGroupResponse *MultiXTpm__SuspendGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm11__SuspendProcess(struct soap*, _MultiXTpm__SuspendProcess *MultiXTpm__SuspendProcess, _MultiXTpm__SuspendProcessResponse *MultiXTpm__SuspendProcessResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm11__ResumeGroup(struct soap*, _MultiXTpm__ResumeGroup *MultiXTpm__ResumeGroup, _MultiXTpm__ResumeGroupResponse *MultiXTpm__ResumeGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm11__ResumeProcess(struct soap*, _MultiXTpm__ResumeProcess *MultiXTpm__ResumeProcess, _MultiXTpm__ResumeProcessResponse *MultiXTpm__ResumeProcessResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm11__RestartAll(struct soap*, _MultiXTpm__RestartAll *MultiXTpm__RestartAll, _MultiXTpm__RestartAllResponse *MultiXTpm__RestartAllResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm11__StartAll(struct soap*, _MultiXTpm__StartAll *MultiXTpm__StartAll, _MultiXTpm__StartAllResponse *MultiXTpm__StartAllResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm11__ShutdownAll(struct soap*, _MultiXTpm__ShutdownAll *MultiXTpm__ShutdownAll, _MultiXTpm__ShutdownAllResponse *MultiXTpm__ShutdownAllResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm11__SuspendAll(struct soap*, _MultiXTpm__SuspendAll *MultiXTpm__SuspendAll, _MultiXTpm__SuspendAllResponse *MultiXTpm__SuspendAllResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm11__ResumeAll(struct soap*, _MultiXTpm__ResumeAll *MultiXTpm__ResumeAll, _MultiXTpm__ResumeAllResponse *MultiXTpm__ResumeAllResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm12__GetConfig(struct soap*, _MultiXTpm__GetConfig *MultiXTpm__GetConfig, _MultiXTpm__GetConfigResponse *MultiXTpm__GetConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm12__UpdateConfig(struct soap*, _MultiXTpm__UpdateConfig *MultiXTpm__UpdateConfig, _MultiXTpm__UpdateConfigResponse *MultiXTpm__UpdateConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm12__GetSystemStatus(struct soap*, _MultiXTpm__GetSystemStatus *MultiXTpm__GetSystemStatus, _MultiXTpm__GetSystemStatusResponse *MultiXTpm__GetSystemStatusResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm12__RestartProcess(struct soap*, _MultiXTpm__RestartProcess *MultiXTpm__RestartProcess, _MultiXTpm__RestartProcessResponse *MultiXTpm__RestartProcessResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm12__RestartGroup(struct soap*, _MultiXTpm__RestartGroup *MultiXTpm__RestartGroup, _MultiXTpm__RestartGroupResponse *MultiXTpm__RestartGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm12__StartProcess(struct soap*, _MultiXTpm__StartProcess *MultiXTpm__StartProcess, _MultiXTpm__StartProcessResponse *MultiXTpm__StartProcessResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm12__StartGroup(struct soap*, _MultiXTpm__StartGroup *MultiXTpm__StartGroup, _MultiXTpm__StartGroupResponse *MultiXTpm__StartGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm12__ShutdownProcess(struct soap*, _MultiXTpm__ShutdownProcess *MultiXTpm__ShutdownProcess, _MultiXTpm__ShutdownProcessResponse *MultiXTpm__ShutdownProcessResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm12__ShutdownGroup(struct soap*, _MultiXTpm__ShutdownGroup *MultiXTpm__ShutdownGroup, _MultiXTpm__ShutdownGroupResponse *MultiXTpm__ShutdownGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm12__SuspendGroup(struct soap*, _MultiXTpm__SuspendGroup *MultiXTpm__SuspendGroup, _MultiXTpm__SuspendGroupResponse *MultiXTpm__SuspendGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm12__SuspendProcess(struct soap*, _MultiXTpm__SuspendProcess *MultiXTpm__SuspendProcess, _MultiXTpm__SuspendProcessResponse *MultiXTpm__SuspendProcessResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm12__ResumeGroup(struct soap*, _MultiXTpm__ResumeGroup *MultiXTpm__ResumeGroup, _MultiXTpm__ResumeGroupResponse *MultiXTpm__ResumeGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm12__ResumeProcess(struct soap*, _MultiXTpm__ResumeProcess *MultiXTpm__ResumeProcess, _MultiXTpm__ResumeProcessResponse *MultiXTpm__ResumeProcessResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm12__RestartAll(struct soap*, _MultiXTpm__RestartAll *MultiXTpm__RestartAll, _MultiXTpm__RestartAllResponse *MultiXTpm__RestartAllResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm12__StartAll(struct soap*, _MultiXTpm__StartAll *MultiXTpm__StartAll, _MultiXTpm__StartAllResponse *MultiXTpm__StartAllResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm12__ShutdownAll(struct soap*, _MultiXTpm__ShutdownAll *MultiXTpm__ShutdownAll, _MultiXTpm__ShutdownAllResponse *MultiXTpm__ShutdownAllResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm12__SuspendAll(struct soap*, _MultiXTpm__SuspendAll *MultiXTpm__SuspendAll, _MultiXTpm__SuspendAllResponse *MultiXTpm__SuspendAllResponse);

SOAP_FMAC5 int SOAP_FMAC6 __MultiXTpm12__ResumeAll(struct soap*, _MultiXTpm__ResumeAll *MultiXTpm__ResumeAll, _MultiXTpm__ResumeAllResponse *MultiXTpm__ResumeAllResponse);

/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm11__GetConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__GetConfig *MultiXTpm__GetConfig, _MultiXTpm__GetConfigResponse *MultiXTpm__GetConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm11__UpdateConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__UpdateConfig *MultiXTpm__UpdateConfig, _MultiXTpm__UpdateConfigResponse *MultiXTpm__UpdateConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm11__GetSystemStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__GetSystemStatus *MultiXTpm__GetSystemStatus, _MultiXTpm__GetSystemStatusResponse *MultiXTpm__GetSystemStatusResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm11__RestartProcess(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__RestartProcess *MultiXTpm__RestartProcess, _MultiXTpm__RestartProcessResponse *MultiXTpm__RestartProcessResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm11__RestartGroup(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__RestartGroup *MultiXTpm__RestartGroup, _MultiXTpm__RestartGroupResponse *MultiXTpm__RestartGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm11__StartProcess(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__StartProcess *MultiXTpm__StartProcess, _MultiXTpm__StartProcessResponse *MultiXTpm__StartProcessResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm11__StartGroup(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__StartGroup *MultiXTpm__StartGroup, _MultiXTpm__StartGroupResponse *MultiXTpm__StartGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm11__ShutdownProcess(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__ShutdownProcess *MultiXTpm__ShutdownProcess, _MultiXTpm__ShutdownProcessResponse *MultiXTpm__ShutdownProcessResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm11__ShutdownGroup(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__ShutdownGroup *MultiXTpm__ShutdownGroup, _MultiXTpm__ShutdownGroupResponse *MultiXTpm__ShutdownGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm11__SuspendGroup(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__SuspendGroup *MultiXTpm__SuspendGroup, _MultiXTpm__SuspendGroupResponse *MultiXTpm__SuspendGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm11__SuspendProcess(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__SuspendProcess *MultiXTpm__SuspendProcess, _MultiXTpm__SuspendProcessResponse *MultiXTpm__SuspendProcessResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm11__ResumeGroup(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__ResumeGroup *MultiXTpm__ResumeGroup, _MultiXTpm__ResumeGroupResponse *MultiXTpm__ResumeGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm11__ResumeProcess(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__ResumeProcess *MultiXTpm__ResumeProcess, _MultiXTpm__ResumeProcessResponse *MultiXTpm__ResumeProcessResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm11__RestartAll(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__RestartAll *MultiXTpm__RestartAll, _MultiXTpm__RestartAllResponse *MultiXTpm__RestartAllResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm11__StartAll(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__StartAll *MultiXTpm__StartAll, _MultiXTpm__StartAllResponse *MultiXTpm__StartAllResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm11__ShutdownAll(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__ShutdownAll *MultiXTpm__ShutdownAll, _MultiXTpm__ShutdownAllResponse *MultiXTpm__ShutdownAllResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm11__SuspendAll(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__SuspendAll *MultiXTpm__SuspendAll, _MultiXTpm__SuspendAllResponse *MultiXTpm__SuspendAllResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm11__ResumeAll(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__ResumeAll *MultiXTpm__ResumeAll, _MultiXTpm__ResumeAllResponse *MultiXTpm__ResumeAllResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm12__GetConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__GetConfig *MultiXTpm__GetConfig, _MultiXTpm__GetConfigResponse *MultiXTpm__GetConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm12__UpdateConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__UpdateConfig *MultiXTpm__UpdateConfig, _MultiXTpm__UpdateConfigResponse *MultiXTpm__UpdateConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm12__GetSystemStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__GetSystemStatus *MultiXTpm__GetSystemStatus, _MultiXTpm__GetSystemStatusResponse *MultiXTpm__GetSystemStatusResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm12__RestartProcess(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__RestartProcess *MultiXTpm__RestartProcess, _MultiXTpm__RestartProcessResponse *MultiXTpm__RestartProcessResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm12__RestartGroup(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__RestartGroup *MultiXTpm__RestartGroup, _MultiXTpm__RestartGroupResponse *MultiXTpm__RestartGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm12__StartProcess(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__StartProcess *MultiXTpm__StartProcess, _MultiXTpm__StartProcessResponse *MultiXTpm__StartProcessResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm12__StartGroup(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__StartGroup *MultiXTpm__StartGroup, _MultiXTpm__StartGroupResponse *MultiXTpm__StartGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm12__ShutdownProcess(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__ShutdownProcess *MultiXTpm__ShutdownProcess, _MultiXTpm__ShutdownProcessResponse *MultiXTpm__ShutdownProcessResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm12__ShutdownGroup(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__ShutdownGroup *MultiXTpm__ShutdownGroup, _MultiXTpm__ShutdownGroupResponse *MultiXTpm__ShutdownGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm12__SuspendGroup(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__SuspendGroup *MultiXTpm__SuspendGroup, _MultiXTpm__SuspendGroupResponse *MultiXTpm__SuspendGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm12__SuspendProcess(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__SuspendProcess *MultiXTpm__SuspendProcess, _MultiXTpm__SuspendProcessResponse *MultiXTpm__SuspendProcessResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm12__ResumeGroup(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__ResumeGroup *MultiXTpm__ResumeGroup, _MultiXTpm__ResumeGroupResponse *MultiXTpm__ResumeGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm12__ResumeProcess(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__ResumeProcess *MultiXTpm__ResumeProcess, _MultiXTpm__ResumeProcessResponse *MultiXTpm__ResumeProcessResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm12__RestartAll(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__RestartAll *MultiXTpm__RestartAll, _MultiXTpm__RestartAllResponse *MultiXTpm__RestartAllResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm12__StartAll(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__StartAll *MultiXTpm__StartAll, _MultiXTpm__StartAllResponse *MultiXTpm__StartAllResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm12__ShutdownAll(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__ShutdownAll *MultiXTpm__ShutdownAll, _MultiXTpm__ShutdownAllResponse *MultiXTpm__ShutdownAllResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm12__SuspendAll(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__SuspendAll *MultiXTpm__SuspendAll, _MultiXTpm__SuspendAllResponse *MultiXTpm__SuspendAllResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___MultiXTpm12__ResumeAll(struct soap *soap, const char *soap_endpoint, const char *soap_action, _MultiXTpm__ResumeAll *MultiXTpm__ResumeAll, _MultiXTpm__ResumeAllResponse *MultiXTpm__ResumeAllResponse);

/******************************************************************************\
 *                                                                            *
 * Skeletons                                                                  *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 gSoapMultiXTpm_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 gSoapMultiXTpm_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm11__GetConfig(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm11__UpdateConfig(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm11__GetSystemStatus(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm11__RestartProcess(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm11__RestartGroup(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm11__StartProcess(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm11__StartGroup(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm11__ShutdownProcess(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm11__ShutdownGroup(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm11__SuspendGroup(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm11__SuspendProcess(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm11__ResumeGroup(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm11__ResumeProcess(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm11__RestartAll(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm11__StartAll(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm11__ShutdownAll(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm11__SuspendAll(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm11__ResumeAll(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm12__GetConfig(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm12__UpdateConfig(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm12__GetSystemStatus(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm12__RestartProcess(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm12__RestartGroup(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm12__StartProcess(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm12__StartGroup(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm12__ShutdownProcess(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm12__ShutdownGroup(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm12__SuspendGroup(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm12__SuspendProcess(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm12__ResumeGroup(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm12__ResumeProcess(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm12__RestartAll(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm12__StartAll(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm12__ShutdownAll(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm12__SuspendAll(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___MultiXTpm12__ResumeAll(struct soap*);

#endif

/* End of gSoapMultiXTpmStub.h */
